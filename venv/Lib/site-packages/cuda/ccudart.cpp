/* Generated by Cython 0.29.28 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "cuda"
        ],
        "include_dirs": [
            ".\\cuda",
            "cuda",
            "C:\\Users\\mavaz\\AppData\\Local\\Programs\\Python\\Python37"
        ],
        "language": "c++",
        "library_dirs": [
            "C:\\Users\\mavaz\\AppData\\Local\\Programs\\Python\\Python37\\Lib\\site-packages",
            "C:\\Users\\mavaz\\AppData\\Local\\Programs\\Python\\Python37\\lib"
        ],
        "name": "cuda.ccudart",
        "sources": [
            "cuda\\ccudart.pyx"
        ]
    },
    "module_name": "cuda.ccudart"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_28"
#define CYTHON_HEX_VERSION 0x001D1CF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030B00A1)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__cuda__ccudart
#define __PYX_HAVE_API__cuda__ccudart
/* Early includes */
#include <stdint.h>
#include <string.h>
#include <stdlib.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "cuda\\ccudart.pyx",
  "cuda\\_lib\\ccudart\\utils.pxd",
};
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()


/* "cuda/ccuda.pxd":11
 * 
 * 
 * ctypedef uint32_t cuuint32_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint64_t cuuint64_t
 */
typedef uint32_t __pyx_t_4cuda_5ccuda_cuuint32_t;

/* "cuda/ccuda.pxd":13
 * ctypedef uint32_t cuuint32_t
 * 
 * ctypedef uint64_t cuuint64_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned long long CUdeviceptr_v2
 */
typedef uint64_t __pyx_t_4cuda_5ccuda_cuuint64_t;

/* "cuda/ccuda.pxd":15
 * ctypedef uint64_t cuuint64_t
 * 
 * ctypedef unsigned long long CUdeviceptr_v2             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUdeviceptr_v2 CUdeviceptr
 */
typedef unsigned PY_LONG_LONG __pyx_t_4cuda_5ccuda_CUdeviceptr_v2;

/* "cuda/ccuda.pxd":17
 * ctypedef unsigned long long CUdeviceptr_v2
 * 
 * ctypedef CUdeviceptr_v2 CUdeviceptr             # <<<<<<<<<<<<<<
 * 
 * ctypedef int CUdevice_v1
 */
typedef __pyx_t_4cuda_5ccuda_CUdeviceptr_v2 __pyx_t_4cuda_5ccuda_CUdeviceptr;

/* "cuda/ccuda.pxd":19
 * ctypedef CUdeviceptr_v2 CUdeviceptr
 * 
 * ctypedef int CUdevice_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUdevice_v1 CUdevice
 */
typedef int __pyx_t_4cuda_5ccuda_CUdevice_v1;

/* "cuda/ccuda.pxd":21
 * ctypedef int CUdevice_v1
 * 
 * ctypedef CUdevice_v1 CUdevice             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef __pyx_t_4cuda_5ccuda_CUdevice_v1 __pyx_t_4cuda_5ccuda_CUdevice;

/* "cuda/ccuda.pxd":73
 * ctypedef CUgraphicsResource_st* CUgraphicsResource
 * 
 * ctypedef unsigned long long CUtexObject_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUtexObject_v1 CUtexObject
 */
typedef unsigned PY_LONG_LONG __pyx_t_4cuda_5ccuda_CUtexObject_v1;

/* "cuda/ccuda.pxd":75
 * ctypedef unsigned long long CUtexObject_v1
 * 
 * ctypedef CUtexObject_v1 CUtexObject             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned long long CUsurfObject_v1
 */
typedef __pyx_t_4cuda_5ccuda_CUtexObject_v1 __pyx_t_4cuda_5ccuda_CUtexObject;

/* "cuda/ccuda.pxd":77
 * ctypedef CUtexObject_v1 CUtexObject
 * 
 * ctypedef unsigned long long CUsurfObject_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUsurfObject_v1 CUsurfObject
 */
typedef unsigned PY_LONG_LONG __pyx_t_4cuda_5ccuda_CUsurfObject_v1;

/* "cuda/ccuda.pxd":79
 * ctypedef unsigned long long CUsurfObject_v1
 * 
 * ctypedef CUsurfObject_v1 CUsurfObject             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef __pyx_t_4cuda_5ccuda_CUsurfObject_v1 __pyx_t_4cuda_5ccuda_CUsurfObject;

/* "cuda/ccuda.pxd":1350
 * ctypedef CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1 CUDA_EXT_SEM_WAIT_NODE_PARAMS
 * 
 * ctypedef unsigned long long CUmemGenericAllocationHandle_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUmemGenericAllocationHandle_v1 CUmemGenericAllocationHandle
 */
typedef unsigned PY_LONG_LONG __pyx_t_4cuda_5ccuda_CUmemGenericAllocationHandle_v1;

/* "cuda/ccuda.pxd":1352
 * ctypedef unsigned long long CUmemGenericAllocationHandle_v1
 * 
 * ctypedef CUmemGenericAllocationHandle_v1 CUmemGenericAllocationHandle             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUmemAllocationHandleType_enum:
 */
typedef __pyx_t_4cuda_5ccuda_CUmemGenericAllocationHandle_v1 __pyx_t_4cuda_5ccuda_CUmemGenericAllocationHandle;

/* "cuda/ccuda.pxd":2328
 * 
 * 
 * ctypedef unsigned int GLenum             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned int GLuint
 */
typedef unsigned int __pyx_t_4cuda_5ccuda_GLenum;

/* "cuda/ccuda.pxd":2330
 * ctypedef unsigned int GLenum
 * 
 * ctypedef unsigned int GLuint             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef unsigned int __pyx_t_4cuda_5ccuda_GLuint;

/* "cuda/ccuda.pxd":2342
 * ctypedef void* EGLStreamKHR
 * 
 * ctypedef unsigned int EGLint             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef unsigned int __pyx_t_4cuda_5ccuda_EGLint;

/* "cuda/ccuda.pxd":2349
 * ctypedef void* EGLSyncKHR
 * 
 * ctypedef uint32_t VdpDevice             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned long long VdpGetProcAddress
 */
typedef uint32_t __pyx_t_4cuda_5ccuda_VdpDevice;

/* "cuda/ccuda.pxd":2351
 * ctypedef uint32_t VdpDevice
 * 
 * ctypedef unsigned long long VdpGetProcAddress             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpVideoSurface
 */
typedef unsigned PY_LONG_LONG __pyx_t_4cuda_5ccuda_VdpGetProcAddress;

/* "cuda/ccuda.pxd":2353
 * ctypedef unsigned long long VdpGetProcAddress
 * 
 * ctypedef uint32_t VdpVideoSurface             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpOutputSurface
 */
typedef uint32_t __pyx_t_4cuda_5ccuda_VdpVideoSurface;

/* "cuda/ccuda.pxd":2355
 * ctypedef uint32_t VdpVideoSurface
 * 
 * ctypedef uint32_t VdpOutputSurface             # <<<<<<<<<<<<<<
 * 
 * cdef CUresult cuVDPAUGetDevice(CUdevice* pDevice, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) nogil except ?CUDA_ERROR_NOT_FOUND
 */
typedef uint32_t __pyx_t_4cuda_5ccuda_VdpOutputSurface;

/* "cuda/ccudart.pxd":1058
 *     cudaFormatModeAuto = 1
 * 
 * ctypedef unsigned long long cudaSurfaceObject_t             # <<<<<<<<<<<<<<
 * 
 * cdef enum cudaTextureAddressMode:
 */
typedef unsigned PY_LONG_LONG __pyx_t_4cuda_7ccudart_cudaSurfaceObject_t;

/* "cuda/ccudart.pxd":1089
 *     int seamlessCubemap
 * 
 * ctypedef unsigned long long cudaTextureObject_t             # <<<<<<<<<<<<<<
 * 
 * cdef enum cudaDataType_t:
 */
typedef unsigned PY_LONG_LONG __pyx_t_4cuda_7ccudart_cudaTextureObject_t;

/* "cuda/ccudart.pxd":1664
 * 
 * 
 * ctypedef unsigned int GLenum             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned int GLuint
 */
typedef unsigned int __pyx_t_4cuda_7ccudart_GLenum;

/* "cuda/ccudart.pxd":1666
 * ctypedef unsigned int GLenum
 * 
 * ctypedef unsigned int GLuint             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef unsigned int __pyx_t_4cuda_7ccudart_GLuint;

/* "cuda/ccudart.pxd":1678
 * ctypedef void* EGLStreamKHR
 * 
 * ctypedef unsigned int EGLint             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef unsigned int __pyx_t_4cuda_7ccudart_EGLint;

/* "cuda/ccudart.pxd":1685
 * ctypedef void* EGLSyncKHR
 * 
 * ctypedef uint32_t VdpDevice             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned long long VdpGetProcAddress
 */
typedef uint32_t __pyx_t_4cuda_7ccudart_VdpDevice;

/* "cuda/ccudart.pxd":1687
 * ctypedef uint32_t VdpDevice
 * 
 * ctypedef unsigned long long VdpGetProcAddress             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpVideoSurface
 */
typedef unsigned PY_LONG_LONG __pyx_t_4cuda_7ccudart_VdpGetProcAddress;

/* "cuda/ccudart.pxd":1689
 * ctypedef unsigned long long VdpGetProcAddress
 * 
 * ctypedef uint32_t VdpVideoSurface             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpOutputSurface
 */
typedef uint32_t __pyx_t_4cuda_7ccudart_VdpVideoSurface;

/* "cuda/ccudart.pxd":1691
 * ctypedef uint32_t VdpVideoSurface
 * 
 * ctypedef uint32_t VdpOutputSurface             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaVDPAUGetDevice(int* device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) nogil except ?cudaErrorCallRequiresNewerDriver
 */
typedef uint32_t __pyx_t_4cuda_7ccudart_VdpOutputSurface;

/*--- Type declarations ---*/
struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal;
struct __pyx_t_4cuda_5ccuda_CUuuid_st;
struct __pyx_t_4cuda_5ccuda_CUipcEventHandle_st;
struct __pyx_t_4cuda_5ccuda_CUipcMemHandle_st;
struct __pyx_t_4cuda_5ccuda_CUstreamMemOpWaitValueParams_st;
struct __pyx_t_4cuda_5ccuda_CUstreamMemOpWriteValueParams_st;
struct __pyx_t_4cuda_5ccuda_CUstreamMemOpFlushRemoteWritesParams_st;
union __pyx_t_4cuda_5ccuda_CUstreamBatchMemOpParams_union;
struct __pyx_t_4cuda_5ccuda_CUdevprop_st;
struct __pyx_t_4cuda_5ccuda_CUaccessPolicyWindow_st;
struct __pyx_t_4cuda_5ccuda_CUDA_KERNEL_NODE_PARAMS_st;
struct __pyx_t_4cuda_5ccuda_CUDA_MEMSET_NODE_PARAMS_st;
struct __pyx_t_4cuda_5ccuda_CUDA_HOST_NODE_PARAMS_st;
union __pyx_t_4cuda_5ccuda_CUkernelNodeAttrValue_union;
union __pyx_t_4cuda_5ccuda_CUstreamAttrValue_union;
struct __pyx_t_4cuda_5ccuda_CUexecAffinitySmCount_st;
union __pyx_t_4cuda_5ccuda__CUexecAffinityParam_v1_CUexecAffinityParam_v1_CUexecAffinityParam_st_param_u;
struct __pyx_t_4cuda_5ccuda_CUexecAffinityParam_st;
struct __pyx_t_4cuda_5ccuda_CUDA_MEMCPY2D_st;
struct __pyx_t_4cuda_5ccuda_CUDA_MEMCPY3D_st;
struct __pyx_t_4cuda_5ccuda_CUDA_MEMCPY3D_PEER_st;
struct __pyx_t_4cuda_5ccuda_CUDA_ARRAY_DESCRIPTOR_st;
struct __pyx_t_4cuda_5ccuda_CUDA_ARRAY3D_DESCRIPTOR_st;
struct __pyx_t_4cuda_5ccuda__CUDA_ARRAY_SPARSE_PROPERTIES_v1_CUDA_ARRAY_SPARSE_PROPERTIES_v1_CUDA_ARRAY_SPARSE_PROPERTIES_st_tileExtent_s;
struct __pyx_t_4cuda_5ccuda_CUDA_ARRAY_SPARSE_PROPERTIES_st;
struct __pyx_t_4cuda_5ccuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_st;
struct __pyx_t_4cuda_5ccuda__CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_array_s;
struct __pyx_t_4cuda_5ccuda__CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_mipmap_s;
struct __pyx_t_4cuda_5ccuda__CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_linear_s;
struct __pyx_t_4cuda_5ccuda__CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_pitch2D_s;
struct __pyx_t_4cuda_5ccuda__CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_reserved_s;
union __pyx_t_4cuda_5ccuda__CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_u;
struct __pyx_t_4cuda_5ccuda_CUDA_RESOURCE_DESC_st;
struct __pyx_t_4cuda_5ccuda_CUDA_TEXTURE_DESC_st;
struct __pyx_t_4cuda_5ccuda_CUDA_RESOURCE_VIEW_DESC_st;
struct __pyx_t_4cuda_5ccuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st;
struct __pyx_t_4cuda_5ccuda_CUDA_LAUNCH_PARAMS_st;
struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st_handle_handle_win32_s;
union __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st_handle_u;
struct __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st;
struct __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st;
struct __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st;
struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st_handle_handle_win32_s;
union __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st_handle_u;
struct __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st;
struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st_params_params_fence_s;
union __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st_params_params_nvSciSync_u;
struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st_params_params_keyedMutex_s;
struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st_params_s;
struct __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st;
struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st_params_params_fence_s;
union __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st_params_params_nvSciSync_u;
struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st_params_params_keyedMutex_s;
struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st_params_s;
struct __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st;
struct __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st;
struct __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_st;
union __pyx_t_4cuda_5ccuda__CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_resource_u;
struct __pyx_t_4cuda_5ccuda__CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_subresource_subresource_sparseLevel_s;
struct __pyx_t_4cuda_5ccuda__CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_subresource_subresource_miptail_s;
union __pyx_t_4cuda_5ccuda__CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_subresource_u;
union __pyx_t_4cuda_5ccuda__CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_memHandle_u;
struct __pyx_t_4cuda_5ccuda_CUarrayMapInfo_st;
struct __pyx_t_4cuda_5ccuda_CUmemLocation_st;
struct __pyx_t_4cuda_5ccuda__CUmemAllocationProp_v1_CUmemAllocationProp_v1_CUmemAllocationProp_st_allocFlags_s;
struct __pyx_t_4cuda_5ccuda_CUmemAllocationProp_st;
struct __pyx_t_4cuda_5ccuda_CUmemAccessDesc_st;
struct __pyx_t_4cuda_5ccuda_CUmemPoolProps_st;
struct __pyx_t_4cuda_5ccuda_CUmemPoolPtrExportData_st;
struct __pyx_t_4cuda_5ccuda_CUDA_MEM_ALLOC_NODE_PARAMS_st;
union __pyx_t_4cuda_5ccuda__CUeglFrame_v1_CUeglFrame_v1_CUeglFrame_st_frame_u;
struct __pyx_t_4cuda_5ccuda_CUeglFrame_st;

/* "cuda/ccuda.pxd":135
 * ctypedef CUipcMemHandle_v1 CUipcMemHandle
 * 
 * cdef enum CUipcMem_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS = 1
 * 
 */
enum __pyx_t_4cuda_5ccuda_CUipcMem_flags_enum {
  __pyx_e_4cuda_5ccuda_CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS = 1
};

/* "cuda/ccuda.pxd":140
 * ctypedef CUipcMem_flags_enum CUipcMem_flags
 * 
 * cdef enum CUmemAttach_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_MEM_ATTACH_GLOBAL = 1
 *     CU_MEM_ATTACH_HOST = 2
 */
enum __pyx_t_4cuda_5ccuda_CUmemAttach_flags_enum {
  __pyx_e_4cuda_5ccuda_CU_MEM_ATTACH_GLOBAL = 1,
  __pyx_e_4cuda_5ccuda_CU_MEM_ATTACH_HOST = 2,
  __pyx_e_4cuda_5ccuda_CU_MEM_ATTACH_SINGLE = 4
};

/* "cuda/ccuda.pxd":147
 * ctypedef CUmemAttach_flags_enum CUmemAttach_flags
 * 
 * cdef enum CUctx_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_CTX_SCHED_AUTO = 0
 *     CU_CTX_SCHED_SPIN = 1
 */
enum __pyx_t_4cuda_5ccuda_CUctx_flags_enum {
  __pyx_e_4cuda_5ccuda_CU_CTX_SCHED_AUTO = 0,
  __pyx_e_4cuda_5ccuda_CU_CTX_SCHED_SPIN = 1,
  __pyx_e_4cuda_5ccuda_CU_CTX_SCHED_YIELD = 2,
  __pyx_e_4cuda_5ccuda_CU_CTX_SCHED_BLOCKING_SYNC = 4,
  __pyx_e_4cuda_5ccuda_CU_CTX_BLOCKING_SYNC = 4,
  __pyx_e_4cuda_5ccuda_CU_CTX_SCHED_MASK = 7,
  __pyx_e_4cuda_5ccuda_CU_CTX_MAP_HOST = 8,
  __pyx_e_4cuda_5ccuda_CU_CTX_LMEM_RESIZE_TO_MAX = 16,
  __pyx_e_4cuda_5ccuda_CU_CTX_FLAGS_MASK = 31
};

/* "cuda/ccuda.pxd":160
 * ctypedef CUctx_flags_enum CUctx_flags
 * 
 * cdef enum CUstream_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_STREAM_DEFAULT = 0
 *     CU_STREAM_NON_BLOCKING = 1
 */
enum __pyx_t_4cuda_5ccuda_CUstream_flags_enum {
  __pyx_e_4cuda_5ccuda_CU_STREAM_DEFAULT = 0,
  __pyx_e_4cuda_5ccuda_CU_STREAM_NON_BLOCKING = 1
};

/* "cuda/ccuda.pxd":166
 * ctypedef CUstream_flags_enum CUstream_flags
 * 
 * cdef enum CUevent_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_EVENT_DEFAULT = 0
 *     CU_EVENT_BLOCKING_SYNC = 1
 */
enum __pyx_t_4cuda_5ccuda_CUevent_flags_enum {
  __pyx_e_4cuda_5ccuda_CU_EVENT_DEFAULT = 0,
  __pyx_e_4cuda_5ccuda_CU_EVENT_BLOCKING_SYNC = 1,
  __pyx_e_4cuda_5ccuda_CU_EVENT_DISABLE_TIMING = 2,
  __pyx_e_4cuda_5ccuda_CU_EVENT_INTERPROCESS = 4
};

/* "cuda/ccuda.pxd":174
 * ctypedef CUevent_flags_enum CUevent_flags
 * 
 * cdef enum CUevent_record_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_EVENT_RECORD_DEFAULT = 0
 *     CU_EVENT_RECORD_EXTERNAL = 1
 */
enum __pyx_t_4cuda_5ccuda_CUevent_record_flags_enum {
  __pyx_e_4cuda_5ccuda_CU_EVENT_RECORD_DEFAULT = 0,
  __pyx_e_4cuda_5ccuda_CU_EVENT_RECORD_EXTERNAL = 1
};

/* "cuda/ccuda.pxd":180
 * ctypedef CUevent_record_flags_enum CUevent_record_flags
 * 
 * cdef enum CUevent_wait_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_EVENT_WAIT_DEFAULT = 0
 *     CU_EVENT_WAIT_EXTERNAL = 1
 */
enum __pyx_t_4cuda_5ccuda_CUevent_wait_flags_enum {
  __pyx_e_4cuda_5ccuda_CU_EVENT_WAIT_DEFAULT = 0,
  __pyx_e_4cuda_5ccuda_CU_EVENT_WAIT_EXTERNAL = 1
};

/* "cuda/ccuda.pxd":186
 * ctypedef CUevent_wait_flags_enum CUevent_wait_flags
 * 
 * cdef enum CUstreamWaitValue_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_STREAM_WAIT_VALUE_GEQ = 0
 *     CU_STREAM_WAIT_VALUE_EQ = 1
 */
enum __pyx_t_4cuda_5ccuda_CUstreamWaitValue_flags_enum {
  __pyx_e_4cuda_5ccuda_CU_STREAM_WAIT_VALUE_GEQ = 0,
  __pyx_e_4cuda_5ccuda_CU_STREAM_WAIT_VALUE_EQ = 1,
  __pyx_e_4cuda_5ccuda_CU_STREAM_WAIT_VALUE_AND = 2,
  __pyx_e_4cuda_5ccuda_CU_STREAM_WAIT_VALUE_NOR = 3,
  __pyx_e_4cuda_5ccuda_CU_STREAM_WAIT_VALUE_FLUSH = 0x40000000
};

/* "cuda/ccuda.pxd":195
 * ctypedef CUstreamWaitValue_flags_enum CUstreamWaitValue_flags
 * 
 * cdef enum CUstreamWriteValue_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_STREAM_WRITE_VALUE_DEFAULT = 0
 *     CU_STREAM_WRITE_VALUE_NO_MEMORY_BARRIER = 1
 */
enum __pyx_t_4cuda_5ccuda_CUstreamWriteValue_flags_enum {
  __pyx_e_4cuda_5ccuda_CU_STREAM_WRITE_VALUE_DEFAULT = 0,
  __pyx_e_4cuda_5ccuda_CU_STREAM_WRITE_VALUE_NO_MEMORY_BARRIER = 1
};

/* "cuda/ccuda.pxd":201
 * ctypedef CUstreamWriteValue_flags_enum CUstreamWriteValue_flags
 * 
 * cdef enum CUstreamBatchMemOpType_enum:             # <<<<<<<<<<<<<<
 *     CU_STREAM_MEM_OP_WAIT_VALUE_32 = 1
 *     CU_STREAM_MEM_OP_WRITE_VALUE_32 = 2
 */
enum __pyx_t_4cuda_5ccuda_CUstreamBatchMemOpType_enum {
  __pyx_e_4cuda_5ccuda_CU_STREAM_MEM_OP_WAIT_VALUE_32 = 1,
  __pyx_e_4cuda_5ccuda_CU_STREAM_MEM_OP_WRITE_VALUE_32 = 2,
  __pyx_e_4cuda_5ccuda_CU_STREAM_MEM_OP_WAIT_VALUE_64 = 4,
  __pyx_e_4cuda_5ccuda_CU_STREAM_MEM_OP_WRITE_VALUE_64 = 5,
  __pyx_e_4cuda_5ccuda_CU_STREAM_MEM_OP_FLUSH_REMOTE_WRITES = 3
};

/* "cuda/ccuda.pxd":239
 * ctypedef CUstreamBatchMemOpParams_v1 CUstreamBatchMemOpParams
 * 
 * cdef enum CUoccupancy_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_OCCUPANCY_DEFAULT = 0
 *     CU_OCCUPANCY_DISABLE_CACHING_OVERRIDE = 1
 */
enum __pyx_t_4cuda_5ccuda_CUoccupancy_flags_enum {
  __pyx_e_4cuda_5ccuda_CU_OCCUPANCY_DEFAULT = 0,
  __pyx_e_4cuda_5ccuda_CU_OCCUPANCY_DISABLE_CACHING_OVERRIDE = 1
};

/* "cuda/ccuda.pxd":245
 * ctypedef CUoccupancy_flags_enum CUoccupancy_flags
 * 
 * cdef enum CUstreamUpdateCaptureDependencies_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_STREAM_ADD_CAPTURE_DEPENDENCIES = 0
 *     CU_STREAM_SET_CAPTURE_DEPENDENCIES = 1
 */
enum __pyx_t_4cuda_5ccuda_CUstreamUpdateCaptureDependencies_flags_enum {
  __pyx_e_4cuda_5ccuda_CU_STREAM_ADD_CAPTURE_DEPENDENCIES = 0,
  __pyx_e_4cuda_5ccuda_CU_STREAM_SET_CAPTURE_DEPENDENCIES = 1
};

/* "cuda/ccuda.pxd":251
 * ctypedef CUstreamUpdateCaptureDependencies_flags_enum CUstreamUpdateCaptureDependencies_flags
 * 
 * cdef enum CUarray_format_enum:             # <<<<<<<<<<<<<<
 *     CU_AD_FORMAT_UNSIGNED_INT8 = 1
 *     CU_AD_FORMAT_UNSIGNED_INT16 = 2
 */
enum __pyx_t_4cuda_5ccuda_CUarray_format_enum {
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_UNSIGNED_INT8 = 1,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_UNSIGNED_INT16 = 2,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_UNSIGNED_INT32 = 3,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_SIGNED_INT8 = 8,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_SIGNED_INT16 = 9,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_SIGNED_INT32 = 10,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_HALF = 16,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_FLOAT = 32,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_NV12 = 0xB0,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_UNORM_INT8X1 = 0xC0,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_UNORM_INT8X2 = 0xC1,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_UNORM_INT8X4 = 0xC2,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_UNORM_INT16X1 = 0xC3,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_UNORM_INT16X2 = 0xC4,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_UNORM_INT16X4 = 0xC5,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_SNORM_INT8X1 = 0xC6,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_SNORM_INT8X2 = 0xC7,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_SNORM_INT8X4 = 0xC8,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_SNORM_INT16X1 = 0xC9,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_SNORM_INT16X2 = 0xCA,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_SNORM_INT16X4 = 0xCB,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_BC1_UNORM = 0x91,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_BC1_UNORM_SRGB = 0x92,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_BC2_UNORM = 0x93,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_BC2_UNORM_SRGB = 0x94,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_BC3_UNORM = 0x95,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_BC3_UNORM_SRGB = 0x96,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_BC4_UNORM = 0x97,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_BC4_SNORM = 0x98,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_BC5_UNORM = 0x99,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_BC5_SNORM = 0x9A,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_BC6H_UF16 = 0x9B,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_BC6H_SF16 = 0x9C,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_BC7_UNORM = 0x9D,
  __pyx_e_4cuda_5ccuda_CU_AD_FORMAT_BC7_UNORM_SRGB = 0x9E
};

/* "cuda/ccuda.pxd":290
 * ctypedef CUarray_format_enum CUarray_format
 * 
 * cdef enum CUaddress_mode_enum:             # <<<<<<<<<<<<<<
 *     CU_TR_ADDRESS_MODE_WRAP = 0
 *     CU_TR_ADDRESS_MODE_CLAMP = 1
 */
enum __pyx_t_4cuda_5ccuda_CUaddress_mode_enum {
  __pyx_e_4cuda_5ccuda_CU_TR_ADDRESS_MODE_WRAP = 0,
  __pyx_e_4cuda_5ccuda_CU_TR_ADDRESS_MODE_CLAMP = 1,
  __pyx_e_4cuda_5ccuda_CU_TR_ADDRESS_MODE_MIRROR = 2,
  __pyx_e_4cuda_5ccuda_CU_TR_ADDRESS_MODE_BORDER = 3
};

/* "cuda/ccuda.pxd":298
 * ctypedef CUaddress_mode_enum CUaddress_mode
 * 
 * cdef enum CUfilter_mode_enum:             # <<<<<<<<<<<<<<
 *     CU_TR_FILTER_MODE_POINT = 0
 *     CU_TR_FILTER_MODE_LINEAR = 1
 */
enum __pyx_t_4cuda_5ccuda_CUfilter_mode_enum {
  __pyx_e_4cuda_5ccuda_CU_TR_FILTER_MODE_POINT = 0,
  __pyx_e_4cuda_5ccuda_CU_TR_FILTER_MODE_LINEAR = 1
};

/* "cuda/ccuda.pxd":304
 * ctypedef CUfilter_mode_enum CUfilter_mode
 * 
 * cdef enum CUdevice_attribute_enum:             # <<<<<<<<<<<<<<
 *     CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1
 *     CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X = 2
 */
enum __pyx_t_4cuda_5ccuda_CUdevice_attribute_enum {
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X = 2,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y = 3,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z = 4,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X = 5,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y = 6,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z = 7,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK = 8,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY = 9,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_WARP_SIZE = 10,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAX_PITCH = 11,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK = 12,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_CLOCK_RATE = 13,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT = 14,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_GPU_OVERLAP = 15,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT = 16,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT = 17,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_INTEGRATED = 18,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY = 19,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_COMPUTE_MODE = 20,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH = 21,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH = 22,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT = 23,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH = 24,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT = 25,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH = 26,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH = 27,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT = 28,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS = 29,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH = 27,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT = 28,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES = 29,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT = 30,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS = 31,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_ECC_ENABLED = 32,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_PCI_BUS_ID = 33,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID = 34,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_TCC_DRIVER = 35,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE = 36,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH = 37,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE = 38,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR = 39,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT = 40,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING = 41,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH = 42,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS = 43,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER = 44,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH = 45,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT = 46,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE = 47,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE = 48,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE = 49,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID = 50,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT = 51,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH = 52,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH = 53,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS = 54,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH = 55,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH = 56,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT = 57,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH = 58,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT = 59,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH = 60,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH = 61,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS = 62,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH = 63,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT = 64,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS = 65,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH = 66,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH = 67,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS = 68,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH = 69,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH = 70,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT = 71,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH = 72,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH = 73,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT = 74,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR = 75,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR = 76,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH = 77,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED = 78,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED = 79,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED = 80,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR = 81,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR = 82,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY = 83,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD = 84,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID = 85,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED = 86,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO = 87,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS = 88,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_CONCURRENT_MANAGED_ACCESS = 89,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_COMPUTE_PREEMPTION_SUPPORTED = 90,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_CAN_USE_HOST_POINTER_FOR_REGISTERED_MEM = 91,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_MEM_OPS = 92,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_CAN_USE_64_BIT_STREAM_MEM_OPS = 93,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_WAIT_VALUE_NOR = 94,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_COOPERATIVE_LAUNCH = 95,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_COOPERATIVE_MULTI_DEVICE_LAUNCH = 96,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK_OPTIN = 97,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_CAN_FLUSH_REMOTE_WRITES = 98,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_HOST_REGISTER_SUPPORTED = 99,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS_USES_HOST_PAGE_TABLES = 0x64,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_DIRECT_MANAGED_MEM_ACCESS_FROM_HOST = 0x65,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_VIRTUAL_ADDRESS_MANAGEMENT_SUPPORTED = 0x66,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_VIRTUAL_MEMORY_MANAGEMENT_SUPPORTED = 0x66,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR_SUPPORTED = 0x67,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_WIN32_HANDLE_SUPPORTED = 0x68,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_WIN32_KMT_HANDLE_SUPPORTED = 0x69,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAX_BLOCKS_PER_MULTIPROCESSOR = 0x6A,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_GENERIC_COMPRESSION_SUPPORTED = 0x6B,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAX_PERSISTING_L2_CACHE_SIZE = 0x6C,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAX_ACCESS_POLICY_WINDOW_SIZE = 0x6D,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_WITH_CUDA_VMM_SUPPORTED = 0x6E,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_RESERVED_SHARED_MEMORY_PER_BLOCK = 0x6F,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_SPARSE_CUDA_ARRAY_SUPPORTED = 0x70,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_READ_ONLY_HOST_REGISTER_SUPPORTED = 0x71,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_TIMELINE_SEMAPHORE_INTEROP_SUPPORTED = 0x72,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MEMORY_POOLS_SUPPORTED = 0x73,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_SUPPORTED = 0x74,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_FLUSH_WRITES_OPTIONS = 0x75,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_WRITES_ORDERING = 0x76,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MEMPOOL_SUPPORTED_HANDLE_TYPES = 0x77,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_DEFERRED_MAPPING_CUDA_ARRAY_SUPPORTED = 0x79,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_ATTRIBUTE_MAX = 0x7A
};

/* "cuda/ccuda.pxd":451
 * ctypedef CUdevprop_v1 CUdevprop
 * 
 * cdef enum CUpointer_attribute_enum:             # <<<<<<<<<<<<<<
 *     CU_POINTER_ATTRIBUTE_CONTEXT = 1
 *     CU_POINTER_ATTRIBUTE_MEMORY_TYPE = 2
 */
enum __pyx_t_4cuda_5ccuda_CUpointer_attribute_enum {
  __pyx_e_4cuda_5ccuda_CU_POINTER_ATTRIBUTE_CONTEXT = 1,
  __pyx_e_4cuda_5ccuda_CU_POINTER_ATTRIBUTE_MEMORY_TYPE = 2,
  __pyx_e_4cuda_5ccuda_CU_POINTER_ATTRIBUTE_DEVICE_POINTER = 3,
  __pyx_e_4cuda_5ccuda_CU_POINTER_ATTRIBUTE_HOST_POINTER = 4,
  __pyx_e_4cuda_5ccuda_CU_POINTER_ATTRIBUTE_P2P_TOKENS = 5,
  __pyx_e_4cuda_5ccuda_CU_POINTER_ATTRIBUTE_SYNC_MEMOPS = 6,
  __pyx_e_4cuda_5ccuda_CU_POINTER_ATTRIBUTE_BUFFER_ID = 7,
  __pyx_e_4cuda_5ccuda_CU_POINTER_ATTRIBUTE_IS_MANAGED = 8,
  __pyx_e_4cuda_5ccuda_CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL = 9,
  __pyx_e_4cuda_5ccuda_CU_POINTER_ATTRIBUTE_IS_LEGACY_CUDA_IPC_CAPABLE = 10,
  __pyx_e_4cuda_5ccuda_CU_POINTER_ATTRIBUTE_RANGE_START_ADDR = 11,
  __pyx_e_4cuda_5ccuda_CU_POINTER_ATTRIBUTE_RANGE_SIZE = 12,
  __pyx_e_4cuda_5ccuda_CU_POINTER_ATTRIBUTE_MAPPED = 13,
  __pyx_e_4cuda_5ccuda_CU_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES = 14,
  __pyx_e_4cuda_5ccuda_CU_POINTER_ATTRIBUTE_IS_GPU_DIRECT_RDMA_CAPABLE = 15,
  __pyx_e_4cuda_5ccuda_CU_POINTER_ATTRIBUTE_ACCESS_FLAGS = 16,
  __pyx_e_4cuda_5ccuda_CU_POINTER_ATTRIBUTE_MEMPOOL_HANDLE = 17
};

/* "cuda/ccuda.pxd":472
 * ctypedef CUpointer_attribute_enum CUpointer_attribute
 * 
 * cdef enum CUfunction_attribute_enum:             # <<<<<<<<<<<<<<
 *     CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 0
 *     CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES = 1
 */
enum __pyx_t_4cuda_5ccuda_CUfunction_attribute_enum {
  __pyx_e_4cuda_5ccuda_CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 0,
  __pyx_e_4cuda_5ccuda_CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES = 1,
  __pyx_e_4cuda_5ccuda_CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES = 2,
  __pyx_e_4cuda_5ccuda_CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES = 3,
  __pyx_e_4cuda_5ccuda_CU_FUNC_ATTRIBUTE_NUM_REGS = 4,
  __pyx_e_4cuda_5ccuda_CU_FUNC_ATTRIBUTE_PTX_VERSION = 5,
  __pyx_e_4cuda_5ccuda_CU_FUNC_ATTRIBUTE_BINARY_VERSION = 6,
  __pyx_e_4cuda_5ccuda_CU_FUNC_ATTRIBUTE_CACHE_MODE_CA = 7,
  __pyx_e_4cuda_5ccuda_CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES = 8,
  __pyx_e_4cuda_5ccuda_CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT = 9,
  __pyx_e_4cuda_5ccuda_CU_FUNC_ATTRIBUTE_MAX = 10
};

/* "cuda/ccuda.pxd":487
 * ctypedef CUfunction_attribute_enum CUfunction_attribute
 * 
 * cdef enum CUfunc_cache_enum:             # <<<<<<<<<<<<<<
 *     CU_FUNC_CACHE_PREFER_NONE = 0
 *     CU_FUNC_CACHE_PREFER_SHARED = 1
 */
enum __pyx_t_4cuda_5ccuda_CUfunc_cache_enum {
  __pyx_e_4cuda_5ccuda_CU_FUNC_CACHE_PREFER_NONE = 0,
  __pyx_e_4cuda_5ccuda_CU_FUNC_CACHE_PREFER_SHARED = 1,
  __pyx_e_4cuda_5ccuda_CU_FUNC_CACHE_PREFER_L1 = 2,
  __pyx_e_4cuda_5ccuda_CU_FUNC_CACHE_PREFER_EQUAL = 3
};

/* "cuda/ccuda.pxd":495
 * ctypedef CUfunc_cache_enum CUfunc_cache
 * 
 * cdef enum CUsharedconfig_enum:             # <<<<<<<<<<<<<<
 *     CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE = 0
 *     CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE = 1
 */
enum __pyx_t_4cuda_5ccuda_CUsharedconfig_enum {
  __pyx_e_4cuda_5ccuda_CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE = 0,
  __pyx_e_4cuda_5ccuda_CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE = 1,
  __pyx_e_4cuda_5ccuda_CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE = 2
};

/* "cuda/ccuda.pxd":502
 * ctypedef CUsharedconfig_enum CUsharedconfig
 * 
 * cdef enum CUshared_carveout_enum:             # <<<<<<<<<<<<<<
 *     CU_SHAREDMEM_CARVEOUT_DEFAULT = -1
 *     CU_SHAREDMEM_CARVEOUT_MAX_SHARED = 100
 */
enum __pyx_t_4cuda_5ccuda_CUshared_carveout_enum {
  __pyx_e_4cuda_5ccuda_CU_SHAREDMEM_CARVEOUT_DEFAULT = -1L,
  __pyx_e_4cuda_5ccuda_CU_SHAREDMEM_CARVEOUT_MAX_SHARED = 0x64,
  __pyx_e_4cuda_5ccuda_CU_SHAREDMEM_CARVEOUT_MAX_L1 = 0
};

/* "cuda/ccuda.pxd":509
 * ctypedef CUshared_carveout_enum CUshared_carveout
 * 
 * cdef enum CUmemorytype_enum:             # <<<<<<<<<<<<<<
 *     CU_MEMORYTYPE_HOST = 1
 *     CU_MEMORYTYPE_DEVICE = 2
 */
enum __pyx_t_4cuda_5ccuda_CUmemorytype_enum {
  __pyx_e_4cuda_5ccuda_CU_MEMORYTYPE_HOST = 1,
  __pyx_e_4cuda_5ccuda_CU_MEMORYTYPE_DEVICE = 2,
  __pyx_e_4cuda_5ccuda_CU_MEMORYTYPE_ARRAY = 3,
  __pyx_e_4cuda_5ccuda_CU_MEMORYTYPE_UNIFIED = 4
};

/* "cuda/ccuda.pxd":517
 * ctypedef CUmemorytype_enum CUmemorytype
 * 
 * cdef enum CUcomputemode_enum:             # <<<<<<<<<<<<<<
 *     CU_COMPUTEMODE_DEFAULT = 0
 *     CU_COMPUTEMODE_PROHIBITED = 2
 */
enum __pyx_t_4cuda_5ccuda_CUcomputemode_enum {
  __pyx_e_4cuda_5ccuda_CU_COMPUTEMODE_DEFAULT = 0,
  __pyx_e_4cuda_5ccuda_CU_COMPUTEMODE_PROHIBITED = 2,
  __pyx_e_4cuda_5ccuda_CU_COMPUTEMODE_EXCLUSIVE_PROCESS = 3
};

/* "cuda/ccuda.pxd":524
 * ctypedef CUcomputemode_enum CUcomputemode
 * 
 * cdef enum CUmem_advise_enum:             # <<<<<<<<<<<<<<
 *     CU_MEM_ADVISE_SET_READ_MOSTLY = 1
 *     CU_MEM_ADVISE_UNSET_READ_MOSTLY = 2
 */
enum __pyx_t_4cuda_5ccuda_CUmem_advise_enum {
  __pyx_e_4cuda_5ccuda_CU_MEM_ADVISE_SET_READ_MOSTLY = 1,
  __pyx_e_4cuda_5ccuda_CU_MEM_ADVISE_UNSET_READ_MOSTLY = 2,
  __pyx_e_4cuda_5ccuda_CU_MEM_ADVISE_SET_PREFERRED_LOCATION = 3,
  __pyx_e_4cuda_5ccuda_CU_MEM_ADVISE_UNSET_PREFERRED_LOCATION = 4,
  __pyx_e_4cuda_5ccuda_CU_MEM_ADVISE_SET_ACCESSED_BY = 5,
  __pyx_e_4cuda_5ccuda_CU_MEM_ADVISE_UNSET_ACCESSED_BY = 6
};

/* "cuda/ccuda.pxd":534
 * ctypedef CUmem_advise_enum CUmem_advise
 * 
 * cdef enum CUmem_range_attribute_enum:             # <<<<<<<<<<<<<<
 *     CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY = 1
 *     CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION = 2
 */
enum __pyx_t_4cuda_5ccuda_CUmem_range_attribute_enum {
  __pyx_e_4cuda_5ccuda_CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY = 1,
  __pyx_e_4cuda_5ccuda_CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION = 2,
  __pyx_e_4cuda_5ccuda_CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY = 3,
  __pyx_e_4cuda_5ccuda_CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION = 4
};

/* "cuda/ccuda.pxd":542
 * ctypedef CUmem_range_attribute_enum CUmem_range_attribute
 * 
 * cdef enum CUjit_option_enum:             # <<<<<<<<<<<<<<
 *     CU_JIT_MAX_REGISTERS = 0
 *     CU_JIT_THREADS_PER_BLOCK = 1
 */
enum __pyx_t_4cuda_5ccuda_CUjit_option_enum {
  __pyx_e_4cuda_5ccuda_CU_JIT_MAX_REGISTERS = 0,
  __pyx_e_4cuda_5ccuda_CU_JIT_THREADS_PER_BLOCK = 1,
  __pyx_e_4cuda_5ccuda_CU_JIT_WALL_TIME = 2,
  __pyx_e_4cuda_5ccuda_CU_JIT_INFO_LOG_BUFFER = 3,
  __pyx_e_4cuda_5ccuda_CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES = 4,
  __pyx_e_4cuda_5ccuda_CU_JIT_ERROR_LOG_BUFFER = 5,
  __pyx_e_4cuda_5ccuda_CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES = 6,
  __pyx_e_4cuda_5ccuda_CU_JIT_OPTIMIZATION_LEVEL = 7,
  __pyx_e_4cuda_5ccuda_CU_JIT_TARGET_FROM_CUCONTEXT = 8,
  __pyx_e_4cuda_5ccuda_CU_JIT_TARGET = 9,
  __pyx_e_4cuda_5ccuda_CU_JIT_FALLBACK_STRATEGY = 10,
  __pyx_e_4cuda_5ccuda_CU_JIT_GENERATE_DEBUG_INFO = 11,
  __pyx_e_4cuda_5ccuda_CU_JIT_LOG_VERBOSE = 12,
  __pyx_e_4cuda_5ccuda_CU_JIT_GENERATE_LINE_INFO = 13,
  __pyx_e_4cuda_5ccuda_CU_JIT_CACHE_MODE = 14,
  __pyx_e_4cuda_5ccuda_CU_JIT_NEW_SM3X_OPT = 15,
  __pyx_e_4cuda_5ccuda_CU_JIT_FAST_COMPILE = 16,
  __pyx_e_4cuda_5ccuda_CU_JIT_GLOBAL_SYMBOL_NAMES = 17,
  __pyx_e_4cuda_5ccuda_CU_JIT_GLOBAL_SYMBOL_ADDRESSES = 18,
  __pyx_e_4cuda_5ccuda_CU_JIT_GLOBAL_SYMBOL_COUNT = 19,
  __pyx_e_4cuda_5ccuda_CU_JIT_LTO = 20,
  __pyx_e_4cuda_5ccuda_CU_JIT_FTZ = 21,
  __pyx_e_4cuda_5ccuda_CU_JIT_PREC_DIV = 22,
  __pyx_e_4cuda_5ccuda_CU_JIT_PREC_SQRT = 23,
  __pyx_e_4cuda_5ccuda_CU_JIT_FMA = 24,
  __pyx_e_4cuda_5ccuda_CU_JIT_NUM_OPTIONS = 25
};

/* "cuda/ccuda.pxd":572
 * ctypedef CUjit_option_enum CUjit_option
 * 
 * cdef enum CUjit_target_enum:             # <<<<<<<<<<<<<<
 *     CU_TARGET_COMPUTE_20 = 20
 *     CU_TARGET_COMPUTE_21 = 21
 */
enum __pyx_t_4cuda_5ccuda_CUjit_target_enum {
  __pyx_e_4cuda_5ccuda_CU_TARGET_COMPUTE_20 = 20,
  __pyx_e_4cuda_5ccuda_CU_TARGET_COMPUTE_21 = 21,
  __pyx_e_4cuda_5ccuda_CU_TARGET_COMPUTE_30 = 30,
  __pyx_e_4cuda_5ccuda_CU_TARGET_COMPUTE_32 = 32,
  __pyx_e_4cuda_5ccuda_CU_TARGET_COMPUTE_35 = 35,
  __pyx_e_4cuda_5ccuda_CU_TARGET_COMPUTE_37 = 37,
  __pyx_e_4cuda_5ccuda_CU_TARGET_COMPUTE_50 = 50,
  __pyx_e_4cuda_5ccuda_CU_TARGET_COMPUTE_52 = 52,
  __pyx_e_4cuda_5ccuda_CU_TARGET_COMPUTE_53 = 53,
  __pyx_e_4cuda_5ccuda_CU_TARGET_COMPUTE_60 = 60,
  __pyx_e_4cuda_5ccuda_CU_TARGET_COMPUTE_61 = 61,
  __pyx_e_4cuda_5ccuda_CU_TARGET_COMPUTE_62 = 62,
  __pyx_e_4cuda_5ccuda_CU_TARGET_COMPUTE_70 = 70,
  __pyx_e_4cuda_5ccuda_CU_TARGET_COMPUTE_72 = 72,
  __pyx_e_4cuda_5ccuda_CU_TARGET_COMPUTE_75 = 75,
  __pyx_e_4cuda_5ccuda_CU_TARGET_COMPUTE_80 = 80,
  __pyx_e_4cuda_5ccuda_CU_TARGET_COMPUTE_86 = 86
};

/* "cuda/ccuda.pxd":593
 * ctypedef CUjit_target_enum CUjit_target
 * 
 * cdef enum CUjit_fallback_enum:             # <<<<<<<<<<<<<<
 *     CU_PREFER_PTX = 0
 *     CU_PREFER_BINARY = 1
 */
enum __pyx_t_4cuda_5ccuda_CUjit_fallback_enum {
  __pyx_e_4cuda_5ccuda_CU_PREFER_PTX = 0,
  __pyx_e_4cuda_5ccuda_CU_PREFER_BINARY = 1
};

/* "cuda/ccuda.pxd":599
 * ctypedef CUjit_fallback_enum CUjit_fallback
 * 
 * cdef enum CUjit_cacheMode_enum:             # <<<<<<<<<<<<<<
 *     CU_JIT_CACHE_OPTION_NONE = 0
 *     CU_JIT_CACHE_OPTION_CG = 1
 */
enum __pyx_t_4cuda_5ccuda_CUjit_cacheMode_enum {
  __pyx_e_4cuda_5ccuda_CU_JIT_CACHE_OPTION_NONE = 0,
  __pyx_e_4cuda_5ccuda_CU_JIT_CACHE_OPTION_CG = 1,
  __pyx_e_4cuda_5ccuda_CU_JIT_CACHE_OPTION_CA = 2
};

/* "cuda/ccuda.pxd":606
 * ctypedef CUjit_cacheMode_enum CUjit_cacheMode
 * 
 * cdef enum CUjitInputType_enum:             # <<<<<<<<<<<<<<
 *     CU_JIT_INPUT_CUBIN = 0
 *     CU_JIT_INPUT_PTX = 1
 */
enum __pyx_t_4cuda_5ccuda_CUjitInputType_enum {
  __pyx_e_4cuda_5ccuda_CU_JIT_INPUT_CUBIN = 0,
  __pyx_e_4cuda_5ccuda_CU_JIT_INPUT_PTX = 1,
  __pyx_e_4cuda_5ccuda_CU_JIT_INPUT_FATBINARY = 2,
  __pyx_e_4cuda_5ccuda_CU_JIT_INPUT_OBJECT = 3,
  __pyx_e_4cuda_5ccuda_CU_JIT_INPUT_LIBRARY = 4,
  __pyx_e_4cuda_5ccuda_CU_JIT_INPUT_NVVM = 5,
  __pyx_e_4cuda_5ccuda_CU_JIT_NUM_INPUT_TYPES = 6
};

/* "cuda/ccuda.pxd":622
 * ctypedef CUlinkState_st* CUlinkState
 * 
 * cdef enum CUgraphicsRegisterFlags_enum:             # <<<<<<<<<<<<<<
 *     CU_GRAPHICS_REGISTER_FLAGS_NONE = 0
 *     CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY = 1
 */
enum __pyx_t_4cuda_5ccuda_CUgraphicsRegisterFlags_enum {
  __pyx_e_4cuda_5ccuda_CU_GRAPHICS_REGISTER_FLAGS_NONE = 0,
  __pyx_e_4cuda_5ccuda_CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY = 1,
  __pyx_e_4cuda_5ccuda_CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD = 2,
  __pyx_e_4cuda_5ccuda_CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST = 4,
  __pyx_e_4cuda_5ccuda_CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER = 8
};

/* "cuda/ccuda.pxd":631
 * ctypedef CUgraphicsRegisterFlags_enum CUgraphicsRegisterFlags
 * 
 * cdef enum CUgraphicsMapResourceFlags_enum:             # <<<<<<<<<<<<<<
 *     CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE = 0
 *     CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY = 1
 */
enum __pyx_t_4cuda_5ccuda_CUgraphicsMapResourceFlags_enum {
  __pyx_e_4cuda_5ccuda_CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE = 0,
  __pyx_e_4cuda_5ccuda_CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY = 1,
  __pyx_e_4cuda_5ccuda_CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 2
};

/* "cuda/ccuda.pxd":638
 * ctypedef CUgraphicsMapResourceFlags_enum CUgraphicsMapResourceFlags
 * 
 * cdef enum CUarray_cubemap_face_enum:             # <<<<<<<<<<<<<<
 *     CU_CUBEMAP_FACE_POSITIVE_X = 0
 *     CU_CUBEMAP_FACE_NEGATIVE_X = 1
 */
enum __pyx_t_4cuda_5ccuda_CUarray_cubemap_face_enum {
  __pyx_e_4cuda_5ccuda_CU_CUBEMAP_FACE_POSITIVE_X = 0,
  __pyx_e_4cuda_5ccuda_CU_CUBEMAP_FACE_NEGATIVE_X = 1,
  __pyx_e_4cuda_5ccuda_CU_CUBEMAP_FACE_POSITIVE_Y = 2,
  __pyx_e_4cuda_5ccuda_CU_CUBEMAP_FACE_NEGATIVE_Y = 3,
  __pyx_e_4cuda_5ccuda_CU_CUBEMAP_FACE_POSITIVE_Z = 4,
  __pyx_e_4cuda_5ccuda_CU_CUBEMAP_FACE_NEGATIVE_Z = 5
};

/* "cuda/ccuda.pxd":648
 * ctypedef CUarray_cubemap_face_enum CUarray_cubemap_face
 * 
 * cdef enum CUlimit_enum:             # <<<<<<<<<<<<<<
 *     CU_LIMIT_STACK_SIZE = 0
 *     CU_LIMIT_PRINTF_FIFO_SIZE = 1
 */
enum __pyx_t_4cuda_5ccuda_CUlimit_enum {
  __pyx_e_4cuda_5ccuda_CU_LIMIT_STACK_SIZE = 0,
  __pyx_e_4cuda_5ccuda_CU_LIMIT_PRINTF_FIFO_SIZE = 1,
  __pyx_e_4cuda_5ccuda_CU_LIMIT_MALLOC_HEAP_SIZE = 2,
  __pyx_e_4cuda_5ccuda_CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH = 3,
  __pyx_e_4cuda_5ccuda_CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT = 4,
  __pyx_e_4cuda_5ccuda_CU_LIMIT_MAX_L2_FETCH_GRANULARITY = 5,
  __pyx_e_4cuda_5ccuda_CU_LIMIT_PERSISTING_L2_CACHE_SIZE = 6,
  __pyx_e_4cuda_5ccuda_CU_LIMIT_MAX = 7
};

/* "cuda/ccuda.pxd":660
 * ctypedef CUlimit_enum CUlimit
 * 
 * cdef enum CUresourcetype_enum:             # <<<<<<<<<<<<<<
 *     CU_RESOURCE_TYPE_ARRAY = 0
 *     CU_RESOURCE_TYPE_MIPMAPPED_ARRAY = 1
 */
enum __pyx_t_4cuda_5ccuda_CUresourcetype_enum {
  __pyx_e_4cuda_5ccuda_CU_RESOURCE_TYPE_ARRAY = 0,
  __pyx_e_4cuda_5ccuda_CU_RESOURCE_TYPE_MIPMAPPED_ARRAY = 1,
  __pyx_e_4cuda_5ccuda_CU_RESOURCE_TYPE_LINEAR = 2,
  __pyx_e_4cuda_5ccuda_CU_RESOURCE_TYPE_PITCH2D = 3
};

/* "cuda/ccuda.pxd":670
 * ctypedef void (*CUhostFn)(void* userData)
 * 
 * cdef enum CUaccessProperty_enum:             # <<<<<<<<<<<<<<
 *     CU_ACCESS_PROPERTY_NORMAL = 0
 *     CU_ACCESS_PROPERTY_STREAMING = 1
 */
enum __pyx_t_4cuda_5ccuda_CUaccessProperty_enum {
  __pyx_e_4cuda_5ccuda_CU_ACCESS_PROPERTY_NORMAL = 0,
  __pyx_e_4cuda_5ccuda_CU_ACCESS_PROPERTY_STREAMING = 1,
  __pyx_e_4cuda_5ccuda_CU_ACCESS_PROPERTY_PERSISTING = 2
};

/* "cuda/ccuda.pxd":724
 * ctypedef CUDA_HOST_NODE_PARAMS_v1 CUDA_HOST_NODE_PARAMS
 * 
 * cdef enum CUgraphNodeType_enum:             # <<<<<<<<<<<<<<
 *     CU_GRAPH_NODE_TYPE_KERNEL = 0
 *     CU_GRAPH_NODE_TYPE_MEMCPY = 1
 */
enum __pyx_t_4cuda_5ccuda_CUgraphNodeType_enum {
  __pyx_e_4cuda_5ccuda_CU_GRAPH_NODE_TYPE_KERNEL = 0,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_NODE_TYPE_MEMCPY = 1,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_NODE_TYPE_MEMSET = 2,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_NODE_TYPE_HOST = 3,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_NODE_TYPE_GRAPH = 4,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_NODE_TYPE_EMPTY = 5,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_NODE_TYPE_WAIT_EVENT = 6,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_NODE_TYPE_EVENT_RECORD = 7,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_NODE_TYPE_EXT_SEMAS_SIGNAL = 8,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_NODE_TYPE_EXT_SEMAS_WAIT = 9,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_NODE_TYPE_MEM_ALLOC = 10,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_NODE_TYPE_MEM_FREE = 11
};

/* "cuda/ccuda.pxd":740
 * ctypedef CUgraphNodeType_enum CUgraphNodeType
 * 
 * cdef enum CUsynchronizationPolicy_enum:             # <<<<<<<<<<<<<<
 *     CU_SYNC_POLICY_AUTO = 1
 *     CU_SYNC_POLICY_SPIN = 2
 */
enum __pyx_t_4cuda_5ccuda_CUsynchronizationPolicy_enum {
  __pyx_e_4cuda_5ccuda_CU_SYNC_POLICY_AUTO = 1,
  __pyx_e_4cuda_5ccuda_CU_SYNC_POLICY_SPIN = 2,
  __pyx_e_4cuda_5ccuda_CU_SYNC_POLICY_YIELD = 3,
  __pyx_e_4cuda_5ccuda_CU_SYNC_POLICY_BLOCKING_SYNC = 4
};

/* "cuda/ccuda.pxd":748
 * ctypedef CUsynchronizationPolicy_enum CUsynchronizationPolicy
 * 
 * cdef enum CUkernelNodeAttrID_enum:             # <<<<<<<<<<<<<<
 *     CU_KERNEL_NODE_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1
 *     CU_KERNEL_NODE_ATTRIBUTE_COOPERATIVE = 2
 */
enum __pyx_t_4cuda_5ccuda_CUkernelNodeAttrID_enum {
  __pyx_e_4cuda_5ccuda_CU_KERNEL_NODE_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1,
  __pyx_e_4cuda_5ccuda_CU_KERNEL_NODE_ATTRIBUTE_COOPERATIVE = 2
};

/* "cuda/ccuda.pxd":762
 * ctypedef CUkernelNodeAttrValue_v1 CUkernelNodeAttrValue
 * 
 * cdef enum CUstreamCaptureStatus_enum:             # <<<<<<<<<<<<<<
 *     CU_STREAM_CAPTURE_STATUS_NONE = 0
 *     CU_STREAM_CAPTURE_STATUS_ACTIVE = 1
 */
enum __pyx_t_4cuda_5ccuda_CUstreamCaptureStatus_enum {
  __pyx_e_4cuda_5ccuda_CU_STREAM_CAPTURE_STATUS_NONE = 0,
  __pyx_e_4cuda_5ccuda_CU_STREAM_CAPTURE_STATUS_ACTIVE = 1,
  __pyx_e_4cuda_5ccuda_CU_STREAM_CAPTURE_STATUS_INVALIDATED = 2
};

/* "cuda/ccuda.pxd":769
 * ctypedef CUstreamCaptureStatus_enum CUstreamCaptureStatus
 * 
 * cdef enum CUstreamCaptureMode_enum:             # <<<<<<<<<<<<<<
 *     CU_STREAM_CAPTURE_MODE_GLOBAL = 0
 *     CU_STREAM_CAPTURE_MODE_THREAD_LOCAL = 1
 */
enum __pyx_t_4cuda_5ccuda_CUstreamCaptureMode_enum {
  __pyx_e_4cuda_5ccuda_CU_STREAM_CAPTURE_MODE_GLOBAL = 0,
  __pyx_e_4cuda_5ccuda_CU_STREAM_CAPTURE_MODE_THREAD_LOCAL = 1,
  __pyx_e_4cuda_5ccuda_CU_STREAM_CAPTURE_MODE_RELAXED = 2
};

/* "cuda/ccuda.pxd":776
 * ctypedef CUstreamCaptureMode_enum CUstreamCaptureMode
 * 
 * cdef enum CUstreamAttrID_enum:             # <<<<<<<<<<<<<<
 *     CU_STREAM_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1
 *     CU_STREAM_ATTRIBUTE_SYNCHRONIZATION_POLICY = 3
 */
enum __pyx_t_4cuda_5ccuda_CUstreamAttrID_enum {
  __pyx_e_4cuda_5ccuda_CU_STREAM_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1,
  __pyx_e_4cuda_5ccuda_CU_STREAM_ATTRIBUTE_SYNCHRONIZATION_POLICY = 3
};

/* "cuda/ccuda.pxd":790
 * ctypedef CUstreamAttrValue_v1 CUstreamAttrValue
 * 
 * cdef enum CUdriverProcAddress_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_GET_PROC_ADDRESS_DEFAULT = 0
 *     CU_GET_PROC_ADDRESS_LEGACY_STREAM = 1
 */
enum __pyx_t_4cuda_5ccuda_CUdriverProcAddress_flags_enum {
  __pyx_e_4cuda_5ccuda_CU_GET_PROC_ADDRESS_DEFAULT = 0,
  __pyx_e_4cuda_5ccuda_CU_GET_PROC_ADDRESS_LEGACY_STREAM = 1,
  __pyx_e_4cuda_5ccuda_CU_GET_PROC_ADDRESS_PER_THREAD_DEFAULT_STREAM = 2
};

/* "cuda/ccuda.pxd":797
 * ctypedef CUdriverProcAddress_flags_enum CUdriverProcAddress_flags
 * 
 * cdef enum CUexecAffinityType_enum:             # <<<<<<<<<<<<<<
 *     CU_EXEC_AFFINITY_TYPE_SM_COUNT = 0
 *     CU_EXEC_AFFINITY_TYPE_MAX = 1
 */
enum __pyx_t_4cuda_5ccuda_CUexecAffinityType_enum {
  __pyx_e_4cuda_5ccuda_CU_EXEC_AFFINITY_TYPE_SM_COUNT = 0,
  __pyx_e_4cuda_5ccuda_CU_EXEC_AFFINITY_TYPE_MAX = 1
};

/* "cuda/ccuda.pxd":821
 * ctypedef CUexecAffinityParam_v1 CUexecAffinityParam
 * 
 * cdef enum cudaError_enum:             # <<<<<<<<<<<<<<
 *     CUDA_SUCCESS = 0
 *     CUDA_ERROR_INVALID_VALUE = 1
 */
enum __pyx_t_4cuda_5ccuda_cudaError_enum {
  __pyx_e_4cuda_5ccuda_CUDA_SUCCESS = 0,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_INVALID_VALUE = 1,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_OUT_OF_MEMORY = 2,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_INITIALIZED = 3,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_DEINITIALIZED = 4,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_PROFILER_DISABLED = 5,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_PROFILER_NOT_INITIALIZED = 6,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_PROFILER_ALREADY_STARTED = 7,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_PROFILER_ALREADY_STOPPED = 8,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_STUB_LIBRARY = 34,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_NO_DEVICE = 0x64,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_INVALID_DEVICE = 0x65,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_DEVICE_NOT_LICENSED = 0x66,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_INVALID_IMAGE = 0xC8,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_INVALID_CONTEXT = 0xC9,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_CONTEXT_ALREADY_CURRENT = 0xCA,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_MAP_FAILED = 0xCD,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_UNMAP_FAILED = 0xCE,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_ARRAY_IS_MAPPED = 0xCF,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_ALREADY_MAPPED = 0xD0,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_NO_BINARY_FOR_GPU = 0xD1,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_ALREADY_ACQUIRED = 0xD2,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_MAPPED = 0xD3,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_MAPPED_AS_ARRAY = 0xD4,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_MAPPED_AS_POINTER = 0xD5,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_ECC_UNCORRECTABLE = 0xD6,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_UNSUPPORTED_LIMIT = 0xD7,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_CONTEXT_ALREADY_IN_USE = 0xD8,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_PEER_ACCESS_UNSUPPORTED = 0xD9,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_INVALID_PTX = 0xDA,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_INVALID_GRAPHICS_CONTEXT = 0xDB,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_NVLINK_UNCORRECTABLE = 0xDC,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_JIT_COMPILER_NOT_FOUND = 0xDD,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_UNSUPPORTED_PTX_VERSION = 0xDE,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_JIT_COMPILATION_DISABLED = 0xDF,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_UNSUPPORTED_EXEC_AFFINITY = 0xE0,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_INVALID_SOURCE = 0x12C,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_FILE_NOT_FOUND = 0x12D,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND = 0x12E,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_SHARED_OBJECT_INIT_FAILED = 0x12F,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_OPERATING_SYSTEM = 0x130,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_INVALID_HANDLE = 0x190,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_ILLEGAL_STATE = 0x191,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND = 0x1F4,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_READY = 0x258,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_ILLEGAL_ADDRESS = 0x2BC,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES = 0x2BD,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_LAUNCH_TIMEOUT = 0x2BE,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING = 0x2BF,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED = 0x2C0,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_PEER_ACCESS_NOT_ENABLED = 0x2C1,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE = 0x2C4,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_CONTEXT_IS_DESTROYED = 0x2C5,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_ASSERT = 0x2C6,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_TOO_MANY_PEERS = 0x2C7,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED = 0x2C8,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED = 0x2C9,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_HARDWARE_STACK_ERROR = 0x2CA,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_ILLEGAL_INSTRUCTION = 0x2CB,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_MISALIGNED_ADDRESS = 0x2CC,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_INVALID_ADDRESS_SPACE = 0x2CD,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_INVALID_PC = 0x2CE,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_LAUNCH_FAILED = 0x2CF,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_COOPERATIVE_LAUNCH_TOO_LARGE = 0x2D0,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_PERMITTED = 0x320,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_SUPPORTED = 0x321,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_SYSTEM_NOT_READY = 0x322,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_SYSTEM_DRIVER_MISMATCH = 0x323,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_COMPAT_NOT_SUPPORTED_ON_DEVICE = 0x324,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_MPS_CONNECTION_FAILED = 0x325,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_MPS_RPC_FAILURE = 0x326,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_MPS_SERVER_NOT_READY = 0x327,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_MPS_MAX_CLIENTS_REACHED = 0x328,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_MPS_MAX_CONNECTIONS_REACHED = 0x329,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_STREAM_CAPTURE_UNSUPPORTED = 0x384,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_STREAM_CAPTURE_INVALIDATED = 0x385,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_STREAM_CAPTURE_MERGE = 0x386,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_STREAM_CAPTURE_UNMATCHED = 0x387,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_STREAM_CAPTURE_UNJOINED = 0x388,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_STREAM_CAPTURE_ISOLATION = 0x389,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_STREAM_CAPTURE_IMPLICIT = 0x38A,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_CAPTURED_EVENT = 0x38B,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_STREAM_CAPTURE_WRONG_THREAD = 0x38C,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_TIMEOUT = 0x38D,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_GRAPH_EXEC_UPDATE_FAILURE = 0x38E,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_EXTERNAL_DEVICE = 0x38F,
  __pyx_e_4cuda_5ccuda_CUDA_ERROR_UNKNOWN = 0x3E7
};

/* "cuda/ccuda.pxd":912
 * ctypedef cudaError_enum CUresult
 * 
 * cdef enum CUdevice_P2PAttribute_enum:             # <<<<<<<<<<<<<<
 *     CU_DEVICE_P2P_ATTRIBUTE_PERFORMANCE_RANK = 1
 *     CU_DEVICE_P2P_ATTRIBUTE_ACCESS_SUPPORTED = 2
 */
enum __pyx_t_4cuda_5ccuda_CUdevice_P2PAttribute_enum {
  __pyx_e_4cuda_5ccuda_CU_DEVICE_P2P_ATTRIBUTE_PERFORMANCE_RANK = 1,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_P2P_ATTRIBUTE_ACCESS_SUPPORTED = 2,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_P2P_ATTRIBUTE_NATIVE_ATOMIC_SUPPORTED = 3,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_P2P_ATTRIBUTE_ACCESS_ACCESS_SUPPORTED = 4,
  __pyx_e_4cuda_5ccuda_CU_DEVICE_P2P_ATTRIBUTE_CUDA_ARRAY_ACCESS_SUPPORTED = 4
};

/* "cuda/ccuda.pxd":1111
 * ctypedef CUDA_TEXTURE_DESC_v1 CUDA_TEXTURE_DESC
 * 
 * cdef enum CUresourceViewFormat_enum:             # <<<<<<<<<<<<<<
 *     CU_RES_VIEW_FORMAT_NONE = 0
 *     CU_RES_VIEW_FORMAT_UINT_1X8 = 1
 */
enum __pyx_t_4cuda_5ccuda_CUresourceViewFormat_enum {
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_NONE = 0,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_UINT_1X8 = 1,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_UINT_2X8 = 2,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_UINT_4X8 = 3,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_SINT_1X8 = 4,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_SINT_2X8 = 5,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_SINT_4X8 = 6,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_UINT_1X16 = 7,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_UINT_2X16 = 8,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_UINT_4X16 = 9,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_SINT_1X16 = 10,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_SINT_2X16 = 11,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_SINT_4X16 = 12,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_UINT_1X32 = 13,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_UINT_2X32 = 14,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_UINT_4X32 = 15,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_SINT_1X32 = 16,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_SINT_2X32 = 17,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_SINT_4X32 = 18,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_FLOAT_1X16 = 19,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_FLOAT_2X16 = 20,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_FLOAT_4X16 = 21,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_FLOAT_1X32 = 22,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_FLOAT_2X32 = 23,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_FLOAT_4X32 = 24,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_UNSIGNED_BC1 = 25,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_UNSIGNED_BC2 = 26,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_UNSIGNED_BC3 = 27,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_UNSIGNED_BC4 = 28,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_SIGNED_BC4 = 29,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_UNSIGNED_BC5 = 30,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_SIGNED_BC5 = 31,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_UNSIGNED_BC6H = 32,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_SIGNED_BC6H = 33,
  __pyx_e_4cuda_5ccuda_CU_RES_VIEW_FORMAT_UNSIGNED_BC7 = 34
};

/* "cuda/ccuda.pxd":1173
 * ctypedef CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1 CUDA_POINTER_ATTRIBUTE_P2P_TOKENS
 * 
 * cdef enum CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum:             # <<<<<<<<<<<<<<
 *     CU_POINTER_ATTRIBUTE_ACCESS_FLAG_NONE = 0
 *     CU_POINTER_ATTRIBUTE_ACCESS_FLAG_READ = 1
 */
enum __pyx_t_4cuda_5ccuda_CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum {
  __pyx_e_4cuda_5ccuda_CU_POINTER_ATTRIBUTE_ACCESS_FLAG_NONE = 0,
  __pyx_e_4cuda_5ccuda_CU_POINTER_ATTRIBUTE_ACCESS_FLAG_READ = 1,
  __pyx_e_4cuda_5ccuda_CU_POINTER_ATTRIBUTE_ACCESS_FLAG_READWRITE = 3
};

/* "cuda/ccuda.pxd":1196
 * ctypedef CUDA_LAUNCH_PARAMS_v1 CUDA_LAUNCH_PARAMS
 * 
 * cdef enum CUexternalMemoryHandleType_enum:             # <<<<<<<<<<<<<<
 *     CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD = 1
 *     CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32 = 2
 */
enum __pyx_t_4cuda_5ccuda_CUexternalMemoryHandleType_enum {
  __pyx_e_4cuda_5ccuda_CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD = 1,
  __pyx_e_4cuda_5ccuda_CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32 = 2,
  __pyx_e_4cuda_5ccuda_CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT = 3,
  __pyx_e_4cuda_5ccuda_CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP = 4,
  __pyx_e_4cuda_5ccuda_CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE = 5,
  __pyx_e_4cuda_5ccuda_CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE = 6,
  __pyx_e_4cuda_5ccuda_CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE_KMT = 7,
  __pyx_e_4cuda_5ccuda_CU_EXTERNAL_MEMORY_HANDLE_TYPE_NVSCIBUF = 8
};

/* "cuda/ccuda.pxd":1248
 * ctypedef CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1 CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC
 * 
 * cdef enum CUexternalSemaphoreHandleType_enum:             # <<<<<<<<<<<<<<
 *     CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD = 1
 *     CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32 = 2
 */
enum __pyx_t_4cuda_5ccuda_CUexternalSemaphoreHandleType_enum {
  __pyx_e_4cuda_5ccuda_CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD = 1,
  __pyx_e_4cuda_5ccuda_CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32 = 2,
  __pyx_e_4cuda_5ccuda_CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT = 3,
  __pyx_e_4cuda_5ccuda_CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE = 4,
  __pyx_e_4cuda_5ccuda_CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE = 5,
  __pyx_e_4cuda_5ccuda_CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_NVSCISYNC = 6,
  __pyx_e_4cuda_5ccuda_CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX = 7,
  __pyx_e_4cuda_5ccuda_CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX_KMT = 8,
  __pyx_e_4cuda_5ccuda_CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_FD = 9,
  __pyx_e_4cuda_5ccuda_CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_WIN32 = 10
};

/* "cuda/ccuda.pxd":1354
 * ctypedef CUmemGenericAllocationHandle_v1 CUmemGenericAllocationHandle
 * 
 * cdef enum CUmemAllocationHandleType_enum:             # <<<<<<<<<<<<<<
 *     CU_MEM_HANDLE_TYPE_NONE = 0
 *     CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR = 1
 */
enum __pyx_t_4cuda_5ccuda_CUmemAllocationHandleType_enum {
  __pyx_e_4cuda_5ccuda_CU_MEM_HANDLE_TYPE_NONE = 0,
  __pyx_e_4cuda_5ccuda_CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR = 1,
  __pyx_e_4cuda_5ccuda_CU_MEM_HANDLE_TYPE_WIN32 = 2,
  __pyx_e_4cuda_5ccuda_CU_MEM_HANDLE_TYPE_WIN32_KMT = 4,
  __pyx_e_4cuda_5ccuda_CU_MEM_HANDLE_TYPE_MAX = 0x7FFFFFFF
};

/* "cuda/ccuda.pxd":1363
 * ctypedef CUmemAllocationHandleType_enum CUmemAllocationHandleType
 * 
 * cdef enum CUmemAccess_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_MEM_ACCESS_FLAGS_PROT_NONE = 0
 *     CU_MEM_ACCESS_FLAGS_PROT_READ = 1
 */
enum __pyx_t_4cuda_5ccuda_CUmemAccess_flags_enum {
  __pyx_e_4cuda_5ccuda_CU_MEM_ACCESS_FLAGS_PROT_NONE = 0,
  __pyx_e_4cuda_5ccuda_CU_MEM_ACCESS_FLAGS_PROT_READ = 1,
  __pyx_e_4cuda_5ccuda_CU_MEM_ACCESS_FLAGS_PROT_READWRITE = 3,
  __pyx_e_4cuda_5ccuda_CU_MEM_ACCESS_FLAGS_PROT_MAX = 0x7FFFFFFF
};

/* "cuda/ccuda.pxd":1371
 * ctypedef CUmemAccess_flags_enum CUmemAccess_flags
 * 
 * cdef enum CUmemLocationType_enum:             # <<<<<<<<<<<<<<
 *     CU_MEM_LOCATION_TYPE_INVALID = 0
 *     CU_MEM_LOCATION_TYPE_DEVICE = 1
 */
enum __pyx_t_4cuda_5ccuda_CUmemLocationType_enum {
  __pyx_e_4cuda_5ccuda_CU_MEM_LOCATION_TYPE_INVALID = 0,
  __pyx_e_4cuda_5ccuda_CU_MEM_LOCATION_TYPE_DEVICE = 1,
  __pyx_e_4cuda_5ccuda_CU_MEM_LOCATION_TYPE_MAX = 0x7FFFFFFF
};

/* "cuda/ccuda.pxd":1378
 * ctypedef CUmemLocationType_enum CUmemLocationType
 * 
 * cdef enum CUmemAllocationType_enum:             # <<<<<<<<<<<<<<
 *     CU_MEM_ALLOCATION_TYPE_INVALID = 0
 *     CU_MEM_ALLOCATION_TYPE_PINNED = 1
 */
enum __pyx_t_4cuda_5ccuda_CUmemAllocationType_enum {
  __pyx_e_4cuda_5ccuda_CU_MEM_ALLOCATION_TYPE_INVALID = 0,
  __pyx_e_4cuda_5ccuda_CU_MEM_ALLOCATION_TYPE_PINNED = 1,
  __pyx_e_4cuda_5ccuda_CU_MEM_ALLOCATION_TYPE_MAX = 0x7FFFFFFF
};

/* "cuda/ccuda.pxd":1385
 * ctypedef CUmemAllocationType_enum CUmemAllocationType
 * 
 * cdef enum CUmemAllocationGranularity_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_MEM_ALLOC_GRANULARITY_MINIMUM = 0
 *     CU_MEM_ALLOC_GRANULARITY_RECOMMENDED = 1
 */
enum __pyx_t_4cuda_5ccuda_CUmemAllocationGranularity_flags_enum {
  __pyx_e_4cuda_5ccuda_CU_MEM_ALLOC_GRANULARITY_MINIMUM = 0,
  __pyx_e_4cuda_5ccuda_CU_MEM_ALLOC_GRANULARITY_RECOMMENDED = 1
};

/* "cuda/ccuda.pxd":1391
 * ctypedef CUmemAllocationGranularity_flags_enum CUmemAllocationGranularity_flags
 * 
 * cdef enum CUarraySparseSubresourceType_enum:             # <<<<<<<<<<<<<<
 *     CU_ARRAY_SPARSE_SUBRESOURCE_TYPE_SPARSE_LEVEL = 0
 *     CU_ARRAY_SPARSE_SUBRESOURCE_TYPE_MIPTAIL = 1
 */
enum __pyx_t_4cuda_5ccuda_CUarraySparseSubresourceType_enum {
  __pyx_e_4cuda_5ccuda_CU_ARRAY_SPARSE_SUBRESOURCE_TYPE_SPARSE_LEVEL = 0,
  __pyx_e_4cuda_5ccuda_CU_ARRAY_SPARSE_SUBRESOURCE_TYPE_MIPTAIL = 1
};

/* "cuda/ccuda.pxd":1397
 * ctypedef CUarraySparseSubresourceType_enum CUarraySparseSubresourceType
 * 
 * cdef enum CUmemOperationType_enum:             # <<<<<<<<<<<<<<
 *     CU_MEM_OPERATION_TYPE_MAP = 1
 *     CU_MEM_OPERATION_TYPE_UNMAP = 2
 */
enum __pyx_t_4cuda_5ccuda_CUmemOperationType_enum {
  __pyx_e_4cuda_5ccuda_CU_MEM_OPERATION_TYPE_MAP = 1,
  __pyx_e_4cuda_5ccuda_CU_MEM_OPERATION_TYPE_UNMAP = 2
};

/* "cuda/ccuda.pxd":1403
 * ctypedef CUmemOperationType_enum CUmemOperationType
 * 
 * cdef enum CUmemHandleType_enum:             # <<<<<<<<<<<<<<
 *     CU_MEM_HANDLE_TYPE_GENERIC = 0
 * 
 */
enum __pyx_t_4cuda_5ccuda_CUmemHandleType_enum {
  __pyx_e_4cuda_5ccuda_CU_MEM_HANDLE_TYPE_GENERIC = 0
};

/* "cuda/ccuda.pxd":1459
 * ctypedef CUmemLocation_v1 CUmemLocation
 * 
 * cdef enum CUmemAllocationCompType_enum:             # <<<<<<<<<<<<<<
 *     CU_MEM_ALLOCATION_COMP_NONE = 0
 *     CU_MEM_ALLOCATION_COMP_GENERIC = 1
 */
enum __pyx_t_4cuda_5ccuda_CUmemAllocationCompType_enum {
  __pyx_e_4cuda_5ccuda_CU_MEM_ALLOCATION_COMP_NONE = 0,
  __pyx_e_4cuda_5ccuda_CU_MEM_ALLOCATION_COMP_GENERIC = 1
};

/* "cuda/ccuda.pxd":1490
 * ctypedef CUmemAccessDesc_v1 CUmemAccessDesc
 * 
 * cdef enum CUgraphExecUpdateResult_enum:             # <<<<<<<<<<<<<<
 *     CU_GRAPH_EXEC_UPDATE_SUCCESS = 0
 *     CU_GRAPH_EXEC_UPDATE_ERROR = 1
 */
enum __pyx_t_4cuda_5ccuda_CUgraphExecUpdateResult_enum {
  __pyx_e_4cuda_5ccuda_CU_GRAPH_EXEC_UPDATE_SUCCESS = 0,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_EXEC_UPDATE_ERROR = 1,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_EXEC_UPDATE_ERROR_TOPOLOGY_CHANGED = 2,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_EXEC_UPDATE_ERROR_NODE_TYPE_CHANGED = 3,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_EXEC_UPDATE_ERROR_FUNCTION_CHANGED = 4,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_EXEC_UPDATE_ERROR_PARAMETERS_CHANGED = 5,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_EXEC_UPDATE_ERROR_NOT_SUPPORTED = 6,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_EXEC_UPDATE_ERROR_UNSUPPORTED_FUNCTION_CHANGE = 7,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_EXEC_UPDATE_ERROR_ATTRIBUTES_CHANGED = 8
};

/* "cuda/ccuda.pxd":1503
 * ctypedef CUgraphExecUpdateResult_enum CUgraphExecUpdateResult
 * 
 * cdef enum CUmemPool_attribute_enum:             # <<<<<<<<<<<<<<
 *     CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES = 1
 *     CU_MEMPOOL_ATTR_REUSE_ALLOW_OPPORTUNISTIC = 2
 */
enum __pyx_t_4cuda_5ccuda_CUmemPool_attribute_enum {
  __pyx_e_4cuda_5ccuda_CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES = 1,
  __pyx_e_4cuda_5ccuda_CU_MEMPOOL_ATTR_REUSE_ALLOW_OPPORTUNISTIC = 2,
  __pyx_e_4cuda_5ccuda_CU_MEMPOOL_ATTR_REUSE_ALLOW_INTERNAL_DEPENDENCIES = 3,
  __pyx_e_4cuda_5ccuda_CU_MEMPOOL_ATTR_RELEASE_THRESHOLD = 4,
  __pyx_e_4cuda_5ccuda_CU_MEMPOOL_ATTR_RESERVED_MEM_CURRENT = 5,
  __pyx_e_4cuda_5ccuda_CU_MEMPOOL_ATTR_RESERVED_MEM_HIGH = 6,
  __pyx_e_4cuda_5ccuda_CU_MEMPOOL_ATTR_USED_MEM_CURRENT = 7,
  __pyx_e_4cuda_5ccuda_CU_MEMPOOL_ATTR_USED_MEM_HIGH = 8
};

/* "cuda/ccuda.pxd":1542
 * ctypedef CUDA_MEM_ALLOC_NODE_PARAMS_st CUDA_MEM_ALLOC_NODE_PARAMS
 * 
 * cdef enum CUgraphMem_attribute_enum:             # <<<<<<<<<<<<<<
 *     CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT = 0
 *     CU_GRAPH_MEM_ATTR_USED_MEM_HIGH = 1
 */
enum __pyx_t_4cuda_5ccuda_CUgraphMem_attribute_enum {
  __pyx_e_4cuda_5ccuda_CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT = 0,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_MEM_ATTR_USED_MEM_HIGH = 1,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_MEM_ATTR_RESERVED_MEM_CURRENT = 2,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_MEM_ATTR_RESERVED_MEM_HIGH = 3
};

/* "cuda/ccuda.pxd":1550
 * ctypedef CUgraphMem_attribute_enum CUgraphMem_attribute
 * 
 * cdef enum CUflushGPUDirectRDMAWritesOptions_enum:             # <<<<<<<<<<<<<<
 *     CU_FLUSH_GPU_DIRECT_RDMA_WRITES_OPTION_HOST = 1
 *     CU_FLUSH_GPU_DIRECT_RDMA_WRITES_OPTION_MEMOPS = 2
 */
enum __pyx_t_4cuda_5ccuda_CUflushGPUDirectRDMAWritesOptions_enum {
  __pyx_e_4cuda_5ccuda_CU_FLUSH_GPU_DIRECT_RDMA_WRITES_OPTION_HOST = 1,
  __pyx_e_4cuda_5ccuda_CU_FLUSH_GPU_DIRECT_RDMA_WRITES_OPTION_MEMOPS = 2
};

/* "cuda/ccuda.pxd":1556
 * ctypedef CUflushGPUDirectRDMAWritesOptions_enum CUflushGPUDirectRDMAWritesOptions
 * 
 * cdef enum CUGPUDirectRDMAWritesOrdering_enum:             # <<<<<<<<<<<<<<
 *     CU_GPU_DIRECT_RDMA_WRITES_ORDERING_NONE = 0
 *     CU_GPU_DIRECT_RDMA_WRITES_ORDERING_OWNER = 100
 */
enum __pyx_t_4cuda_5ccuda_CUGPUDirectRDMAWritesOrdering_enum {
  __pyx_e_4cuda_5ccuda_CU_GPU_DIRECT_RDMA_WRITES_ORDERING_NONE = 0,
  __pyx_e_4cuda_5ccuda_CU_GPU_DIRECT_RDMA_WRITES_ORDERING_OWNER = 0x64,
  __pyx_e_4cuda_5ccuda_CU_GPU_DIRECT_RDMA_WRITES_ORDERING_ALL_DEVICES = 0xC8
};

/* "cuda/ccuda.pxd":1563
 * ctypedef CUGPUDirectRDMAWritesOrdering_enum CUGPUDirectRDMAWritesOrdering
 * 
 * cdef enum CUflushGPUDirectRDMAWritesScope_enum:             # <<<<<<<<<<<<<<
 *     CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TO_OWNER = 100
 *     CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TO_ALL_DEVICES = 200
 */
enum __pyx_t_4cuda_5ccuda_CUflushGPUDirectRDMAWritesScope_enum {
  __pyx_e_4cuda_5ccuda_CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TO_OWNER = 0x64,
  __pyx_e_4cuda_5ccuda_CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TO_ALL_DEVICES = 0xC8
};

/* "cuda/ccuda.pxd":1569
 * ctypedef CUflushGPUDirectRDMAWritesScope_enum CUflushGPUDirectRDMAWritesScope
 * 
 * cdef enum CUflushGPUDirectRDMAWritesTarget_enum:             # <<<<<<<<<<<<<<
 *     CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TARGET_CURRENT_CTX = 0
 * 
 */
enum __pyx_t_4cuda_5ccuda_CUflushGPUDirectRDMAWritesTarget_enum {
  __pyx_e_4cuda_5ccuda_CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TARGET_CURRENT_CTX = 0
};

/* "cuda/ccuda.pxd":1574
 * ctypedef CUflushGPUDirectRDMAWritesTarget_enum CUflushGPUDirectRDMAWritesTarget
 * 
 * cdef enum CUgraphDebugDot_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_GRAPH_DEBUG_DOT_FLAGS_VERBOSE = 1
 *     CU_GRAPH_DEBUG_DOT_FLAGS_RUNTIME_TYPES = 2
 */
enum __pyx_t_4cuda_5ccuda_CUgraphDebugDot_flags_enum {
  __pyx_e_4cuda_5ccuda_CU_GRAPH_DEBUG_DOT_FLAGS_VERBOSE = 1,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_DEBUG_DOT_FLAGS_RUNTIME_TYPES = 2,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_DEBUG_DOT_FLAGS_KERNEL_NODE_PARAMS = 4,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_DEBUG_DOT_FLAGS_MEMCPY_NODE_PARAMS = 8,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_DEBUG_DOT_FLAGS_MEMSET_NODE_PARAMS = 16,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_DEBUG_DOT_FLAGS_HOST_NODE_PARAMS = 32,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_DEBUG_DOT_FLAGS_EVENT_NODE_PARAMS = 64,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_DEBUG_DOT_FLAGS_EXT_SEMAS_SIGNAL_NODE_PARAMS = 0x80,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_DEBUG_DOT_FLAGS_EXT_SEMAS_WAIT_NODE_PARAMS = 0x100,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_DEBUG_DOT_FLAGS_KERNEL_NODE_ATTRIBUTES = 0x200,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_DEBUG_DOT_FLAGS_HANDLES = 0x400,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_DEBUG_DOT_FLAGS_MEM_ALLOC_NODE_PARAMS = 0x800,
  __pyx_e_4cuda_5ccuda_CU_GRAPH_DEBUG_DOT_FLAGS_MEM_FREE_NODE_PARAMS = 0x1000
};

/* "cuda/ccuda.pxd":1591
 * ctypedef CUgraphDebugDot_flags_enum CUgraphDebugDot_flags
 * 
 * cdef enum CUuserObject_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_USER_OBJECT_NO_DESTRUCTOR_SYNC = 1
 * 
 */
enum __pyx_t_4cuda_5ccuda_CUuserObject_flags_enum {
  __pyx_e_4cuda_5ccuda_CU_USER_OBJECT_NO_DESTRUCTOR_SYNC = 1
};

/* "cuda/ccuda.pxd":1596
 * ctypedef CUuserObject_flags_enum CUuserObject_flags
 * 
 * cdef enum CUuserObjectRetain_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_GRAPH_USER_OBJECT_MOVE = 1
 * 
 */
enum __pyx_t_4cuda_5ccuda_CUuserObjectRetain_flags_enum {
  __pyx_e_4cuda_5ccuda_CU_GRAPH_USER_OBJECT_MOVE = 1
};

/* "cuda/ccuda.pxd":1601
 * ctypedef CUuserObjectRetain_flags_enum CUuserObjectRetain_flags
 * 
 * cdef enum CUgraphInstantiate_flags_enum:             # <<<<<<<<<<<<<<
 *     CUDA_GRAPH_INSTANTIATE_FLAG_AUTO_FREE_ON_LAUNCH = 1
 * 
 */
enum __pyx_t_4cuda_5ccuda_CUgraphInstantiate_flags_enum {
  __pyx_e_4cuda_5ccuda_CUDA_GRAPH_INSTANTIATE_FLAG_AUTO_FREE_ON_LAUNCH = 1
};

/* "cuda/ccuda.pxd":2314
 * cdef CUresult cuGetExportTable(const void** ppExportTable, const CUuuid* pExportTableId) nogil except ?CUDA_ERROR_NOT_FOUND
 * 
 * cdef enum CUoutput_mode_enum:             # <<<<<<<<<<<<<<
 *     CU_OUT_KEY_VALUE_PAIR = 0
 *     CU_OUT_CSV = 1
 */
enum __pyx_t_4cuda_5ccuda_CUoutput_mode_enum {
  __pyx_e_4cuda_5ccuda_CU_OUT_KEY_VALUE_PAIR = 0,
  __pyx_e_4cuda_5ccuda_CU_OUT_CSV = 1
};

/* "cuda/ccuda.pxd":2365
 * cdef CUresult cuGraphicsVDPAURegisterOutputSurface(CUgraphicsResource* pCudaResource, VdpOutputSurface vdpSurface, unsigned int flags) nogil except ?CUDA_ERROR_NOT_FOUND
 * 
 * cdef enum CUeglFrameType_enum:             # <<<<<<<<<<<<<<
 *     CU_EGL_FRAME_TYPE_ARRAY = 0
 *     CU_EGL_FRAME_TYPE_PITCH = 1
 */
enum __pyx_t_4cuda_5ccuda_CUeglFrameType_enum {
  __pyx_e_4cuda_5ccuda_CU_EGL_FRAME_TYPE_ARRAY = 0,
  __pyx_e_4cuda_5ccuda_CU_EGL_FRAME_TYPE_PITCH = 1
};

/* "cuda/ccuda.pxd":2371
 * ctypedef CUeglFrameType_enum CUeglFrameType
 * 
 * cdef enum CUeglResourceLocationFlags_enum:             # <<<<<<<<<<<<<<
 *     CU_EGL_RESOURCE_LOCATION_SYSMEM = 0
 *     CU_EGL_RESOURCE_LOCATION_VIDMEM = 1
 */
enum __pyx_t_4cuda_5ccuda_CUeglResourceLocationFlags_enum {
  __pyx_e_4cuda_5ccuda_CU_EGL_RESOURCE_LOCATION_SYSMEM = 0,
  __pyx_e_4cuda_5ccuda_CU_EGL_RESOURCE_LOCATION_VIDMEM = 1
};

/* "cuda/ccuda.pxd":2377
 * ctypedef CUeglResourceLocationFlags_enum CUeglResourceLocationFlags
 * 
 * cdef enum CUeglColorFormat_enum:             # <<<<<<<<<<<<<<
 *     CU_EGL_COLOR_FORMAT_YUV420_PLANAR = 0
 *     CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR = 1
 */
enum __pyx_t_4cuda_5ccuda_CUeglColorFormat_enum {
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_PLANAR = 0,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR = 1,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV422_PLANAR = 2,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV422_SEMIPLANAR = 3,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_RGB = 4,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BGR = 5,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_ARGB = 6,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_RGBA = 7,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_L = 8,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_R = 9,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV444_PLANAR = 10,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV444_SEMIPLANAR = 11,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUYV_422 = 12,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_UYVY_422 = 13,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_ABGR = 14,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BGRA = 15,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_A = 16,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_RG = 17,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_AYUV = 18,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU444_SEMIPLANAR = 19,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU422_SEMIPLANAR = 20,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_SEMIPLANAR = 21,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_444_SEMIPLANAR = 22,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR = 23,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12V12U12_444_SEMIPLANAR = 24,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12V12U12_420_SEMIPLANAR = 25,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_VYUY_ER = 26,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_UYVY_ER = 27,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUYV_ER = 28,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVYU_ER = 29,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV_ER = 30,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUVA_ER = 31,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_AYUV_ER = 32,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV444_PLANAR_ER = 33,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV422_PLANAR_ER = 34,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_PLANAR_ER = 35,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV444_SEMIPLANAR_ER = 36,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV422_SEMIPLANAR_ER = 37,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR_ER = 38,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU444_PLANAR_ER = 39,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU422_PLANAR_ER = 40,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_PLANAR_ER = 41,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU444_SEMIPLANAR_ER = 42,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU422_SEMIPLANAR_ER = 43,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_SEMIPLANAR_ER = 44,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_RGGB = 45,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_BGGR = 46,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_GRBG = 47,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_GBRG = 48,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER10_RGGB = 49,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER10_BGGR = 50,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER10_GRBG = 51,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER10_GBRG = 52,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_RGGB = 53,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_BGGR = 54,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_GRBG = 55,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_GBRG = 56,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER14_RGGB = 57,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER14_BGGR = 58,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER14_GRBG = 59,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER14_GBRG = 60,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER20_RGGB = 61,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER20_BGGR = 62,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER20_GRBG = 63,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER20_GBRG = 64,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU444_PLANAR = 65,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU422_PLANAR = 66,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_PLANAR = 67,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_ISP_RGGB = 68,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_ISP_BGGR = 69,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_ISP_GRBG = 70,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_ISP_GBRG = 71,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_BCCR = 72,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_RCCB = 73,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_CRBC = 74,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_CBRC = 75,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER10_CCCC = 76,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_BCCR = 77,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_RCCB = 78,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_CRBC = 79,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_CBRC = 80,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_CCCC = 81,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y = 82,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR_2020 = 83,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_SEMIPLANAR_2020 = 84,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_PLANAR_2020 = 85,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_PLANAR_2020 = 86,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR_709 = 87,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_SEMIPLANAR_709 = 88,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_PLANAR_709 = 89,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_PLANAR_709 = 90,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR_709 = 91,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR_2020 = 92,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_422_SEMIPLANAR_2020 = 93,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_422_SEMIPLANAR = 94,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_422_SEMIPLANAR_709 = 95,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y_ER = 96,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y_709_ER = 97,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10_ER = 98,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10_709_ER = 99,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12_ER = 0x64,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12_709_ER = 0x65,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUVA = 0x66,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV = 0x67,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVYU = 0x68,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_VYUY = 0x69,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR_ER = 0x6A,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR_709_ER = 0x6B,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_444_SEMIPLANAR_ER = 0x6C,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_444_SEMIPLANAR_709_ER = 0x6D,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12V12U12_420_SEMIPLANAR_ER = 0x6E,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12V12U12_420_SEMIPLANAR_709_ER = 0x6F,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12V12U12_444_SEMIPLANAR_ER = 0x70,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12V12U12_444_SEMIPLANAR_709_ER = 0x71,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_MAX = 0x72
};

/* "cuda/ccuda.pxd":2549
 * cdef CUresult cuGraphicsGLRegisterImage(CUgraphicsResource* pCudaResource, GLuint image, GLenum target, unsigned int Flags) nogil except ?CUDA_ERROR_NOT_FOUND
 * 
 * cdef enum CUGLDeviceList_enum:             # <<<<<<<<<<<<<<
 *     CU_GL_DEVICE_LIST_ALL = 1
 *     CU_GL_DEVICE_LIST_CURRENT_FRAME = 2
 */
enum __pyx_t_4cuda_5ccuda_CUGLDeviceList_enum {
  __pyx_e_4cuda_5ccuda_CU_GL_DEVICE_LIST_ALL = 1,
  __pyx_e_4cuda_5ccuda_CU_GL_DEVICE_LIST_CURRENT_FRAME = 2,
  __pyx_e_4cuda_5ccuda_CU_GL_DEVICE_LIST_NEXT_FRAME = 3
};

/* "cuda/ccuda.pxd":2558
 * cdef CUresult cuGLGetDevices(unsigned int* pCudaDeviceCount, CUdevice* pCudaDevices, unsigned int cudaDeviceCount, CUGLDeviceList deviceList) nogil except ?CUDA_ERROR_NOT_FOUND
 * 
 * cdef enum CUGLmap_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_GL_MAP_RESOURCE_FLAGS_NONE = 0
 *     CU_GL_MAP_RESOURCE_FLAGS_READ_ONLY = 1
 */
enum __pyx_t_4cuda_5ccuda_CUGLmap_flags_enum {
  __pyx_e_4cuda_5ccuda_CU_GL_MAP_RESOURCE_FLAGS_NONE = 0,
  __pyx_e_4cuda_5ccuda_CU_GL_MAP_RESOURCE_FLAGS_READ_ONLY = 1,
  __pyx_e_4cuda_5ccuda_CU_GL_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 2
};

/* "cuda/ccuda.pxd":2565
 * ctypedef CUGLmap_flags_enum CUGLmap_flags
 * 
 * cdef enum: CUDA_VERSION = 11060             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_IPC_HANDLE_SIZE = 64
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_VERSION = 0x2B34
};

/* "cuda/ccuda.pxd":2567
 * cdef enum: CUDA_VERSION = 11060
 * 
 * cdef enum: CU_IPC_HANDLE_SIZE = 64             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_LEGACY = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_IPC_HANDLE_SIZE = 64
};

/* "cuda/ccuda.pxd":2569
 * cdef enum: CU_IPC_HANDLE_SIZE = 64
 * 
 * cdef enum: CU_STREAM_LEGACY = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_PER_THREAD = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_STREAM_LEGACY = 1
};

/* "cuda/ccuda.pxd":2571
 * cdef enum: CU_STREAM_LEGACY = 1
 * 
 * cdef enum: CU_STREAM_PER_THREAD = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTALLOC_PORTABLE = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_STREAM_PER_THREAD = 2
};

/* "cuda/ccuda.pxd":2573
 * cdef enum: CU_STREAM_PER_THREAD = 2
 * 
 * cdef enum: CU_MEMHOSTALLOC_PORTABLE = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTALLOC_DEVICEMAP = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTALLOC_PORTABLE = 1
};

/* "cuda/ccuda.pxd":2575
 * cdef enum: CU_MEMHOSTALLOC_PORTABLE = 1
 * 
 * cdef enum: CU_MEMHOSTALLOC_DEVICEMAP = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTALLOC_WRITECOMBINED = 4
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTALLOC_DEVICEMAP = 2
};

/* "cuda/ccuda.pxd":2577
 * cdef enum: CU_MEMHOSTALLOC_DEVICEMAP = 2
 * 
 * cdef enum: CU_MEMHOSTALLOC_WRITECOMBINED = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTREGISTER_PORTABLE = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTALLOC_WRITECOMBINED = 4
};

/* "cuda/ccuda.pxd":2579
 * cdef enum: CU_MEMHOSTALLOC_WRITECOMBINED = 4
 * 
 * cdef enum: CU_MEMHOSTREGISTER_PORTABLE = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTREGISTER_DEVICEMAP = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTREGISTER_PORTABLE = 1
};

/* "cuda/ccuda.pxd":2581
 * cdef enum: CU_MEMHOSTREGISTER_PORTABLE = 1
 * 
 * cdef enum: CU_MEMHOSTREGISTER_DEVICEMAP = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTREGISTER_IOMEMORY = 4
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTREGISTER_DEVICEMAP = 2
};

/* "cuda/ccuda.pxd":2583
 * cdef enum: CU_MEMHOSTREGISTER_DEVICEMAP = 2
 * 
 * cdef enum: CU_MEMHOSTREGISTER_IOMEMORY = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTREGISTER_READ_ONLY = 8
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTREGISTER_IOMEMORY = 4
};

/* "cuda/ccuda.pxd":2585
 * cdef enum: CU_MEMHOSTREGISTER_IOMEMORY = 4
 * 
 * cdef enum: CU_MEMHOSTREGISTER_READ_ONLY = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTREGISTER_READ_ONLY = 8
};

/* "cuda/ccuda.pxd":2587
 * cdef enum: CU_MEMHOSTREGISTER_READ_ONLY = 8
 * 
 * cdef enum: CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_EXTERNAL_MEMORY_DEDICATED = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL = 1
};

/* "cuda/ccuda.pxd":2589
 * cdef enum: CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL = 1
 * 
 * cdef enum: CUDA_EXTERNAL_MEMORY_DEDICATED = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_DEDICATED = 1
};

/* "cuda/ccuda.pxd":2591
 * cdef enum: CUDA_EXTERNAL_MEMORY_DEDICATED = 1
 * 
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC = 1
};

/* "cuda/ccuda.pxd":2593
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC = 1
 * 
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_NVSCISYNC_ATTR_SIGNAL = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC = 2
};

/* "cuda/ccuda.pxd":2595
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC = 2
 * 
 * cdef enum: CUDA_NVSCISYNC_ATTR_SIGNAL = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_NVSCISYNC_ATTR_WAIT = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_NVSCISYNC_ATTR_SIGNAL = 1
};

/* "cuda/ccuda.pxd":2597
 * cdef enum: CUDA_NVSCISYNC_ATTR_SIGNAL = 1
 * 
 * cdef enum: CUDA_NVSCISYNC_ATTR_WAIT = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEM_CREATE_USAGE_TILE_POOL = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_NVSCISYNC_ATTR_WAIT = 2
};

/* "cuda/ccuda.pxd":2599
 * cdef enum: CUDA_NVSCISYNC_ATTR_WAIT = 2
 * 
 * cdef enum: CU_MEM_CREATE_USAGE_TILE_POOL = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEM_CREATE_USAGE_TILE_POOL = 1
};

/* "cuda/ccuda.pxd":2601
 * cdef enum: CU_MEM_CREATE_USAGE_TILE_POOL = 1
 * 
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC = 1
};

/* "cuda/ccuda.pxd":2603
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC = 1
 * 
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_LAYERED = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC = 2
};

/* "cuda/ccuda.pxd":2605
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC = 2
 * 
 * cdef enum: CUDA_ARRAY3D_LAYERED = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_2DARRAY = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_LAYERED = 1
};

/* "cuda/ccuda.pxd":2607
 * cdef enum: CUDA_ARRAY3D_LAYERED = 1
 * 
 * cdef enum: CUDA_ARRAY3D_2DARRAY = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_SURFACE_LDST = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_2DARRAY = 1
};

/* "cuda/ccuda.pxd":2609
 * cdef enum: CUDA_ARRAY3D_2DARRAY = 1
 * 
 * cdef enum: CUDA_ARRAY3D_SURFACE_LDST = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_CUBEMAP = 4
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_SURFACE_LDST = 2
};

/* "cuda/ccuda.pxd":2611
 * cdef enum: CUDA_ARRAY3D_SURFACE_LDST = 2
 * 
 * cdef enum: CUDA_ARRAY3D_CUBEMAP = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_TEXTURE_GATHER = 8
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_CUBEMAP = 4
};

/* "cuda/ccuda.pxd":2613
 * cdef enum: CUDA_ARRAY3D_CUBEMAP = 4
 * 
 * cdef enum: CUDA_ARRAY3D_TEXTURE_GATHER = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_DEPTH_TEXTURE = 16
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_TEXTURE_GATHER = 8
};

/* "cuda/ccuda.pxd":2615
 * cdef enum: CUDA_ARRAY3D_TEXTURE_GATHER = 8
 * 
 * cdef enum: CUDA_ARRAY3D_DEPTH_TEXTURE = 16             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_COLOR_ATTACHMENT = 32
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_DEPTH_TEXTURE = 16
};

/* "cuda/ccuda.pxd":2617
 * cdef enum: CUDA_ARRAY3D_DEPTH_TEXTURE = 16
 * 
 * cdef enum: CUDA_ARRAY3D_COLOR_ATTACHMENT = 32             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_SPARSE = 64
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_COLOR_ATTACHMENT = 32
};

/* "cuda/ccuda.pxd":2619
 * cdef enum: CUDA_ARRAY3D_COLOR_ATTACHMENT = 32
 * 
 * cdef enum: CUDA_ARRAY3D_SPARSE = 64             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_DEFERRED_MAPPING = 128
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_SPARSE = 64
};

/* "cuda/ccuda.pxd":2621
 * cdef enum: CUDA_ARRAY3D_SPARSE = 64
 * 
 * cdef enum: CUDA_ARRAY3D_DEFERRED_MAPPING = 128             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSA_OVERRIDE_FORMAT = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_DEFERRED_MAPPING = 0x80
};

/* "cuda/ccuda.pxd":2623
 * cdef enum: CUDA_ARRAY3D_DEFERRED_MAPPING = 128
 * 
 * cdef enum: CU_TRSA_OVERRIDE_FORMAT = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSF_READ_AS_INTEGER = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_TRSA_OVERRIDE_FORMAT = 1
};

/* "cuda/ccuda.pxd":2625
 * cdef enum: CU_TRSA_OVERRIDE_FORMAT = 1
 * 
 * cdef enum: CU_TRSF_READ_AS_INTEGER = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSF_NORMALIZED_COORDINATES = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_TRSF_READ_AS_INTEGER = 1
};

/* "cuda/ccuda.pxd":2627
 * cdef enum: CU_TRSF_READ_AS_INTEGER = 1
 * 
 * cdef enum: CU_TRSF_NORMALIZED_COORDINATES = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSF_SRGB = 16
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_TRSF_NORMALIZED_COORDINATES = 2
};

/* "cuda/ccuda.pxd":2629
 * cdef enum: CU_TRSF_NORMALIZED_COORDINATES = 2
 * 
 * cdef enum: CU_TRSF_SRGB = 16             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION = 32
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_TRSF_SRGB = 16
};

/* "cuda/ccuda.pxd":2631
 * cdef enum: CU_TRSF_SRGB = 16
 * 
 * cdef enum: CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION = 32             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSF_SEAMLESS_CUBEMAP = 64
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION = 32
};

/* "cuda/ccuda.pxd":2633
 * cdef enum: CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION = 32
 * 
 * cdef enum: CU_TRSF_SEAMLESS_CUBEMAP = 64             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_END = 0
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_TRSF_SEAMLESS_CUBEMAP = 64
};

/* "cuda/ccuda.pxd":2635
 * cdef enum: CU_TRSF_SEAMLESS_CUBEMAP = 64
 * 
 * cdef enum: CU_LAUNCH_PARAM_END = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_LAUNCH_PARAM_END = 0
};

/* "cuda/ccuda.pxd":2637
 * cdef enum: CU_LAUNCH_PARAM_END = 0
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_LAUNCH_PARAM_BUFFER_POINTER = 1
};

/* "cuda/ccuda.pxd":2639
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER = 1
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_PARAM_TR_DEFAULT = -1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_LAUNCH_PARAM_BUFFER_SIZE = 2
};

/* "cuda/ccuda.pxd":2641
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE = 2
 * 
 * cdef enum: CU_PARAM_TR_DEFAULT = -1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_DEVICE_CPU = -1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_PARAM_TR_DEFAULT = -1L
};

/* "cuda/ccuda.pxd":2643
 * cdef enum: CU_PARAM_TR_DEFAULT = -1
 * 
 * cdef enum: CU_DEVICE_CPU = -1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_DEVICE_INVALID = -2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_DEVICE_CPU = -1L
};

/* "cuda/ccuda.pxd":2645
 * cdef enum: CU_DEVICE_CPU = -1
 * 
 * cdef enum: CU_DEVICE_INVALID = -2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: MAX_PLANES = 3
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_DEVICE_INVALID = -2L
};

/* "cuda/ccuda.pxd":2647
 * cdef enum: CU_DEVICE_INVALID = -2
 * 
 * cdef enum: MAX_PLANES = 3             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_EGL_INFINITE_TIMEOUT = 4294967295
 */
enum  {
  __pyx_e_4cuda_5ccuda_MAX_PLANES = 3
};

/* "cuda/ccuda.pxd":2649
 * cdef enum: MAX_PLANES = 3
 * 
 * cdef enum: CUDA_EGL_INFINITE_TIMEOUT = 4294967295             # <<<<<<<<<<<<<<
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_EGL_INFINITE_TIMEOUT = 0xFFFFFFFF
};

/* "cuda/ccuda.pxd":26
 *     cdef struct CUctx_st:
 *         pass
 * ctypedef CUctx_st* CUcontext             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUctx_st *__pyx_t_4cuda_5ccuda_CUcontext;

/* "cuda/ccuda.pxd":31
 *     cdef struct CUmod_st:
 *         pass
 * ctypedef CUmod_st* CUmodule             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUmod_st *__pyx_t_4cuda_5ccuda_CUmodule;

/* "cuda/ccuda.pxd":36
 *     cdef struct CUfunc_st:
 *         pass
 * ctypedef CUfunc_st* CUfunction             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUfunc_st *__pyx_t_4cuda_5ccuda_CUfunction;

/* "cuda/ccuda.pxd":41
 *     cdef struct CUarray_st:
 *         pass
 * ctypedef CUarray_st* CUarray             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUarray_st *__pyx_t_4cuda_5ccuda_CUarray;

/* "cuda/ccuda.pxd":46
 *     cdef struct CUmipmappedArray_st:
 *         pass
 * ctypedef CUmipmappedArray_st* CUmipmappedArray             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUmipmappedArray_st *__pyx_t_4cuda_5ccuda_CUmipmappedArray;

/* "cuda/ccuda.pxd":51
 *     cdef struct CUtexref_st:
 *         pass
 * ctypedef CUtexref_st* CUtexref             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUtexref_st *__pyx_t_4cuda_5ccuda_CUtexref;

/* "cuda/ccuda.pxd":56
 *     cdef struct CUsurfref_st:
 *         pass
 * ctypedef CUsurfref_st* CUsurfref             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUsurfref_st *__pyx_t_4cuda_5ccuda_CUsurfref;

/* "cuda/ccuda.pxd":61
 *     cdef struct CUevent_st:
 *         pass
 * ctypedef CUevent_st* CUevent             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUevent_st *__pyx_t_4cuda_5ccuda_CUevent;

/* "cuda/ccuda.pxd":66
 *     cdef struct CUstream_st:
 *         pass
 * ctypedef CUstream_st* CUstream             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUstream_st *__pyx_t_4cuda_5ccuda_CUstream;

/* "cuda/ccuda.pxd":71
 *     cdef struct CUgraphicsResource_st:
 *         pass
 * ctypedef CUgraphicsResource_st* CUgraphicsResource             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned long long CUtexObject_v1
 */
typedef struct CUgraphicsResource_st *__pyx_t_4cuda_5ccuda_CUgraphicsResource;

/* "cuda/ccuda.pxd":84
 *     cdef struct CUextMemory_st:
 *         pass
 * ctypedef CUextMemory_st* CUexternalMemory             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUextMemory_st *__pyx_t_4cuda_5ccuda_CUexternalMemory;

/* "cuda/ccuda.pxd":89
 *     cdef struct CUextSemaphore_st:
 *         pass
 * ctypedef CUextSemaphore_st* CUexternalSemaphore             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUextSemaphore_st *__pyx_t_4cuda_5ccuda_CUexternalSemaphore;

/* "cuda/ccuda.pxd":94
 *     cdef struct CUgraph_st:
 *         pass
 * ctypedef CUgraph_st* CUgraph             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUgraph_st *__pyx_t_4cuda_5ccuda_CUgraph;

/* "cuda/ccuda.pxd":99
 *     cdef struct CUgraphNode_st:
 *         pass
 * ctypedef CUgraphNode_st* CUgraphNode             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUgraphNode_st *__pyx_t_4cuda_5ccuda_CUgraphNode;

/* "cuda/ccuda.pxd":104
 *     cdef struct CUgraphExec_st:
 *         pass
 * ctypedef CUgraphExec_st* CUgraphExec             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUgraphExec_st *__pyx_t_4cuda_5ccuda_CUgraphExec;

/* "cuda/ccuda.pxd":109
 *     cdef struct CUmemPoolHandle_st:
 *         pass
 * ctypedef CUmemPoolHandle_st* CUmemoryPool             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUmemPoolHandle_st *__pyx_t_4cuda_5ccuda_CUmemoryPool;

/* "cuda/ccuda.pxd":114
 *     cdef struct CUuserObject_st:
 *         pass
 * ctypedef CUuserObject_st* CUuserObject             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUuuid_st:
 */
typedef struct CUuserObject_st *__pyx_t_4cuda_5ccuda_CUuserObject;

/* "cuda/ccuda.pxd":116
 * ctypedef CUuserObject_st* CUuserObject
 * 
 * cdef struct CUuuid_st:             # <<<<<<<<<<<<<<
 *     char bytes[16]
 * 
 */
struct __pyx_t_4cuda_5ccuda_CUuuid_st {
  char bytes[16];
};

/* "cuda/ccuda.pxd":119
 *     char bytes[16]
 * 
 * ctypedef CUuuid_st CUuuid             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUipcEventHandle_st:
 */
typedef struct __pyx_t_4cuda_5ccuda_CUuuid_st __pyx_t_4cuda_5ccuda_CUuuid;

/* "cuda/ccuda.pxd":121
 * ctypedef CUuuid_st CUuuid
 * 
 * cdef struct CUipcEventHandle_st:             # <<<<<<<<<<<<<<
 *     char reserved[64]
 * 
 */
struct __pyx_t_4cuda_5ccuda_CUipcEventHandle_st {
  char reserved[64];
};

/* "cuda/ccuda.pxd":124
 *     char reserved[64]
 * 
 * ctypedef CUipcEventHandle_st CUipcEventHandle_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUipcEventHandle_v1 CUipcEventHandle
 */
typedef struct __pyx_t_4cuda_5ccuda_CUipcEventHandle_st __pyx_t_4cuda_5ccuda_CUipcEventHandle_v1;

/* "cuda/ccuda.pxd":126
 * ctypedef CUipcEventHandle_st CUipcEventHandle_v1
 * 
 * ctypedef CUipcEventHandle_v1 CUipcEventHandle             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUipcMemHandle_st:
 */
typedef __pyx_t_4cuda_5ccuda_CUipcEventHandle_v1 __pyx_t_4cuda_5ccuda_CUipcEventHandle;

/* "cuda/ccuda.pxd":128
 * ctypedef CUipcEventHandle_v1 CUipcEventHandle
 * 
 * cdef struct CUipcMemHandle_st:             # <<<<<<<<<<<<<<
 *     char reserved[64]
 * 
 */
struct __pyx_t_4cuda_5ccuda_CUipcMemHandle_st {
  char reserved[64];
};

/* "cuda/ccuda.pxd":131
 *     char reserved[64]
 * 
 * ctypedef CUipcMemHandle_st CUipcMemHandle_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUipcMemHandle_v1 CUipcMemHandle
 */
typedef struct __pyx_t_4cuda_5ccuda_CUipcMemHandle_st __pyx_t_4cuda_5ccuda_CUipcMemHandle_v1;

/* "cuda/ccuda.pxd":133
 * ctypedef CUipcMemHandle_st CUipcMemHandle_v1
 * 
 * ctypedef CUipcMemHandle_v1 CUipcMemHandle             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUipcMem_flags_enum:
 */
typedef __pyx_t_4cuda_5ccuda_CUipcMemHandle_v1 __pyx_t_4cuda_5ccuda_CUipcMemHandle;

/* "cuda/ccuda.pxd":138
 *     CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS = 1
 * 
 * ctypedef CUipcMem_flags_enum CUipcMem_flags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUmemAttach_flags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUipcMem_flags_enum __pyx_t_4cuda_5ccuda_CUipcMem_flags;

/* "cuda/ccuda.pxd":145
 *     CU_MEM_ATTACH_SINGLE = 4
 * 
 * ctypedef CUmemAttach_flags_enum CUmemAttach_flags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUctx_flags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUmemAttach_flags_enum __pyx_t_4cuda_5ccuda_CUmemAttach_flags;

/* "cuda/ccuda.pxd":158
 *     CU_CTX_FLAGS_MASK = 31
 * 
 * ctypedef CUctx_flags_enum CUctx_flags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUstream_flags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUctx_flags_enum __pyx_t_4cuda_5ccuda_CUctx_flags;

/* "cuda/ccuda.pxd":164
 *     CU_STREAM_NON_BLOCKING = 1
 * 
 * ctypedef CUstream_flags_enum CUstream_flags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUevent_flags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUstream_flags_enum __pyx_t_4cuda_5ccuda_CUstream_flags;

/* "cuda/ccuda.pxd":172
 *     CU_EVENT_INTERPROCESS = 4
 * 
 * ctypedef CUevent_flags_enum CUevent_flags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUevent_record_flags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUevent_flags_enum __pyx_t_4cuda_5ccuda_CUevent_flags;

/* "cuda/ccuda.pxd":178
 *     CU_EVENT_RECORD_EXTERNAL = 1
 * 
 * ctypedef CUevent_record_flags_enum CUevent_record_flags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUevent_wait_flags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUevent_record_flags_enum __pyx_t_4cuda_5ccuda_CUevent_record_flags;

/* "cuda/ccuda.pxd":184
 *     CU_EVENT_WAIT_EXTERNAL = 1
 * 
 * ctypedef CUevent_wait_flags_enum CUevent_wait_flags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUstreamWaitValue_flags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUevent_wait_flags_enum __pyx_t_4cuda_5ccuda_CUevent_wait_flags;

/* "cuda/ccuda.pxd":193
 *     CU_STREAM_WAIT_VALUE_FLUSH = 1073741824
 * 
 * ctypedef CUstreamWaitValue_flags_enum CUstreamWaitValue_flags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUstreamWriteValue_flags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUstreamWaitValue_flags_enum __pyx_t_4cuda_5ccuda_CUstreamWaitValue_flags;

/* "cuda/ccuda.pxd":199
 *     CU_STREAM_WRITE_VALUE_NO_MEMORY_BARRIER = 1
 * 
 * ctypedef CUstreamWriteValue_flags_enum CUstreamWriteValue_flags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUstreamBatchMemOpType_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUstreamWriteValue_flags_enum __pyx_t_4cuda_5ccuda_CUstreamWriteValue_flags;

/* "cuda/ccuda.pxd":208
 *     CU_STREAM_MEM_OP_FLUSH_REMOTE_WRITES = 3
 * 
 * ctypedef CUstreamBatchMemOpType_enum CUstreamBatchMemOpType             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUstreamMemOpWaitValueParams_st:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUstreamBatchMemOpType_enum __pyx_t_4cuda_5ccuda_CUstreamBatchMemOpType;

/* "cuda/ccuda.pxd":210
 * ctypedef CUstreamBatchMemOpType_enum CUstreamBatchMemOpType
 * 
 * cdef struct CUstreamMemOpWaitValueParams_st:             # <<<<<<<<<<<<<<
 *     CUstreamBatchMemOpType operation
 *     CUdeviceptr address
 */
struct __pyx_t_4cuda_5ccuda_CUstreamMemOpWaitValueParams_st {
  __pyx_t_4cuda_5ccuda_CUstreamBatchMemOpType operation;
  __pyx_t_4cuda_5ccuda_CUdeviceptr address;
  __pyx_t_4cuda_5ccuda_cuuint64_t value64;
  unsigned int flags;
  __pyx_t_4cuda_5ccuda_CUdeviceptr alias;
};

/* "cuda/ccuda.pxd":217
 *     CUdeviceptr alias
 * 
 * cdef struct CUstreamMemOpWriteValueParams_st:             # <<<<<<<<<<<<<<
 *     CUstreamBatchMemOpType operation
 *     CUdeviceptr address
 */
struct __pyx_t_4cuda_5ccuda_CUstreamMemOpWriteValueParams_st {
  __pyx_t_4cuda_5ccuda_CUstreamBatchMemOpType operation;
  __pyx_t_4cuda_5ccuda_CUdeviceptr address;
  __pyx_t_4cuda_5ccuda_cuuint64_t value64;
  unsigned int flags;
  __pyx_t_4cuda_5ccuda_CUdeviceptr alias;
};

/* "cuda/ccuda.pxd":224
 *     CUdeviceptr alias
 * 
 * cdef struct CUstreamMemOpFlushRemoteWritesParams_st:             # <<<<<<<<<<<<<<
 *     CUstreamBatchMemOpType operation
 *     unsigned int flags
 */
struct __pyx_t_4cuda_5ccuda_CUstreamMemOpFlushRemoteWritesParams_st {
  __pyx_t_4cuda_5ccuda_CUstreamBatchMemOpType operation;
  unsigned int flags;
};

/* "cuda/ccuda.pxd":228
 *     unsigned int flags
 * 
 * cdef union CUstreamBatchMemOpParams_union:             # <<<<<<<<<<<<<<
 *     CUstreamBatchMemOpType operation
 *     CUstreamMemOpWaitValueParams_st waitValue
 */
union __pyx_t_4cuda_5ccuda_CUstreamBatchMemOpParams_union {
  __pyx_t_4cuda_5ccuda_CUstreamBatchMemOpType operation;
  struct __pyx_t_4cuda_5ccuda_CUstreamMemOpWaitValueParams_st waitValue;
  struct __pyx_t_4cuda_5ccuda_CUstreamMemOpWriteValueParams_st writeValue;
  struct __pyx_t_4cuda_5ccuda_CUstreamMemOpFlushRemoteWritesParams_st flushRemoteWrites;
  __pyx_t_4cuda_5ccuda_cuuint64_t pad[6];
};

/* "cuda/ccuda.pxd":235
 *     cuuint64_t pad[6]
 * 
 * ctypedef CUstreamBatchMemOpParams_union CUstreamBatchMemOpParams_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUstreamBatchMemOpParams_v1 CUstreamBatchMemOpParams
 */
typedef union __pyx_t_4cuda_5ccuda_CUstreamBatchMemOpParams_union __pyx_t_4cuda_5ccuda_CUstreamBatchMemOpParams_v1;

/* "cuda/ccuda.pxd":237
 * ctypedef CUstreamBatchMemOpParams_union CUstreamBatchMemOpParams_v1
 * 
 * ctypedef CUstreamBatchMemOpParams_v1 CUstreamBatchMemOpParams             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUoccupancy_flags_enum:
 */
typedef __pyx_t_4cuda_5ccuda_CUstreamBatchMemOpParams_v1 __pyx_t_4cuda_5ccuda_CUstreamBatchMemOpParams;

/* "cuda/ccuda.pxd":243
 *     CU_OCCUPANCY_DISABLE_CACHING_OVERRIDE = 1
 * 
 * ctypedef CUoccupancy_flags_enum CUoccupancy_flags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUstreamUpdateCaptureDependencies_flags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUoccupancy_flags_enum __pyx_t_4cuda_5ccuda_CUoccupancy_flags;

/* "cuda/ccuda.pxd":249
 *     CU_STREAM_SET_CAPTURE_DEPENDENCIES = 1
 * 
 * ctypedef CUstreamUpdateCaptureDependencies_flags_enum CUstreamUpdateCaptureDependencies_flags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUarray_format_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUstreamUpdateCaptureDependencies_flags_enum __pyx_t_4cuda_5ccuda_CUstreamUpdateCaptureDependencies_flags;

/* "cuda/ccuda.pxd":288
 *     CU_AD_FORMAT_BC7_UNORM_SRGB = 158
 * 
 * ctypedef CUarray_format_enum CUarray_format             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUaddress_mode_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUarray_format_enum __pyx_t_4cuda_5ccuda_CUarray_format;

/* "cuda/ccuda.pxd":296
 *     CU_TR_ADDRESS_MODE_BORDER = 3
 * 
 * ctypedef CUaddress_mode_enum CUaddress_mode             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUfilter_mode_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUaddress_mode_enum __pyx_t_4cuda_5ccuda_CUaddress_mode;

/* "cuda/ccuda.pxd":302
 *     CU_TR_FILTER_MODE_LINEAR = 1
 * 
 * ctypedef CUfilter_mode_enum CUfilter_mode             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUdevice_attribute_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUfilter_mode_enum __pyx_t_4cuda_5ccuda_CUfilter_mode;

/* "cuda/ccuda.pxd":433
 *     CU_DEVICE_ATTRIBUTE_MAX = 122
 * 
 * ctypedef CUdevice_attribute_enum CUdevice_attribute             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUdevprop_st:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUdevice_attribute_enum __pyx_t_4cuda_5ccuda_CUdevice_attribute;

/* "cuda/ccuda.pxd":435
 * ctypedef CUdevice_attribute_enum CUdevice_attribute
 * 
 * cdef struct CUdevprop_st:             # <<<<<<<<<<<<<<
 *     int maxThreadsPerBlock
 *     int maxThreadsDim[3]
 */
struct __pyx_t_4cuda_5ccuda_CUdevprop_st {
  int maxThreadsPerBlock;
  int maxThreadsDim[3];
  int maxGridSize[3];
  int sharedMemPerBlock;
  int totalConstantMemory;
  int SIMDWidth;
  int memPitch;
  int regsPerBlock;
  int clockRate;
  int textureAlign;
};

/* "cuda/ccuda.pxd":447
 *     int textureAlign
 * 
 * ctypedef CUdevprop_st CUdevprop_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUdevprop_v1 CUdevprop
 */
typedef struct __pyx_t_4cuda_5ccuda_CUdevprop_st __pyx_t_4cuda_5ccuda_CUdevprop_v1;

/* "cuda/ccuda.pxd":449
 * ctypedef CUdevprop_st CUdevprop_v1
 * 
 * ctypedef CUdevprop_v1 CUdevprop             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUpointer_attribute_enum:
 */
typedef __pyx_t_4cuda_5ccuda_CUdevprop_v1 __pyx_t_4cuda_5ccuda_CUdevprop;

/* "cuda/ccuda.pxd":470
 *     CU_POINTER_ATTRIBUTE_MEMPOOL_HANDLE = 17
 * 
 * ctypedef CUpointer_attribute_enum CUpointer_attribute             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUfunction_attribute_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUpointer_attribute_enum __pyx_t_4cuda_5ccuda_CUpointer_attribute;

/* "cuda/ccuda.pxd":485
 *     CU_FUNC_ATTRIBUTE_MAX = 10
 * 
 * ctypedef CUfunction_attribute_enum CUfunction_attribute             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUfunc_cache_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUfunction_attribute_enum __pyx_t_4cuda_5ccuda_CUfunction_attribute;

/* "cuda/ccuda.pxd":493
 *     CU_FUNC_CACHE_PREFER_EQUAL = 3
 * 
 * ctypedef CUfunc_cache_enum CUfunc_cache             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUsharedconfig_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUfunc_cache_enum __pyx_t_4cuda_5ccuda_CUfunc_cache;

/* "cuda/ccuda.pxd":500
 *     CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE = 2
 * 
 * ctypedef CUsharedconfig_enum CUsharedconfig             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUshared_carveout_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUsharedconfig_enum __pyx_t_4cuda_5ccuda_CUsharedconfig;

/* "cuda/ccuda.pxd":507
 *     CU_SHAREDMEM_CARVEOUT_MAX_L1 = 0
 * 
 * ctypedef CUshared_carveout_enum CUshared_carveout             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUmemorytype_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUshared_carveout_enum __pyx_t_4cuda_5ccuda_CUshared_carveout;

/* "cuda/ccuda.pxd":515
 *     CU_MEMORYTYPE_UNIFIED = 4
 * 
 * ctypedef CUmemorytype_enum CUmemorytype             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUcomputemode_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUmemorytype_enum __pyx_t_4cuda_5ccuda_CUmemorytype;

/* "cuda/ccuda.pxd":522
 *     CU_COMPUTEMODE_EXCLUSIVE_PROCESS = 3
 * 
 * ctypedef CUcomputemode_enum CUcomputemode             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUmem_advise_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUcomputemode_enum __pyx_t_4cuda_5ccuda_CUcomputemode;

/* "cuda/ccuda.pxd":532
 *     CU_MEM_ADVISE_UNSET_ACCESSED_BY = 6
 * 
 * ctypedef CUmem_advise_enum CUmem_advise             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUmem_range_attribute_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUmem_advise_enum __pyx_t_4cuda_5ccuda_CUmem_advise;

/* "cuda/ccuda.pxd":540
 *     CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION = 4
 * 
 * ctypedef CUmem_range_attribute_enum CUmem_range_attribute             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUjit_option_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUmem_range_attribute_enum __pyx_t_4cuda_5ccuda_CUmem_range_attribute;

/* "cuda/ccuda.pxd":570
 *     CU_JIT_NUM_OPTIONS = 25
 * 
 * ctypedef CUjit_option_enum CUjit_option             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUjit_target_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUjit_option_enum __pyx_t_4cuda_5ccuda_CUjit_option;

/* "cuda/ccuda.pxd":591
 *     CU_TARGET_COMPUTE_86 = 86
 * 
 * ctypedef CUjit_target_enum CUjit_target             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUjit_fallback_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUjit_target_enum __pyx_t_4cuda_5ccuda_CUjit_target;

/* "cuda/ccuda.pxd":597
 *     CU_PREFER_BINARY = 1
 * 
 * ctypedef CUjit_fallback_enum CUjit_fallback             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUjit_cacheMode_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUjit_fallback_enum __pyx_t_4cuda_5ccuda_CUjit_fallback;

/* "cuda/ccuda.pxd":604
 *     CU_JIT_CACHE_OPTION_CA = 2
 * 
 * ctypedef CUjit_cacheMode_enum CUjit_cacheMode             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUjitInputType_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUjit_cacheMode_enum __pyx_t_4cuda_5ccuda_CUjit_cacheMode;

/* "cuda/ccuda.pxd":615
 *     CU_JIT_NUM_INPUT_TYPES = 6
 * 
 * ctypedef CUjitInputType_enum CUjitInputType             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef enum __pyx_t_4cuda_5ccuda_CUjitInputType_enum __pyx_t_4cuda_5ccuda_CUjitInputType;

/* "cuda/ccuda.pxd":620
 *     cdef struct CUlinkState_st:
 *         pass
 * ctypedef CUlinkState_st* CUlinkState             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUgraphicsRegisterFlags_enum:
 */
typedef struct CUlinkState_st *__pyx_t_4cuda_5ccuda_CUlinkState;

/* "cuda/ccuda.pxd":629
 *     CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER = 8
 * 
 * ctypedef CUgraphicsRegisterFlags_enum CUgraphicsRegisterFlags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUgraphicsMapResourceFlags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUgraphicsRegisterFlags_enum __pyx_t_4cuda_5ccuda_CUgraphicsRegisterFlags;

/* "cuda/ccuda.pxd":636
 *     CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 2
 * 
 * ctypedef CUgraphicsMapResourceFlags_enum CUgraphicsMapResourceFlags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUarray_cubemap_face_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUgraphicsMapResourceFlags_enum __pyx_t_4cuda_5ccuda_CUgraphicsMapResourceFlags;

/* "cuda/ccuda.pxd":646
 *     CU_CUBEMAP_FACE_NEGATIVE_Z = 5
 * 
 * ctypedef CUarray_cubemap_face_enum CUarray_cubemap_face             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUlimit_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUarray_cubemap_face_enum __pyx_t_4cuda_5ccuda_CUarray_cubemap_face;

/* "cuda/ccuda.pxd":658
 *     CU_LIMIT_MAX = 7
 * 
 * ctypedef CUlimit_enum CUlimit             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUresourcetype_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUlimit_enum __pyx_t_4cuda_5ccuda_CUlimit;

/* "cuda/ccuda.pxd":666
 *     CU_RESOURCE_TYPE_PITCH2D = 3
 * 
 * ctypedef CUresourcetype_enum CUresourcetype             # <<<<<<<<<<<<<<
 * 
 * ctypedef void (*CUhostFn)(void* userData)
 */
typedef enum __pyx_t_4cuda_5ccuda_CUresourcetype_enum __pyx_t_4cuda_5ccuda_CUresourcetype;

/* "cuda/ccuda.pxd":668
 * ctypedef CUresourcetype_enum CUresourcetype
 * 
 * ctypedef void (*CUhostFn)(void* userData)             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUaccessProperty_enum:
 */
typedef void (*__pyx_t_4cuda_5ccuda_CUhostFn)(void *);

/* "cuda/ccuda.pxd":675
 *     CU_ACCESS_PROPERTY_PERSISTING = 2
 * 
 * ctypedef CUaccessProperty_enum CUaccessProperty             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUaccessPolicyWindow_st:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUaccessProperty_enum __pyx_t_4cuda_5ccuda_CUaccessProperty;

/* "cuda/ccuda.pxd":677
 * ctypedef CUaccessProperty_enum CUaccessProperty
 * 
 * cdef struct CUaccessPolicyWindow_st:             # <<<<<<<<<<<<<<
 *     void* base_ptr
 *     size_t num_bytes
 */
struct __pyx_t_4cuda_5ccuda_CUaccessPolicyWindow_st {
  void *base_ptr;
  size_t num_bytes;
  float hitRatio;
  __pyx_t_4cuda_5ccuda_CUaccessProperty hitProp;
  __pyx_t_4cuda_5ccuda_CUaccessProperty missProp;
};

/* "cuda/ccuda.pxd":684
 *     CUaccessProperty missProp
 * 
 * ctypedef CUaccessPolicyWindow_st CUaccessPolicyWindow_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUaccessPolicyWindow_v1 CUaccessPolicyWindow
 */
typedef struct __pyx_t_4cuda_5ccuda_CUaccessPolicyWindow_st __pyx_t_4cuda_5ccuda_CUaccessPolicyWindow_v1;

/* "cuda/ccuda.pxd":686
 * ctypedef CUaccessPolicyWindow_st CUaccessPolicyWindow_v1
 * 
 * ctypedef CUaccessPolicyWindow_v1 CUaccessPolicyWindow             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUDA_KERNEL_NODE_PARAMS_st:
 */
typedef __pyx_t_4cuda_5ccuda_CUaccessPolicyWindow_v1 __pyx_t_4cuda_5ccuda_CUaccessPolicyWindow;

/* "cuda/ccuda.pxd":688
 * ctypedef CUaccessPolicyWindow_v1 CUaccessPolicyWindow
 * 
 * cdef struct CUDA_KERNEL_NODE_PARAMS_st:             # <<<<<<<<<<<<<<
 *     CUfunction func
 *     unsigned int gridDimX
 */
struct __pyx_t_4cuda_5ccuda_CUDA_KERNEL_NODE_PARAMS_st {
  __pyx_t_4cuda_5ccuda_CUfunction func;
  unsigned int gridDimX;
  unsigned int gridDimY;
  unsigned int gridDimZ;
  unsigned int blockDimX;
  unsigned int blockDimY;
  unsigned int blockDimZ;
  unsigned int sharedMemBytes;
  void **kernelParams;
  void **extra;
};

/* "cuda/ccuda.pxd":700
 *     void** extra
 * 
 * ctypedef CUDA_KERNEL_NODE_PARAMS_st CUDA_KERNEL_NODE_PARAMS_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_KERNEL_NODE_PARAMS_v1 CUDA_KERNEL_NODE_PARAMS
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_KERNEL_NODE_PARAMS_st __pyx_t_4cuda_5ccuda_CUDA_KERNEL_NODE_PARAMS_v1;

/* "cuda/ccuda.pxd":702
 * ctypedef CUDA_KERNEL_NODE_PARAMS_st CUDA_KERNEL_NODE_PARAMS_v1
 * 
 * ctypedef CUDA_KERNEL_NODE_PARAMS_v1 CUDA_KERNEL_NODE_PARAMS             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUDA_MEMSET_NODE_PARAMS_st:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_KERNEL_NODE_PARAMS_v1 __pyx_t_4cuda_5ccuda_CUDA_KERNEL_NODE_PARAMS;

/* "cuda/ccuda.pxd":704
 * ctypedef CUDA_KERNEL_NODE_PARAMS_v1 CUDA_KERNEL_NODE_PARAMS
 * 
 * cdef struct CUDA_MEMSET_NODE_PARAMS_st:             # <<<<<<<<<<<<<<
 *     CUdeviceptr dst
 *     size_t pitch
 */
struct __pyx_t_4cuda_5ccuda_CUDA_MEMSET_NODE_PARAMS_st {
  __pyx_t_4cuda_5ccuda_CUdeviceptr dst;
  size_t pitch;
  unsigned int value;
  unsigned int elementSize;
  size_t width;
  size_t height;
};

/* "cuda/ccuda.pxd":712
 *     size_t height
 * 
 * ctypedef CUDA_MEMSET_NODE_PARAMS_st CUDA_MEMSET_NODE_PARAMS_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_MEMSET_NODE_PARAMS_v1 CUDA_MEMSET_NODE_PARAMS
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_MEMSET_NODE_PARAMS_st __pyx_t_4cuda_5ccuda_CUDA_MEMSET_NODE_PARAMS_v1;

/* "cuda/ccuda.pxd":714
 * ctypedef CUDA_MEMSET_NODE_PARAMS_st CUDA_MEMSET_NODE_PARAMS_v1
 * 
 * ctypedef CUDA_MEMSET_NODE_PARAMS_v1 CUDA_MEMSET_NODE_PARAMS             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUDA_HOST_NODE_PARAMS_st:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_MEMSET_NODE_PARAMS_v1 __pyx_t_4cuda_5ccuda_CUDA_MEMSET_NODE_PARAMS;

/* "cuda/ccuda.pxd":716
 * ctypedef CUDA_MEMSET_NODE_PARAMS_v1 CUDA_MEMSET_NODE_PARAMS
 * 
 * cdef struct CUDA_HOST_NODE_PARAMS_st:             # <<<<<<<<<<<<<<
 *     CUhostFn fn
 *     void* userData
 */
struct __pyx_t_4cuda_5ccuda_CUDA_HOST_NODE_PARAMS_st {
  __pyx_t_4cuda_5ccuda_CUhostFn fn;
  void *userData;
};

/* "cuda/ccuda.pxd":720
 *     void* userData
 * 
 * ctypedef CUDA_HOST_NODE_PARAMS_st CUDA_HOST_NODE_PARAMS_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_HOST_NODE_PARAMS_v1 CUDA_HOST_NODE_PARAMS
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_HOST_NODE_PARAMS_st __pyx_t_4cuda_5ccuda_CUDA_HOST_NODE_PARAMS_v1;

/* "cuda/ccuda.pxd":722
 * ctypedef CUDA_HOST_NODE_PARAMS_st CUDA_HOST_NODE_PARAMS_v1
 * 
 * ctypedef CUDA_HOST_NODE_PARAMS_v1 CUDA_HOST_NODE_PARAMS             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUgraphNodeType_enum:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_HOST_NODE_PARAMS_v1 __pyx_t_4cuda_5ccuda_CUDA_HOST_NODE_PARAMS;

/* "cuda/ccuda.pxd":738
 *     CU_GRAPH_NODE_TYPE_MEM_FREE = 11
 * 
 * ctypedef CUgraphNodeType_enum CUgraphNodeType             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUsynchronizationPolicy_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUgraphNodeType_enum __pyx_t_4cuda_5ccuda_CUgraphNodeType;

/* "cuda/ccuda.pxd":746
 *     CU_SYNC_POLICY_BLOCKING_SYNC = 4
 * 
 * ctypedef CUsynchronizationPolicy_enum CUsynchronizationPolicy             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUkernelNodeAttrID_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUsynchronizationPolicy_enum __pyx_t_4cuda_5ccuda_CUsynchronizationPolicy;

/* "cuda/ccuda.pxd":752
 *     CU_KERNEL_NODE_ATTRIBUTE_COOPERATIVE = 2
 * 
 * ctypedef CUkernelNodeAttrID_enum CUkernelNodeAttrID             # <<<<<<<<<<<<<<
 * 
 * cdef union CUkernelNodeAttrValue_union:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUkernelNodeAttrID_enum __pyx_t_4cuda_5ccuda_CUkernelNodeAttrID;

/* "cuda/ccuda.pxd":754
 * ctypedef CUkernelNodeAttrID_enum CUkernelNodeAttrID
 * 
 * cdef union CUkernelNodeAttrValue_union:             # <<<<<<<<<<<<<<
 *     CUaccessPolicyWindow accessPolicyWindow
 *     int cooperative
 */
union __pyx_t_4cuda_5ccuda_CUkernelNodeAttrValue_union {
  __pyx_t_4cuda_5ccuda_CUaccessPolicyWindow accessPolicyWindow;
  int cooperative;
};

/* "cuda/ccuda.pxd":758
 *     int cooperative
 * 
 * ctypedef CUkernelNodeAttrValue_union CUkernelNodeAttrValue_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUkernelNodeAttrValue_v1 CUkernelNodeAttrValue
 */
typedef union __pyx_t_4cuda_5ccuda_CUkernelNodeAttrValue_union __pyx_t_4cuda_5ccuda_CUkernelNodeAttrValue_v1;

/* "cuda/ccuda.pxd":760
 * ctypedef CUkernelNodeAttrValue_union CUkernelNodeAttrValue_v1
 * 
 * ctypedef CUkernelNodeAttrValue_v1 CUkernelNodeAttrValue             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUstreamCaptureStatus_enum:
 */
typedef __pyx_t_4cuda_5ccuda_CUkernelNodeAttrValue_v1 __pyx_t_4cuda_5ccuda_CUkernelNodeAttrValue;

/* "cuda/ccuda.pxd":767
 *     CU_STREAM_CAPTURE_STATUS_INVALIDATED = 2
 * 
 * ctypedef CUstreamCaptureStatus_enum CUstreamCaptureStatus             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUstreamCaptureMode_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUstreamCaptureStatus_enum __pyx_t_4cuda_5ccuda_CUstreamCaptureStatus;

/* "cuda/ccuda.pxd":774
 *     CU_STREAM_CAPTURE_MODE_RELAXED = 2
 * 
 * ctypedef CUstreamCaptureMode_enum CUstreamCaptureMode             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUstreamAttrID_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUstreamCaptureMode_enum __pyx_t_4cuda_5ccuda_CUstreamCaptureMode;

/* "cuda/ccuda.pxd":780
 *     CU_STREAM_ATTRIBUTE_SYNCHRONIZATION_POLICY = 3
 * 
 * ctypedef CUstreamAttrID_enum CUstreamAttrID             # <<<<<<<<<<<<<<
 * 
 * cdef union CUstreamAttrValue_union:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUstreamAttrID_enum __pyx_t_4cuda_5ccuda_CUstreamAttrID;

/* "cuda/ccuda.pxd":782
 * ctypedef CUstreamAttrID_enum CUstreamAttrID
 * 
 * cdef union CUstreamAttrValue_union:             # <<<<<<<<<<<<<<
 *     CUaccessPolicyWindow accessPolicyWindow
 *     CUsynchronizationPolicy syncPolicy
 */
union __pyx_t_4cuda_5ccuda_CUstreamAttrValue_union {
  __pyx_t_4cuda_5ccuda_CUaccessPolicyWindow accessPolicyWindow;
  __pyx_t_4cuda_5ccuda_CUsynchronizationPolicy syncPolicy;
};

/* "cuda/ccuda.pxd":786
 *     CUsynchronizationPolicy syncPolicy
 * 
 * ctypedef CUstreamAttrValue_union CUstreamAttrValue_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUstreamAttrValue_v1 CUstreamAttrValue
 */
typedef union __pyx_t_4cuda_5ccuda_CUstreamAttrValue_union __pyx_t_4cuda_5ccuda_CUstreamAttrValue_v1;

/* "cuda/ccuda.pxd":788
 * ctypedef CUstreamAttrValue_union CUstreamAttrValue_v1
 * 
 * ctypedef CUstreamAttrValue_v1 CUstreamAttrValue             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUdriverProcAddress_flags_enum:
 */
typedef __pyx_t_4cuda_5ccuda_CUstreamAttrValue_v1 __pyx_t_4cuda_5ccuda_CUstreamAttrValue;

/* "cuda/ccuda.pxd":795
 *     CU_GET_PROC_ADDRESS_PER_THREAD_DEFAULT_STREAM = 2
 * 
 * ctypedef CUdriverProcAddress_flags_enum CUdriverProcAddress_flags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUexecAffinityType_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUdriverProcAddress_flags_enum __pyx_t_4cuda_5ccuda_CUdriverProcAddress_flags;

/* "cuda/ccuda.pxd":801
 *     CU_EXEC_AFFINITY_TYPE_MAX = 1
 * 
 * ctypedef CUexecAffinityType_enum CUexecAffinityType             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUexecAffinitySmCount_st:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUexecAffinityType_enum __pyx_t_4cuda_5ccuda_CUexecAffinityType;

/* "cuda/ccuda.pxd":803
 * ctypedef CUexecAffinityType_enum CUexecAffinityType
 * 
 * cdef struct CUexecAffinitySmCount_st:             # <<<<<<<<<<<<<<
 *     unsigned int val
 * 
 */
struct __pyx_t_4cuda_5ccuda_CUexecAffinitySmCount_st {
  unsigned int val;
};

/* "cuda/ccuda.pxd":806
 *     unsigned int val
 * 
 * ctypedef CUexecAffinitySmCount_st CUexecAffinitySmCount_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUexecAffinitySmCount_v1 CUexecAffinitySmCount
 */
typedef struct __pyx_t_4cuda_5ccuda_CUexecAffinitySmCount_st __pyx_t_4cuda_5ccuda_CUexecAffinitySmCount_v1;

/* "cuda/ccuda.pxd":808
 * ctypedef CUexecAffinitySmCount_st CUexecAffinitySmCount_v1
 * 
 * ctypedef CUexecAffinitySmCount_v1 CUexecAffinitySmCount             # <<<<<<<<<<<<<<
 * 
 * cdef union _CUexecAffinityParam_v1_CUexecAffinityParam_v1_CUexecAffinityParam_st_param_u:
 */
typedef __pyx_t_4cuda_5ccuda_CUexecAffinitySmCount_v1 __pyx_t_4cuda_5ccuda_CUexecAffinitySmCount;

/* "cuda/ccuda.pxd":810
 * ctypedef CUexecAffinitySmCount_v1 CUexecAffinitySmCount
 * 
 * cdef union _CUexecAffinityParam_v1_CUexecAffinityParam_v1_CUexecAffinityParam_st_param_u:             # <<<<<<<<<<<<<<
 *     CUexecAffinitySmCount smCount
 * 
 */
union __pyx_t_4cuda_5ccuda__CUexecAffinityParam_v1_CUexecAffinityParam_v1_CUexecAffinityParam_st_param_u {
  __pyx_t_4cuda_5ccuda_CUexecAffinitySmCount smCount;
};

/* "cuda/ccuda.pxd":813
 *     CUexecAffinitySmCount smCount
 * 
 * cdef struct CUexecAffinityParam_st:             # <<<<<<<<<<<<<<
 *     CUexecAffinityType type
 *     _CUexecAffinityParam_v1_CUexecAffinityParam_v1_CUexecAffinityParam_st_param_u param
 */
struct __pyx_t_4cuda_5ccuda_CUexecAffinityParam_st {
  __pyx_t_4cuda_5ccuda_CUexecAffinityType type;
  union __pyx_t_4cuda_5ccuda__CUexecAffinityParam_v1_CUexecAffinityParam_v1_CUexecAffinityParam_st_param_u param;
};

/* "cuda/ccuda.pxd":817
 *     _CUexecAffinityParam_v1_CUexecAffinityParam_v1_CUexecAffinityParam_st_param_u param
 * 
 * ctypedef CUexecAffinityParam_st CUexecAffinityParam_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUexecAffinityParam_v1 CUexecAffinityParam
 */
typedef struct __pyx_t_4cuda_5ccuda_CUexecAffinityParam_st __pyx_t_4cuda_5ccuda_CUexecAffinityParam_v1;

/* "cuda/ccuda.pxd":819
 * ctypedef CUexecAffinityParam_st CUexecAffinityParam_v1
 * 
 * ctypedef CUexecAffinityParam_v1 CUexecAffinityParam             # <<<<<<<<<<<<<<
 * 
 * cdef enum cudaError_enum:
 */
typedef __pyx_t_4cuda_5ccuda_CUexecAffinityParam_v1 __pyx_t_4cuda_5ccuda_CUexecAffinityParam;

/* "cuda/ccuda.pxd":910
 *     CUDA_ERROR_UNKNOWN = 999
 * 
 * ctypedef cudaError_enum CUresult             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUdevice_P2PAttribute_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_cudaError_enum __pyx_t_4cuda_5ccuda_CUresult;

/* "cuda/ccuda.pxd":919
 *     CU_DEVICE_P2P_ATTRIBUTE_CUDA_ARRAY_ACCESS_SUPPORTED = 4
 * 
 * ctypedef CUdevice_P2PAttribute_enum CUdevice_P2PAttribute             # <<<<<<<<<<<<<<
 * 
 * ctypedef void (*CUstreamCallback)(CUstream hStream, CUresult status, void* userData)
 */
typedef enum __pyx_t_4cuda_5ccuda_CUdevice_P2PAttribute_enum __pyx_t_4cuda_5ccuda_CUdevice_P2PAttribute;

/* "cuda/ccuda.pxd":921
 * ctypedef CUdevice_P2PAttribute_enum CUdevice_P2PAttribute
 * 
 * ctypedef void (*CUstreamCallback)(CUstream hStream, CUresult status, void* userData)             # <<<<<<<<<<<<<<
 * 
 * ctypedef size_t (*CUoccupancyB2DSize)(int blockSize)
 */
typedef void (*__pyx_t_4cuda_5ccuda_CUstreamCallback)(__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUresult, void *);

/* "cuda/ccuda.pxd":923
 * ctypedef void (*CUstreamCallback)(CUstream hStream, CUresult status, void* userData)
 * 
 * ctypedef size_t (*CUoccupancyB2DSize)(int blockSize)             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUDA_MEMCPY2D_st:
 */
typedef size_t (*__pyx_t_4cuda_5ccuda_CUoccupancyB2DSize)(int);

/* "cuda/ccuda.pxd":925
 * ctypedef size_t (*CUoccupancyB2DSize)(int blockSize)
 * 
 * cdef struct CUDA_MEMCPY2D_st:             # <<<<<<<<<<<<<<
 *     size_t srcXInBytes
 *     size_t srcY
 */
struct __pyx_t_4cuda_5ccuda_CUDA_MEMCPY2D_st {
  size_t srcXInBytes;
  size_t srcY;
  __pyx_t_4cuda_5ccuda_CUmemorytype srcMemoryType;
  void const *srcHost;
  __pyx_t_4cuda_5ccuda_CUdeviceptr srcDevice;
  __pyx_t_4cuda_5ccuda_CUarray srcArray;
  size_t srcPitch;
  size_t dstXInBytes;
  size_t dstY;
  __pyx_t_4cuda_5ccuda_CUmemorytype dstMemoryType;
  void *dstHost;
  __pyx_t_4cuda_5ccuda_CUdeviceptr dstDevice;
  __pyx_t_4cuda_5ccuda_CUarray dstArray;
  size_t dstPitch;
  size_t WidthInBytes;
  size_t Height;
};

/* "cuda/ccuda.pxd":943
 *     size_t Height
 * 
 * ctypedef CUDA_MEMCPY2D_st CUDA_MEMCPY2D_v2             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_MEMCPY2D_v2 CUDA_MEMCPY2D
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_MEMCPY2D_st __pyx_t_4cuda_5ccuda_CUDA_MEMCPY2D_v2;

/* "cuda/ccuda.pxd":945
 * ctypedef CUDA_MEMCPY2D_st CUDA_MEMCPY2D_v2
 * 
 * ctypedef CUDA_MEMCPY2D_v2 CUDA_MEMCPY2D             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUDA_MEMCPY3D_st:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_MEMCPY2D_v2 __pyx_t_4cuda_5ccuda_CUDA_MEMCPY2D;

/* "cuda/ccuda.pxd":947
 * ctypedef CUDA_MEMCPY2D_v2 CUDA_MEMCPY2D
 * 
 * cdef struct CUDA_MEMCPY3D_st:             # <<<<<<<<<<<<<<
 *     size_t srcXInBytes
 *     size_t srcY
 */
struct __pyx_t_4cuda_5ccuda_CUDA_MEMCPY3D_st {
  size_t srcXInBytes;
  size_t srcY;
  size_t srcZ;
  size_t srcLOD;
  __pyx_t_4cuda_5ccuda_CUmemorytype srcMemoryType;
  void const *srcHost;
  __pyx_t_4cuda_5ccuda_CUdeviceptr srcDevice;
  __pyx_t_4cuda_5ccuda_CUarray srcArray;
  void *reserved0;
  size_t srcPitch;
  size_t srcHeight;
  size_t dstXInBytes;
  size_t dstY;
  size_t dstZ;
  size_t dstLOD;
  __pyx_t_4cuda_5ccuda_CUmemorytype dstMemoryType;
  void *dstHost;
  __pyx_t_4cuda_5ccuda_CUdeviceptr dstDevice;
  __pyx_t_4cuda_5ccuda_CUarray dstArray;
  void *reserved1;
  size_t dstPitch;
  size_t dstHeight;
  size_t WidthInBytes;
  size_t Height;
  size_t Depth;
};

/* "cuda/ccuda.pxd":974
 *     size_t Depth
 * 
 * ctypedef CUDA_MEMCPY3D_st CUDA_MEMCPY3D_v2             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_MEMCPY3D_v2 CUDA_MEMCPY3D
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_MEMCPY3D_st __pyx_t_4cuda_5ccuda_CUDA_MEMCPY3D_v2;

/* "cuda/ccuda.pxd":976
 * ctypedef CUDA_MEMCPY3D_st CUDA_MEMCPY3D_v2
 * 
 * ctypedef CUDA_MEMCPY3D_v2 CUDA_MEMCPY3D             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUDA_MEMCPY3D_PEER_st:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_MEMCPY3D_v2 __pyx_t_4cuda_5ccuda_CUDA_MEMCPY3D;

/* "cuda/ccuda.pxd":978
 * ctypedef CUDA_MEMCPY3D_v2 CUDA_MEMCPY3D
 * 
 * cdef struct CUDA_MEMCPY3D_PEER_st:             # <<<<<<<<<<<<<<
 *     size_t srcXInBytes
 *     size_t srcY
 */
struct __pyx_t_4cuda_5ccuda_CUDA_MEMCPY3D_PEER_st {
  size_t srcXInBytes;
  size_t srcY;
  size_t srcZ;
  size_t srcLOD;
  __pyx_t_4cuda_5ccuda_CUmemorytype srcMemoryType;
  void const *srcHost;
  __pyx_t_4cuda_5ccuda_CUdeviceptr srcDevice;
  __pyx_t_4cuda_5ccuda_CUarray srcArray;
  __pyx_t_4cuda_5ccuda_CUcontext srcContext;
  size_t srcPitch;
  size_t srcHeight;
  size_t dstXInBytes;
  size_t dstY;
  size_t dstZ;
  size_t dstLOD;
  __pyx_t_4cuda_5ccuda_CUmemorytype dstMemoryType;
  void *dstHost;
  __pyx_t_4cuda_5ccuda_CUdeviceptr dstDevice;
  __pyx_t_4cuda_5ccuda_CUarray dstArray;
  __pyx_t_4cuda_5ccuda_CUcontext dstContext;
  size_t dstPitch;
  size_t dstHeight;
  size_t WidthInBytes;
  size_t Height;
  size_t Depth;
};

/* "cuda/ccuda.pxd":1005
 *     size_t Depth
 * 
 * ctypedef CUDA_MEMCPY3D_PEER_st CUDA_MEMCPY3D_PEER_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_MEMCPY3D_PEER_v1 CUDA_MEMCPY3D_PEER
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_MEMCPY3D_PEER_st __pyx_t_4cuda_5ccuda_CUDA_MEMCPY3D_PEER_v1;

/* "cuda/ccuda.pxd":1007
 * ctypedef CUDA_MEMCPY3D_PEER_st CUDA_MEMCPY3D_PEER_v1
 * 
 * ctypedef CUDA_MEMCPY3D_PEER_v1 CUDA_MEMCPY3D_PEER             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUDA_ARRAY_DESCRIPTOR_st:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_MEMCPY3D_PEER_v1 __pyx_t_4cuda_5ccuda_CUDA_MEMCPY3D_PEER;

/* "cuda/ccuda.pxd":1009
 * ctypedef CUDA_MEMCPY3D_PEER_v1 CUDA_MEMCPY3D_PEER
 * 
 * cdef struct CUDA_ARRAY_DESCRIPTOR_st:             # <<<<<<<<<<<<<<
 *     size_t Width
 *     size_t Height
 */
struct __pyx_t_4cuda_5ccuda_CUDA_ARRAY_DESCRIPTOR_st {
  size_t Width;
  size_t Height;
  __pyx_t_4cuda_5ccuda_CUarray_format Format;
  unsigned int NumChannels;
};

/* "cuda/ccuda.pxd":1015
 *     unsigned int NumChannels
 * 
 * ctypedef CUDA_ARRAY_DESCRIPTOR_st CUDA_ARRAY_DESCRIPTOR_v2             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_ARRAY_DESCRIPTOR_v2 CUDA_ARRAY_DESCRIPTOR
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_ARRAY_DESCRIPTOR_st __pyx_t_4cuda_5ccuda_CUDA_ARRAY_DESCRIPTOR_v2;

/* "cuda/ccuda.pxd":1017
 * ctypedef CUDA_ARRAY_DESCRIPTOR_st CUDA_ARRAY_DESCRIPTOR_v2
 * 
 * ctypedef CUDA_ARRAY_DESCRIPTOR_v2 CUDA_ARRAY_DESCRIPTOR             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUDA_ARRAY3D_DESCRIPTOR_st:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_ARRAY_DESCRIPTOR_v2 __pyx_t_4cuda_5ccuda_CUDA_ARRAY_DESCRIPTOR;

/* "cuda/ccuda.pxd":1019
 * ctypedef CUDA_ARRAY_DESCRIPTOR_v2 CUDA_ARRAY_DESCRIPTOR
 * 
 * cdef struct CUDA_ARRAY3D_DESCRIPTOR_st:             # <<<<<<<<<<<<<<
 *     size_t Width
 *     size_t Height
 */
struct __pyx_t_4cuda_5ccuda_CUDA_ARRAY3D_DESCRIPTOR_st {
  size_t Width;
  size_t Height;
  size_t Depth;
  __pyx_t_4cuda_5ccuda_CUarray_format Format;
  unsigned int NumChannels;
  unsigned int Flags;
};

/* "cuda/ccuda.pxd":1027
 *     unsigned int Flags
 * 
 * ctypedef CUDA_ARRAY3D_DESCRIPTOR_st CUDA_ARRAY3D_DESCRIPTOR_v2             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_ARRAY3D_DESCRIPTOR_v2 CUDA_ARRAY3D_DESCRIPTOR
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_ARRAY3D_DESCRIPTOR_st __pyx_t_4cuda_5ccuda_CUDA_ARRAY3D_DESCRIPTOR_v2;

/* "cuda/ccuda.pxd":1029
 * ctypedef CUDA_ARRAY3D_DESCRIPTOR_st CUDA_ARRAY3D_DESCRIPTOR_v2
 * 
 * ctypedef CUDA_ARRAY3D_DESCRIPTOR_v2 CUDA_ARRAY3D_DESCRIPTOR             # <<<<<<<<<<<<<<
 * 
 * cdef struct _CUDA_ARRAY_SPARSE_PROPERTIES_v1_CUDA_ARRAY_SPARSE_PROPERTIES_v1_CUDA_ARRAY_SPARSE_PROPERTIES_st_tileExtent_s:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_ARRAY3D_DESCRIPTOR_v2 __pyx_t_4cuda_5ccuda_CUDA_ARRAY3D_DESCRIPTOR;

/* "cuda/ccuda.pxd":1031
 * ctypedef CUDA_ARRAY3D_DESCRIPTOR_v2 CUDA_ARRAY3D_DESCRIPTOR
 * 
 * cdef struct _CUDA_ARRAY_SPARSE_PROPERTIES_v1_CUDA_ARRAY_SPARSE_PROPERTIES_v1_CUDA_ARRAY_SPARSE_PROPERTIES_st_tileExtent_s:             # <<<<<<<<<<<<<<
 *     unsigned int width
 *     unsigned int height
 */
struct __pyx_t_4cuda_5ccuda__CUDA_ARRAY_SPARSE_PROPERTIES_v1_CUDA_ARRAY_SPARSE_PROPERTIES_v1_CUDA_ARRAY_SPARSE_PROPERTIES_st_tileExtent_s {
  unsigned int width;
  unsigned int height;
  unsigned int depth;
};

/* "cuda/ccuda.pxd":1036
 *     unsigned int depth
 * 
 * cdef struct CUDA_ARRAY_SPARSE_PROPERTIES_st:             # <<<<<<<<<<<<<<
 *     _CUDA_ARRAY_SPARSE_PROPERTIES_v1_CUDA_ARRAY_SPARSE_PROPERTIES_v1_CUDA_ARRAY_SPARSE_PROPERTIES_st_tileExtent_s tileExtent
 *     unsigned int miptailFirstLevel
 */
struct __pyx_t_4cuda_5ccuda_CUDA_ARRAY_SPARSE_PROPERTIES_st {
  struct __pyx_t_4cuda_5ccuda__CUDA_ARRAY_SPARSE_PROPERTIES_v1_CUDA_ARRAY_SPARSE_PROPERTIES_v1_CUDA_ARRAY_SPARSE_PROPERTIES_st_tileExtent_s tileExtent;
  unsigned int miptailFirstLevel;
  unsigned PY_LONG_LONG miptailSize;
  unsigned int flags;
  unsigned int reserved[4];
};

/* "cuda/ccuda.pxd":1043
 *     unsigned int reserved[4]
 * 
 * ctypedef CUDA_ARRAY_SPARSE_PROPERTIES_st CUDA_ARRAY_SPARSE_PROPERTIES_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_ARRAY_SPARSE_PROPERTIES_v1 CUDA_ARRAY_SPARSE_PROPERTIES
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_ARRAY_SPARSE_PROPERTIES_st __pyx_t_4cuda_5ccuda_CUDA_ARRAY_SPARSE_PROPERTIES_v1;

/* "cuda/ccuda.pxd":1045
 * ctypedef CUDA_ARRAY_SPARSE_PROPERTIES_st CUDA_ARRAY_SPARSE_PROPERTIES_v1
 * 
 * ctypedef CUDA_ARRAY_SPARSE_PROPERTIES_v1 CUDA_ARRAY_SPARSE_PROPERTIES             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUDA_ARRAY_MEMORY_REQUIREMENTS_st:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_ARRAY_SPARSE_PROPERTIES_v1 __pyx_t_4cuda_5ccuda_CUDA_ARRAY_SPARSE_PROPERTIES;

/* "cuda/ccuda.pxd":1047
 * ctypedef CUDA_ARRAY_SPARSE_PROPERTIES_v1 CUDA_ARRAY_SPARSE_PROPERTIES
 * 
 * cdef struct CUDA_ARRAY_MEMORY_REQUIREMENTS_st:             # <<<<<<<<<<<<<<
 *     size_t size
 *     size_t alignment
 */
struct __pyx_t_4cuda_5ccuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_st {
  size_t size;
  size_t alignment;
  unsigned int reserved[4];
};

/* "cuda/ccuda.pxd":1052
 *     unsigned int reserved[4]
 * 
 * ctypedef CUDA_ARRAY_MEMORY_REQUIREMENTS_st CUDA_ARRAY_MEMORY_REQUIREMENTS_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_ARRAY_MEMORY_REQUIREMENTS_v1 CUDA_ARRAY_MEMORY_REQUIREMENTS
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_st __pyx_t_4cuda_5ccuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_v1;

/* "cuda/ccuda.pxd":1054
 * ctypedef CUDA_ARRAY_MEMORY_REQUIREMENTS_st CUDA_ARRAY_MEMORY_REQUIREMENTS_v1
 * 
 * ctypedef CUDA_ARRAY_MEMORY_REQUIREMENTS_v1 CUDA_ARRAY_MEMORY_REQUIREMENTS             # <<<<<<<<<<<<<<
 * 
 * cdef struct _CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_array_s:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_v1 __pyx_t_4cuda_5ccuda_CUDA_ARRAY_MEMORY_REQUIREMENTS;

/* "cuda/ccuda.pxd":1056
 * ctypedef CUDA_ARRAY_MEMORY_REQUIREMENTS_v1 CUDA_ARRAY_MEMORY_REQUIREMENTS
 * 
 * cdef struct _CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_array_s:             # <<<<<<<<<<<<<<
 *     CUarray hArray
 * 
 */
struct __pyx_t_4cuda_5ccuda__CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_array_s {
  __pyx_t_4cuda_5ccuda_CUarray hArray;
};

/* "cuda/ccuda.pxd":1059
 *     CUarray hArray
 * 
 * cdef struct _CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_mipmap_s:             # <<<<<<<<<<<<<<
 *     CUmipmappedArray hMipmappedArray
 * 
 */
struct __pyx_t_4cuda_5ccuda__CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_mipmap_s {
  __pyx_t_4cuda_5ccuda_CUmipmappedArray hMipmappedArray;
};

/* "cuda/ccuda.pxd":1062
 *     CUmipmappedArray hMipmappedArray
 * 
 * cdef struct _CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_linear_s:             # <<<<<<<<<<<<<<
 *     CUdeviceptr devPtr
 *     CUarray_format format
 */
struct __pyx_t_4cuda_5ccuda__CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_linear_s {
  __pyx_t_4cuda_5ccuda_CUdeviceptr devPtr;
  __pyx_t_4cuda_5ccuda_CUarray_format format;
  unsigned int numChannels;
  size_t sizeInBytes;
};

/* "cuda/ccuda.pxd":1068
 *     size_t sizeInBytes
 * 
 * cdef struct _CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_pitch2D_s:             # <<<<<<<<<<<<<<
 *     CUdeviceptr devPtr
 *     CUarray_format format
 */
struct __pyx_t_4cuda_5ccuda__CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_pitch2D_s {
  __pyx_t_4cuda_5ccuda_CUdeviceptr devPtr;
  __pyx_t_4cuda_5ccuda_CUarray_format format;
  unsigned int numChannels;
  size_t width;
  size_t height;
  size_t pitchInBytes;
};

/* "cuda/ccuda.pxd":1076
 *     size_t pitchInBytes
 * 
 * cdef struct _CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_reserved_s:             # <<<<<<<<<<<<<<
 *     int reserved[32]
 * 
 */
struct __pyx_t_4cuda_5ccuda__CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_reserved_s {
  int reserved[32];
};

/* "cuda/ccuda.pxd":1079
 *     int reserved[32]
 * 
 * cdef union _CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_u:             # <<<<<<<<<<<<<<
 *     _CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_array_s array
 *     _CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_mipmap_s mipmap
 */
union __pyx_t_4cuda_5ccuda__CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_u {
  struct __pyx_t_4cuda_5ccuda__CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_array_s array;
  struct __pyx_t_4cuda_5ccuda__CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_mipmap_s mipmap;
  struct __pyx_t_4cuda_5ccuda__CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_linear_s linear;
  struct __pyx_t_4cuda_5ccuda__CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_pitch2D_s pitch2D;
  struct __pyx_t_4cuda_5ccuda__CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_reserved_s reserved;
};

/* "cuda/ccuda.pxd":1086
 *     _CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_res_reserved_s reserved
 * 
 * cdef struct CUDA_RESOURCE_DESC_st:             # <<<<<<<<<<<<<<
 *     CUresourcetype resType
 *     _CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_u res
 */
struct __pyx_t_4cuda_5ccuda_CUDA_RESOURCE_DESC_st {
  __pyx_t_4cuda_5ccuda_CUresourcetype resType;
  union __pyx_t_4cuda_5ccuda__CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_v1_CUDA_RESOURCE_DESC_st_res_u res;
  unsigned int flags;
};

/* "cuda/ccuda.pxd":1091
 *     unsigned int flags
 * 
 * ctypedef CUDA_RESOURCE_DESC_st CUDA_RESOURCE_DESC_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_RESOURCE_DESC_v1 CUDA_RESOURCE_DESC
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_RESOURCE_DESC_st __pyx_t_4cuda_5ccuda_CUDA_RESOURCE_DESC_v1;

/* "cuda/ccuda.pxd":1093
 * ctypedef CUDA_RESOURCE_DESC_st CUDA_RESOURCE_DESC_v1
 * 
 * ctypedef CUDA_RESOURCE_DESC_v1 CUDA_RESOURCE_DESC             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUDA_TEXTURE_DESC_st:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_RESOURCE_DESC_v1 __pyx_t_4cuda_5ccuda_CUDA_RESOURCE_DESC;

/* "cuda/ccuda.pxd":1095
 * ctypedef CUDA_RESOURCE_DESC_v1 CUDA_RESOURCE_DESC
 * 
 * cdef struct CUDA_TEXTURE_DESC_st:             # <<<<<<<<<<<<<<
 *     CUaddress_mode addressMode[3]
 *     CUfilter_mode filterMode
 */
struct __pyx_t_4cuda_5ccuda_CUDA_TEXTURE_DESC_st {
  __pyx_t_4cuda_5ccuda_CUaddress_mode addressMode[3];
  __pyx_t_4cuda_5ccuda_CUfilter_mode filterMode;
  unsigned int flags;
  unsigned int maxAnisotropy;
  __pyx_t_4cuda_5ccuda_CUfilter_mode mipmapFilterMode;
  float mipmapLevelBias;
  float minMipmapLevelClamp;
  float maxMipmapLevelClamp;
  float borderColor[4];
  int reserved[12];
};

/* "cuda/ccuda.pxd":1107
 *     int reserved[12]
 * 
 * ctypedef CUDA_TEXTURE_DESC_st CUDA_TEXTURE_DESC_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_TEXTURE_DESC_v1 CUDA_TEXTURE_DESC
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_TEXTURE_DESC_st __pyx_t_4cuda_5ccuda_CUDA_TEXTURE_DESC_v1;

/* "cuda/ccuda.pxd":1109
 * ctypedef CUDA_TEXTURE_DESC_st CUDA_TEXTURE_DESC_v1
 * 
 * ctypedef CUDA_TEXTURE_DESC_v1 CUDA_TEXTURE_DESC             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUresourceViewFormat_enum:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_TEXTURE_DESC_v1 __pyx_t_4cuda_5ccuda_CUDA_TEXTURE_DESC;

/* "cuda/ccuda.pxd":1148
 *     CU_RES_VIEW_FORMAT_UNSIGNED_BC7 = 34
 * 
 * ctypedef CUresourceViewFormat_enum CUresourceViewFormat             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUDA_RESOURCE_VIEW_DESC_st:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUresourceViewFormat_enum __pyx_t_4cuda_5ccuda_CUresourceViewFormat;

/* "cuda/ccuda.pxd":1150
 * ctypedef CUresourceViewFormat_enum CUresourceViewFormat
 * 
 * cdef struct CUDA_RESOURCE_VIEW_DESC_st:             # <<<<<<<<<<<<<<
 *     CUresourceViewFormat format
 *     size_t width
 */
struct __pyx_t_4cuda_5ccuda_CUDA_RESOURCE_VIEW_DESC_st {
  __pyx_t_4cuda_5ccuda_CUresourceViewFormat format;
  size_t width;
  size_t height;
  size_t depth;
  unsigned int firstMipmapLevel;
  unsigned int lastMipmapLevel;
  unsigned int firstLayer;
  unsigned int lastLayer;
  unsigned int reserved[16];
};

/* "cuda/ccuda.pxd":1161
 *     unsigned int reserved[16]
 * 
 * ctypedef CUDA_RESOURCE_VIEW_DESC_st CUDA_RESOURCE_VIEW_DESC_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_RESOURCE_VIEW_DESC_v1 CUDA_RESOURCE_VIEW_DESC
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_RESOURCE_VIEW_DESC_st __pyx_t_4cuda_5ccuda_CUDA_RESOURCE_VIEW_DESC_v1;

/* "cuda/ccuda.pxd":1163
 * ctypedef CUDA_RESOURCE_VIEW_DESC_st CUDA_RESOURCE_VIEW_DESC_v1
 * 
 * ctypedef CUDA_RESOURCE_VIEW_DESC_v1 CUDA_RESOURCE_VIEW_DESC             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_RESOURCE_VIEW_DESC_v1 __pyx_t_4cuda_5ccuda_CUDA_RESOURCE_VIEW_DESC;

/* "cuda/ccuda.pxd":1165
 * ctypedef CUDA_RESOURCE_VIEW_DESC_v1 CUDA_RESOURCE_VIEW_DESC
 * 
 * cdef struct CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st:             # <<<<<<<<<<<<<<
 *     unsigned long long p2pToken
 *     unsigned int vaSpaceToken
 */
struct __pyx_t_4cuda_5ccuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st {
  unsigned PY_LONG_LONG p2pToken;
  unsigned int vaSpaceToken;
};

/* "cuda/ccuda.pxd":1169
 *     unsigned int vaSpaceToken
 * 
 * ctypedef CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1 CUDA_POINTER_ATTRIBUTE_P2P_TOKENS
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st __pyx_t_4cuda_5ccuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1;

/* "cuda/ccuda.pxd":1171
 * ctypedef CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1
 * 
 * ctypedef CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1 CUDA_POINTER_ATTRIBUTE_P2P_TOKENS             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1 __pyx_t_4cuda_5ccuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS;

/* "cuda/ccuda.pxd":1178
 *     CU_POINTER_ATTRIBUTE_ACCESS_FLAG_READWRITE = 3
 * 
 * ctypedef CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUDA_LAUNCH_PARAMS_st:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum __pyx_t_4cuda_5ccuda_CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS;

/* "cuda/ccuda.pxd":1180
 * ctypedef CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS
 * 
 * cdef struct CUDA_LAUNCH_PARAMS_st:             # <<<<<<<<<<<<<<
 *     CUfunction function
 *     unsigned int gridDimX
 */
struct __pyx_t_4cuda_5ccuda_CUDA_LAUNCH_PARAMS_st {
  __pyx_t_4cuda_5ccuda_CUfunction function;
  unsigned int gridDimX;
  unsigned int gridDimY;
  unsigned int gridDimZ;
  unsigned int blockDimX;
  unsigned int blockDimY;
  unsigned int blockDimZ;
  unsigned int sharedMemBytes;
  __pyx_t_4cuda_5ccuda_CUstream hStream;
  void **kernelParams;
};

/* "cuda/ccuda.pxd":1192
 *     void** kernelParams
 * 
 * ctypedef CUDA_LAUNCH_PARAMS_st CUDA_LAUNCH_PARAMS_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_LAUNCH_PARAMS_v1 CUDA_LAUNCH_PARAMS
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_LAUNCH_PARAMS_st __pyx_t_4cuda_5ccuda_CUDA_LAUNCH_PARAMS_v1;

/* "cuda/ccuda.pxd":1194
 * ctypedef CUDA_LAUNCH_PARAMS_st CUDA_LAUNCH_PARAMS_v1
 * 
 * ctypedef CUDA_LAUNCH_PARAMS_v1 CUDA_LAUNCH_PARAMS             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUexternalMemoryHandleType_enum:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_LAUNCH_PARAMS_v1 __pyx_t_4cuda_5ccuda_CUDA_LAUNCH_PARAMS;

/* "cuda/ccuda.pxd":1206
 *     CU_EXTERNAL_MEMORY_HANDLE_TYPE_NVSCIBUF = 8
 * 
 * ctypedef CUexternalMemoryHandleType_enum CUexternalMemoryHandleType             # <<<<<<<<<<<<<<
 * 
 * cdef struct _CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st_handle_handle_win32_s:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUexternalMemoryHandleType_enum __pyx_t_4cuda_5ccuda_CUexternalMemoryHandleType;

/* "cuda/ccuda.pxd":1208
 * ctypedef CUexternalMemoryHandleType_enum CUexternalMemoryHandleType
 * 
 * cdef struct _CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st_handle_handle_win32_s:             # <<<<<<<<<<<<<<
 *     void* handle
 *     void* name
 */
struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st_handle_handle_win32_s {
  void *handle;
  void *name;
};

/* "cuda/ccuda.pxd":1212
 *     void* name
 * 
 * cdef union _CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st_handle_u:             # <<<<<<<<<<<<<<
 *     int fd
 *     _CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st_handle_handle_win32_s win32
 */
union __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st_handle_u {
  int fd;
  struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st_handle_handle_win32_s win32;
  void *nvSciBufObject;
};

/* "cuda/ccuda.pxd":1217
 *     void* nvSciBufObject
 * 
 * cdef struct CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st:             # <<<<<<<<<<<<<<
 *     CUexternalMemoryHandleType type
 *     _CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st_handle_u handle
 */
struct __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st {
  __pyx_t_4cuda_5ccuda_CUexternalMemoryHandleType type;
  union __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st_handle_u handle;
  unsigned PY_LONG_LONG size;
  unsigned int flags;
  unsigned int reserved[16];
};

/* "cuda/ccuda.pxd":1224
 *     unsigned int reserved[16]
 * 
 * ctypedef CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1 CUDA_EXTERNAL_MEMORY_HANDLE_DESC
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1;

/* "cuda/ccuda.pxd":1226
 * ctypedef CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1
 * 
 * ctypedef CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1 CUDA_EXTERNAL_MEMORY_HANDLE_DESC             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1 __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC;

/* "cuda/ccuda.pxd":1228
 * ctypedef CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1 CUDA_EXTERNAL_MEMORY_HANDLE_DESC
 * 
 * cdef struct CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st:             # <<<<<<<<<<<<<<
 *     unsigned long long offset
 *     unsigned long long size
 */
struct __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st {
  unsigned PY_LONG_LONG offset;
  unsigned PY_LONG_LONG size;
  unsigned int flags;
  unsigned int reserved[16];
};

/* "cuda/ccuda.pxd":1234
 *     unsigned int reserved[16]
 * 
 * ctypedef CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1 CUDA_EXTERNAL_MEMORY_BUFFER_DESC
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1;

/* "cuda/ccuda.pxd":1236
 * ctypedef CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1
 * 
 * ctypedef CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1 CUDA_EXTERNAL_MEMORY_BUFFER_DESC             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1 __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC;

/* "cuda/ccuda.pxd":1238
 * ctypedef CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1 CUDA_EXTERNAL_MEMORY_BUFFER_DESC
 * 
 * cdef struct CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st:             # <<<<<<<<<<<<<<
 *     unsigned long long offset
 *     CUDA_ARRAY3D_DESCRIPTOR arrayDesc
 */
struct __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st {
  unsigned PY_LONG_LONG offset;
  __pyx_t_4cuda_5ccuda_CUDA_ARRAY3D_DESCRIPTOR arrayDesc;
  unsigned int numLevels;
  unsigned int reserved[16];
};

/* "cuda/ccuda.pxd":1244
 *     unsigned int reserved[16]
 * 
 * ctypedef CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1 CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1;

/* "cuda/ccuda.pxd":1246
 * ctypedef CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1
 * 
 * ctypedef CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1 CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUexternalSemaphoreHandleType_enum:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1 __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC;

/* "cuda/ccuda.pxd":1260
 *     CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_WIN32 = 10
 * 
 * ctypedef CUexternalSemaphoreHandleType_enum CUexternalSemaphoreHandleType             # <<<<<<<<<<<<<<
 * 
 * cdef struct _CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st_handle_handle_win32_s:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUexternalSemaphoreHandleType_enum __pyx_t_4cuda_5ccuda_CUexternalSemaphoreHandleType;

/* "cuda/ccuda.pxd":1262
 * ctypedef CUexternalSemaphoreHandleType_enum CUexternalSemaphoreHandleType
 * 
 * cdef struct _CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st_handle_handle_win32_s:             # <<<<<<<<<<<<<<
 *     void* handle
 *     void* name
 */
struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st_handle_handle_win32_s {
  void *handle;
  void *name;
};

/* "cuda/ccuda.pxd":1266
 *     void* name
 * 
 * cdef union _CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st_handle_u:             # <<<<<<<<<<<<<<
 *     int fd
 *     _CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st_handle_handle_win32_s win32
 */
union __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st_handle_u {
  int fd;
  struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st_handle_handle_win32_s win32;
  void *nvSciSyncObj;
};

/* "cuda/ccuda.pxd":1271
 *     void* nvSciSyncObj
 * 
 * cdef struct CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st:             # <<<<<<<<<<<<<<
 *     CUexternalSemaphoreHandleType type
 *     _CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st_handle_u handle
 */
struct __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st {
  __pyx_t_4cuda_5ccuda_CUexternalSemaphoreHandleType type;
  union __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st_handle_u handle;
  unsigned int flags;
  unsigned int reserved[16];
};

/* "cuda/ccuda.pxd":1277
 *     unsigned int reserved[16]
 * 
 * ctypedef CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1 CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1;

/* "cuda/ccuda.pxd":1279
 * ctypedef CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1
 * 
 * ctypedef CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1 CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC             # <<<<<<<<<<<<<<
 * 
 * cdef struct _CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st_params_params_fence_s:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1 __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC;

/* "cuda/ccuda.pxd":1281
 * ctypedef CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1 CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC
 * 
 * cdef struct _CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st_params_params_fence_s:             # <<<<<<<<<<<<<<
 *     unsigned long long value
 * 
 */
struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st_params_params_fence_s {
  unsigned PY_LONG_LONG value;
};

/* "cuda/ccuda.pxd":1284
 *     unsigned long long value
 * 
 * cdef union _CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st_params_params_nvSciSync_u:             # <<<<<<<<<<<<<<
 *     void* fence
 *     unsigned long long reserved
 */
union __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st_params_params_nvSciSync_u {
  void *fence;
  unsigned PY_LONG_LONG reserved;
};

/* "cuda/ccuda.pxd":1288
 *     unsigned long long reserved
 * 
 * cdef struct _CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st_params_params_keyedMutex_s:             # <<<<<<<<<<<<<<
 *     unsigned long long key
 * 
 */
struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st_params_params_keyedMutex_s {
  unsigned PY_LONG_LONG key;
};

/* "cuda/ccuda.pxd":1291
 *     unsigned long long key
 * 
 * cdef struct _CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st_params_s:             # <<<<<<<<<<<<<<
 *     _CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st_params_params_fence_s fence
 *     _CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st_params_params_nvSciSync_u nvSciSync
 */
struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st_params_s {
  struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st_params_params_fence_s fence;
  union __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st_params_params_nvSciSync_u nvSciSync;
  struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st_params_params_keyedMutex_s keyedMutex;
  unsigned int reserved[12];
};

/* "cuda/ccuda.pxd":1297
 *     unsigned int reserved[12]
 * 
 * cdef struct CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st:             # <<<<<<<<<<<<<<
 *     _CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st_params_s params
 *     unsigned int flags
 */
struct __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st {
  struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st_params_s params;
  unsigned int flags;
  unsigned int reserved[16];
};

/* "cuda/ccuda.pxd":1302
 *     unsigned int reserved[16]
 * 
 * ctypedef CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1 CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1;

/* "cuda/ccuda.pxd":1304
 * ctypedef CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1
 * 
 * ctypedef CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1 CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS             # <<<<<<<<<<<<<<
 * 
 * cdef struct _CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st_params_params_fence_s:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1 __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS;

/* "cuda/ccuda.pxd":1306
 * ctypedef CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1 CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS
 * 
 * cdef struct _CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st_params_params_fence_s:             # <<<<<<<<<<<<<<
 *     unsigned long long value
 * 
 */
struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st_params_params_fence_s {
  unsigned PY_LONG_LONG value;
};

/* "cuda/ccuda.pxd":1309
 *     unsigned long long value
 * 
 * cdef union _CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st_params_params_nvSciSync_u:             # <<<<<<<<<<<<<<
 *     void* fence
 *     unsigned long long reserved
 */
union __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st_params_params_nvSciSync_u {
  void *fence;
  unsigned PY_LONG_LONG reserved;
};

/* "cuda/ccuda.pxd":1313
 *     unsigned long long reserved
 * 
 * cdef struct _CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st_params_params_keyedMutex_s:             # <<<<<<<<<<<<<<
 *     unsigned long long key
 *     unsigned int timeoutMs
 */
struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st_params_params_keyedMutex_s {
  unsigned PY_LONG_LONG key;
  unsigned int timeoutMs;
};

/* "cuda/ccuda.pxd":1317
 *     unsigned int timeoutMs
 * 
 * cdef struct _CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st_params_s:             # <<<<<<<<<<<<<<
 *     _CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st_params_params_fence_s fence
 *     _CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st_params_params_nvSciSync_u nvSciSync
 */
struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st_params_s {
  struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st_params_params_fence_s fence;
  union __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st_params_params_nvSciSync_u nvSciSync;
  struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st_params_params_keyedMutex_s keyedMutex;
  unsigned int reserved[10];
};

/* "cuda/ccuda.pxd":1323
 *     unsigned int reserved[10]
 * 
 * cdef struct CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st:             # <<<<<<<<<<<<<<
 *     _CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st_params_s params
 *     unsigned int flags
 */
struct __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st {
  struct __pyx_t_4cuda_5ccuda__CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st_params_s params;
  unsigned int flags;
  unsigned int reserved[16];
};

/* "cuda/ccuda.pxd":1328
 *     unsigned int reserved[16]
 * 
 * ctypedef CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1 CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1;

/* "cuda/ccuda.pxd":1330
 * ctypedef CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1
 * 
 * ctypedef CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1 CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1 __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS;

/* "cuda/ccuda.pxd":1332
 * ctypedef CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1 CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS
 * 
 * cdef struct CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st:             # <<<<<<<<<<<<<<
 *     CUexternalSemaphore* extSemArray
 *     const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS* paramsArray
 */
struct __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st {
  __pyx_t_4cuda_5ccuda_CUexternalSemaphore *extSemArray;
  __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS const *paramsArray;
  unsigned int numExtSems;
};

/* "cuda/ccuda.pxd":1337
 *     unsigned int numExtSems
 * 
 * ctypedef CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1 CUDA_EXT_SEM_SIGNAL_NODE_PARAMS
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1;

/* "cuda/ccuda.pxd":1339
 * ctypedef CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1
 * 
 * ctypedef CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1 CUDA_EXT_SEM_SIGNAL_NODE_PARAMS             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUDA_EXT_SEM_WAIT_NODE_PARAMS_st:
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1 __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS;

/* "cuda/ccuda.pxd":1341
 * ctypedef CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1 CUDA_EXT_SEM_SIGNAL_NODE_PARAMS
 * 
 * cdef struct CUDA_EXT_SEM_WAIT_NODE_PARAMS_st:             # <<<<<<<<<<<<<<
 *     CUexternalSemaphore* extSemArray
 *     const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS* paramsArray
 */
struct __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_st {
  __pyx_t_4cuda_5ccuda_CUexternalSemaphore *extSemArray;
  __pyx_t_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS const *paramsArray;
  unsigned int numExtSems;
};

/* "cuda/ccuda.pxd":1346
 *     unsigned int numExtSems
 * 
 * ctypedef CUDA_EXT_SEM_WAIT_NODE_PARAMS_st CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1 CUDA_EXT_SEM_WAIT_NODE_PARAMS
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_st __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1;

/* "cuda/ccuda.pxd":1348
 * ctypedef CUDA_EXT_SEM_WAIT_NODE_PARAMS_st CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1
 * 
 * ctypedef CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1 CUDA_EXT_SEM_WAIT_NODE_PARAMS             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned long long CUmemGenericAllocationHandle_v1
 */
typedef __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1 __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS;

/* "cuda/ccuda.pxd":1361
 *     CU_MEM_HANDLE_TYPE_MAX = 2147483647
 * 
 * ctypedef CUmemAllocationHandleType_enum CUmemAllocationHandleType             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUmemAccess_flags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUmemAllocationHandleType_enum __pyx_t_4cuda_5ccuda_CUmemAllocationHandleType;

/* "cuda/ccuda.pxd":1369
 *     CU_MEM_ACCESS_FLAGS_PROT_MAX = 2147483647
 * 
 * ctypedef CUmemAccess_flags_enum CUmemAccess_flags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUmemLocationType_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUmemAccess_flags_enum __pyx_t_4cuda_5ccuda_CUmemAccess_flags;

/* "cuda/ccuda.pxd":1376
 *     CU_MEM_LOCATION_TYPE_MAX = 2147483647
 * 
 * ctypedef CUmemLocationType_enum CUmemLocationType             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUmemAllocationType_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUmemLocationType_enum __pyx_t_4cuda_5ccuda_CUmemLocationType;

/* "cuda/ccuda.pxd":1383
 *     CU_MEM_ALLOCATION_TYPE_MAX = 2147483647
 * 
 * ctypedef CUmemAllocationType_enum CUmemAllocationType             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUmemAllocationGranularity_flags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUmemAllocationType_enum __pyx_t_4cuda_5ccuda_CUmemAllocationType;

/* "cuda/ccuda.pxd":1389
 *     CU_MEM_ALLOC_GRANULARITY_RECOMMENDED = 1
 * 
 * ctypedef CUmemAllocationGranularity_flags_enum CUmemAllocationGranularity_flags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUarraySparseSubresourceType_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUmemAllocationGranularity_flags_enum __pyx_t_4cuda_5ccuda_CUmemAllocationGranularity_flags;

/* "cuda/ccuda.pxd":1395
 *     CU_ARRAY_SPARSE_SUBRESOURCE_TYPE_MIPTAIL = 1
 * 
 * ctypedef CUarraySparseSubresourceType_enum CUarraySparseSubresourceType             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUmemOperationType_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUarraySparseSubresourceType_enum __pyx_t_4cuda_5ccuda_CUarraySparseSubresourceType;

/* "cuda/ccuda.pxd":1401
 *     CU_MEM_OPERATION_TYPE_UNMAP = 2
 * 
 * ctypedef CUmemOperationType_enum CUmemOperationType             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUmemHandleType_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUmemOperationType_enum __pyx_t_4cuda_5ccuda_CUmemOperationType;

/* "cuda/ccuda.pxd":1406
 *     CU_MEM_HANDLE_TYPE_GENERIC = 0
 * 
 * ctypedef CUmemHandleType_enum CUmemHandleType             # <<<<<<<<<<<<<<
 * 
 * cdef union _CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_resource_u:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUmemHandleType_enum __pyx_t_4cuda_5ccuda_CUmemHandleType;

/* "cuda/ccuda.pxd":1408
 * ctypedef CUmemHandleType_enum CUmemHandleType
 * 
 * cdef union _CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_resource_u:             # <<<<<<<<<<<<<<
 *     CUmipmappedArray mipmap
 *     CUarray array
 */
union __pyx_t_4cuda_5ccuda__CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_resource_u {
  __pyx_t_4cuda_5ccuda_CUmipmappedArray mipmap;
  __pyx_t_4cuda_5ccuda_CUarray array;
};

/* "cuda/ccuda.pxd":1412
 *     CUarray array
 * 
 * cdef struct _CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_subresource_subresource_sparseLevel_s:             # <<<<<<<<<<<<<<
 *     unsigned int level
 *     unsigned int layer
 */
struct __pyx_t_4cuda_5ccuda__CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_subresource_subresource_sparseLevel_s {
  unsigned int level;
  unsigned int layer;
  unsigned int offsetX;
  unsigned int offsetY;
  unsigned int offsetZ;
  unsigned int extentWidth;
  unsigned int extentHeight;
  unsigned int extentDepth;
};

/* "cuda/ccuda.pxd":1422
 *     unsigned int extentDepth
 * 
 * cdef struct _CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_subresource_subresource_miptail_s:             # <<<<<<<<<<<<<<
 *     unsigned int layer
 *     unsigned long long offset
 */
struct __pyx_t_4cuda_5ccuda__CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_subresource_subresource_miptail_s {
  unsigned int layer;
  unsigned PY_LONG_LONG offset;
  unsigned PY_LONG_LONG size;
};

/* "cuda/ccuda.pxd":1427
 *     unsigned long long size
 * 
 * cdef union _CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_subresource_u:             # <<<<<<<<<<<<<<
 *     _CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_subresource_subresource_sparseLevel_s sparseLevel
 *     _CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_subresource_subresource_miptail_s miptail
 */
union __pyx_t_4cuda_5ccuda__CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_subresource_u {
  struct __pyx_t_4cuda_5ccuda__CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_subresource_subresource_sparseLevel_s sparseLevel;
  struct __pyx_t_4cuda_5ccuda__CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_subresource_subresource_miptail_s miptail;
};

/* "cuda/ccuda.pxd":1431
 *     _CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_subresource_subresource_miptail_s miptail
 * 
 * cdef union _CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_memHandle_u:             # <<<<<<<<<<<<<<
 *     CUmemGenericAllocationHandle memHandle
 * 
 */
union __pyx_t_4cuda_5ccuda__CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_memHandle_u {
  __pyx_t_4cuda_5ccuda_CUmemGenericAllocationHandle memHandle;
};

/* "cuda/ccuda.pxd":1434
 *     CUmemGenericAllocationHandle memHandle
 * 
 * cdef struct CUarrayMapInfo_st:             # <<<<<<<<<<<<<<
 *     CUresourcetype resourceType
 *     _CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_resource_u resource
 */
struct __pyx_t_4cuda_5ccuda_CUarrayMapInfo_st {
  __pyx_t_4cuda_5ccuda_CUresourcetype resourceType;
  union __pyx_t_4cuda_5ccuda__CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_resource_u resource;
  __pyx_t_4cuda_5ccuda_CUarraySparseSubresourceType subresourceType;
  union __pyx_t_4cuda_5ccuda__CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_subresource_u subresource;
  __pyx_t_4cuda_5ccuda_CUmemOperationType memOperationType;
  __pyx_t_4cuda_5ccuda_CUmemHandleType memHandleType;
  union __pyx_t_4cuda_5ccuda__CUarrayMapInfo_v1_CUarrayMapInfo_v1_CUarrayMapInfo_st_memHandle_u memHandle;
  unsigned PY_LONG_LONG offset;
  unsigned int deviceBitMask;
  unsigned int flags;
  unsigned int reserved[2];
};

/* "cuda/ccuda.pxd":1447
 *     unsigned int reserved[2]
 * 
 * ctypedef CUarrayMapInfo_st CUarrayMapInfo_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUarrayMapInfo_v1 CUarrayMapInfo
 */
typedef struct __pyx_t_4cuda_5ccuda_CUarrayMapInfo_st __pyx_t_4cuda_5ccuda_CUarrayMapInfo_v1;

/* "cuda/ccuda.pxd":1449
 * ctypedef CUarrayMapInfo_st CUarrayMapInfo_v1
 * 
 * ctypedef CUarrayMapInfo_v1 CUarrayMapInfo             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUmemLocation_st:
 */
typedef __pyx_t_4cuda_5ccuda_CUarrayMapInfo_v1 __pyx_t_4cuda_5ccuda_CUarrayMapInfo;

/* "cuda/ccuda.pxd":1451
 * ctypedef CUarrayMapInfo_v1 CUarrayMapInfo
 * 
 * cdef struct CUmemLocation_st:             # <<<<<<<<<<<<<<
 *     CUmemLocationType type
 *     int id
 */
struct __pyx_t_4cuda_5ccuda_CUmemLocation_st {
  __pyx_t_4cuda_5ccuda_CUmemLocationType type;
  int id;
};

/* "cuda/ccuda.pxd":1455
 *     int id
 * 
 * ctypedef CUmemLocation_st CUmemLocation_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUmemLocation_v1 CUmemLocation
 */
typedef struct __pyx_t_4cuda_5ccuda_CUmemLocation_st __pyx_t_4cuda_5ccuda_CUmemLocation_v1;

/* "cuda/ccuda.pxd":1457
 * ctypedef CUmemLocation_st CUmemLocation_v1
 * 
 * ctypedef CUmemLocation_v1 CUmemLocation             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUmemAllocationCompType_enum:
 */
typedef __pyx_t_4cuda_5ccuda_CUmemLocation_v1 __pyx_t_4cuda_5ccuda_CUmemLocation;

/* "cuda/ccuda.pxd":1463
 *     CU_MEM_ALLOCATION_COMP_GENERIC = 1
 * 
 * ctypedef CUmemAllocationCompType_enum CUmemAllocationCompType             # <<<<<<<<<<<<<<
 * 
 * cdef struct _CUmemAllocationProp_v1_CUmemAllocationProp_v1_CUmemAllocationProp_st_allocFlags_s:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUmemAllocationCompType_enum __pyx_t_4cuda_5ccuda_CUmemAllocationCompType;

/* "cuda/ccuda.pxd":1465
 * ctypedef CUmemAllocationCompType_enum CUmemAllocationCompType
 * 
 * cdef struct _CUmemAllocationProp_v1_CUmemAllocationProp_v1_CUmemAllocationProp_st_allocFlags_s:             # <<<<<<<<<<<<<<
 *     unsigned char compressionType
 *     unsigned char gpuDirectRDMACapable
 */
struct __pyx_t_4cuda_5ccuda__CUmemAllocationProp_v1_CUmemAllocationProp_v1_CUmemAllocationProp_st_allocFlags_s {
  unsigned char compressionType;
  unsigned char gpuDirectRDMACapable;
  unsigned short usage;
  unsigned char reserved[4];
};

/* "cuda/ccuda.pxd":1471
 *     unsigned char reserved[4]
 * 
 * cdef struct CUmemAllocationProp_st:             # <<<<<<<<<<<<<<
 *     CUmemAllocationType type
 *     CUmemAllocationHandleType requestedHandleTypes
 */
struct __pyx_t_4cuda_5ccuda_CUmemAllocationProp_st {
  __pyx_t_4cuda_5ccuda_CUmemAllocationType type;
  __pyx_t_4cuda_5ccuda_CUmemAllocationHandleType requestedHandleTypes;
  __pyx_t_4cuda_5ccuda_CUmemLocation location;
  void *win32HandleMetaData;
  struct __pyx_t_4cuda_5ccuda__CUmemAllocationProp_v1_CUmemAllocationProp_v1_CUmemAllocationProp_st_allocFlags_s allocFlags;
};

/* "cuda/ccuda.pxd":1478
 *     _CUmemAllocationProp_v1_CUmemAllocationProp_v1_CUmemAllocationProp_st_allocFlags_s allocFlags
 * 
 * ctypedef CUmemAllocationProp_st CUmemAllocationProp_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUmemAllocationProp_v1 CUmemAllocationProp
 */
typedef struct __pyx_t_4cuda_5ccuda_CUmemAllocationProp_st __pyx_t_4cuda_5ccuda_CUmemAllocationProp_v1;

/* "cuda/ccuda.pxd":1480
 * ctypedef CUmemAllocationProp_st CUmemAllocationProp_v1
 * 
 * ctypedef CUmemAllocationProp_v1 CUmemAllocationProp             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUmemAccessDesc_st:
 */
typedef __pyx_t_4cuda_5ccuda_CUmemAllocationProp_v1 __pyx_t_4cuda_5ccuda_CUmemAllocationProp;

/* "cuda/ccuda.pxd":1482
 * ctypedef CUmemAllocationProp_v1 CUmemAllocationProp
 * 
 * cdef struct CUmemAccessDesc_st:             # <<<<<<<<<<<<<<
 *     CUmemLocation location
 *     CUmemAccess_flags flags
 */
struct __pyx_t_4cuda_5ccuda_CUmemAccessDesc_st {
  __pyx_t_4cuda_5ccuda_CUmemLocation location;
  __pyx_t_4cuda_5ccuda_CUmemAccess_flags flags;
};

/* "cuda/ccuda.pxd":1486
 *     CUmemAccess_flags flags
 * 
 * ctypedef CUmemAccessDesc_st CUmemAccessDesc_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUmemAccessDesc_v1 CUmemAccessDesc
 */
typedef struct __pyx_t_4cuda_5ccuda_CUmemAccessDesc_st __pyx_t_4cuda_5ccuda_CUmemAccessDesc_v1;

/* "cuda/ccuda.pxd":1488
 * ctypedef CUmemAccessDesc_st CUmemAccessDesc_v1
 * 
 * ctypedef CUmemAccessDesc_v1 CUmemAccessDesc             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUgraphExecUpdateResult_enum:
 */
typedef __pyx_t_4cuda_5ccuda_CUmemAccessDesc_v1 __pyx_t_4cuda_5ccuda_CUmemAccessDesc;

/* "cuda/ccuda.pxd":1501
 *     CU_GRAPH_EXEC_UPDATE_ERROR_ATTRIBUTES_CHANGED = 8
 * 
 * ctypedef CUgraphExecUpdateResult_enum CUgraphExecUpdateResult             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUmemPool_attribute_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUgraphExecUpdateResult_enum __pyx_t_4cuda_5ccuda_CUgraphExecUpdateResult;

/* "cuda/ccuda.pxd":1513
 *     CU_MEMPOOL_ATTR_USED_MEM_HIGH = 8
 * 
 * ctypedef CUmemPool_attribute_enum CUmemPool_attribute             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUmemPoolProps_st:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUmemPool_attribute_enum __pyx_t_4cuda_5ccuda_CUmemPool_attribute;

/* "cuda/ccuda.pxd":1515
 * ctypedef CUmemPool_attribute_enum CUmemPool_attribute
 * 
 * cdef struct CUmemPoolProps_st:             # <<<<<<<<<<<<<<
 *     CUmemAllocationType allocType
 *     CUmemAllocationHandleType handleTypes
 */
struct __pyx_t_4cuda_5ccuda_CUmemPoolProps_st {
  __pyx_t_4cuda_5ccuda_CUmemAllocationType allocType;
  __pyx_t_4cuda_5ccuda_CUmemAllocationHandleType handleTypes;
  __pyx_t_4cuda_5ccuda_CUmemLocation location;
  void *win32SecurityAttributes;
  unsigned char reserved[64];
};

/* "cuda/ccuda.pxd":1522
 *     unsigned char reserved[64]
 * 
 * ctypedef CUmemPoolProps_st CUmemPoolProps_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUmemPoolProps_v1 CUmemPoolProps
 */
typedef struct __pyx_t_4cuda_5ccuda_CUmemPoolProps_st __pyx_t_4cuda_5ccuda_CUmemPoolProps_v1;

/* "cuda/ccuda.pxd":1524
 * ctypedef CUmemPoolProps_st CUmemPoolProps_v1
 * 
 * ctypedef CUmemPoolProps_v1 CUmemPoolProps             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUmemPoolPtrExportData_st:
 */
typedef __pyx_t_4cuda_5ccuda_CUmemPoolProps_v1 __pyx_t_4cuda_5ccuda_CUmemPoolProps;

/* "cuda/ccuda.pxd":1526
 * ctypedef CUmemPoolProps_v1 CUmemPoolProps
 * 
 * cdef struct CUmemPoolPtrExportData_st:             # <<<<<<<<<<<<<<
 *     unsigned char reserved[64]
 * 
 */
struct __pyx_t_4cuda_5ccuda_CUmemPoolPtrExportData_st {
  unsigned char reserved[64];
};

/* "cuda/ccuda.pxd":1529
 *     unsigned char reserved[64]
 * 
 * ctypedef CUmemPoolPtrExportData_st CUmemPoolPtrExportData_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUmemPoolPtrExportData_v1 CUmemPoolPtrExportData
 */
typedef struct __pyx_t_4cuda_5ccuda_CUmemPoolPtrExportData_st __pyx_t_4cuda_5ccuda_CUmemPoolPtrExportData_v1;

/* "cuda/ccuda.pxd":1531
 * ctypedef CUmemPoolPtrExportData_st CUmemPoolPtrExportData_v1
 * 
 * ctypedef CUmemPoolPtrExportData_v1 CUmemPoolPtrExportData             # <<<<<<<<<<<<<<
 * 
 * cdef struct CUDA_MEM_ALLOC_NODE_PARAMS_st:
 */
typedef __pyx_t_4cuda_5ccuda_CUmemPoolPtrExportData_v1 __pyx_t_4cuda_5ccuda_CUmemPoolPtrExportData;

/* "cuda/ccuda.pxd":1533
 * ctypedef CUmemPoolPtrExportData_v1 CUmemPoolPtrExportData
 * 
 * cdef struct CUDA_MEM_ALLOC_NODE_PARAMS_st:             # <<<<<<<<<<<<<<
 *     CUmemPoolProps poolProps
 *     const CUmemAccessDesc* accessDescs
 */
struct __pyx_t_4cuda_5ccuda_CUDA_MEM_ALLOC_NODE_PARAMS_st {
  __pyx_t_4cuda_5ccuda_CUmemPoolProps poolProps;
  __pyx_t_4cuda_5ccuda_CUmemAccessDesc const *accessDescs;
  size_t accessDescCount;
  size_t bytesize;
  __pyx_t_4cuda_5ccuda_CUdeviceptr dptr;
};

/* "cuda/ccuda.pxd":1540
 *     CUdeviceptr dptr
 * 
 * ctypedef CUDA_MEM_ALLOC_NODE_PARAMS_st CUDA_MEM_ALLOC_NODE_PARAMS             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUgraphMem_attribute_enum:
 */
typedef struct __pyx_t_4cuda_5ccuda_CUDA_MEM_ALLOC_NODE_PARAMS_st __pyx_t_4cuda_5ccuda_CUDA_MEM_ALLOC_NODE_PARAMS;

/* "cuda/ccuda.pxd":1548
 *     CU_GRAPH_MEM_ATTR_RESERVED_MEM_HIGH = 3
 * 
 * ctypedef CUgraphMem_attribute_enum CUgraphMem_attribute             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUflushGPUDirectRDMAWritesOptions_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUgraphMem_attribute_enum __pyx_t_4cuda_5ccuda_CUgraphMem_attribute;

/* "cuda/ccuda.pxd":1554
 *     CU_FLUSH_GPU_DIRECT_RDMA_WRITES_OPTION_MEMOPS = 2
 * 
 * ctypedef CUflushGPUDirectRDMAWritesOptions_enum CUflushGPUDirectRDMAWritesOptions             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUGPUDirectRDMAWritesOrdering_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUflushGPUDirectRDMAWritesOptions_enum __pyx_t_4cuda_5ccuda_CUflushGPUDirectRDMAWritesOptions;

/* "cuda/ccuda.pxd":1561
 *     CU_GPU_DIRECT_RDMA_WRITES_ORDERING_ALL_DEVICES = 200
 * 
 * ctypedef CUGPUDirectRDMAWritesOrdering_enum CUGPUDirectRDMAWritesOrdering             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUflushGPUDirectRDMAWritesScope_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUGPUDirectRDMAWritesOrdering_enum __pyx_t_4cuda_5ccuda_CUGPUDirectRDMAWritesOrdering;

/* "cuda/ccuda.pxd":1567
 *     CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TO_ALL_DEVICES = 200
 * 
 * ctypedef CUflushGPUDirectRDMAWritesScope_enum CUflushGPUDirectRDMAWritesScope             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUflushGPUDirectRDMAWritesTarget_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUflushGPUDirectRDMAWritesScope_enum __pyx_t_4cuda_5ccuda_CUflushGPUDirectRDMAWritesScope;

/* "cuda/ccuda.pxd":1572
 *     CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TARGET_CURRENT_CTX = 0
 * 
 * ctypedef CUflushGPUDirectRDMAWritesTarget_enum CUflushGPUDirectRDMAWritesTarget             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUgraphDebugDot_flags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUflushGPUDirectRDMAWritesTarget_enum __pyx_t_4cuda_5ccuda_CUflushGPUDirectRDMAWritesTarget;

/* "cuda/ccuda.pxd":1589
 *     CU_GRAPH_DEBUG_DOT_FLAGS_MEM_FREE_NODE_PARAMS = 4096
 * 
 * ctypedef CUgraphDebugDot_flags_enum CUgraphDebugDot_flags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUuserObject_flags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUgraphDebugDot_flags_enum __pyx_t_4cuda_5ccuda_CUgraphDebugDot_flags;

/* "cuda/ccuda.pxd":1594
 *     CU_USER_OBJECT_NO_DESTRUCTOR_SYNC = 1
 * 
 * ctypedef CUuserObject_flags_enum CUuserObject_flags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUuserObjectRetain_flags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUuserObject_flags_enum __pyx_t_4cuda_5ccuda_CUuserObject_flags;

/* "cuda/ccuda.pxd":1599
 *     CU_GRAPH_USER_OBJECT_MOVE = 1
 * 
 * ctypedef CUuserObjectRetain_flags_enum CUuserObjectRetain_flags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUgraphInstantiate_flags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUuserObjectRetain_flags_enum __pyx_t_4cuda_5ccuda_CUuserObjectRetain_flags;

/* "cuda/ccuda.pxd":1604
 *     CUDA_GRAPH_INSTANTIATE_FLAG_AUTO_FREE_ON_LAUNCH = 1
 * 
 * ctypedef CUgraphInstantiate_flags_enum CUgraphInstantiate_flags             # <<<<<<<<<<<<<<
 * 
 * cdef CUresult cuGetErrorString(CUresult error, const char** pStr) nogil except ?CUDA_ERROR_NOT_FOUND
 */
typedef enum __pyx_t_4cuda_5ccuda_CUgraphInstantiate_flags_enum __pyx_t_4cuda_5ccuda_CUgraphInstantiate_flags;

/* "cuda/ccuda.pxd":2318
 *     CU_OUT_CSV = 1
 * 
 * ctypedef CUoutput_mode_enum CUoutput_mode             # <<<<<<<<<<<<<<
 * 
 * cdef CUresult cuProfilerInitialize(const char* configFile, const char* outputFile, CUoutput_mode outputMode) nogil except ?CUDA_ERROR_NOT_FOUND
 */
typedef enum __pyx_t_4cuda_5ccuda_CUoutput_mode_enum __pyx_t_4cuda_5ccuda_CUoutput_mode;

/* "cuda/ccuda.pxd":2335
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLImageKHR             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef void *__pyx_t_4cuda_5ccuda_EGLImageKHR;

/* "cuda/ccuda.pxd":2340
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLStreamKHR             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned int EGLint
 */
typedef void *__pyx_t_4cuda_5ccuda_EGLStreamKHR;

/* "cuda/ccuda.pxd":2347
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLSyncKHR             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpDevice
 */
typedef void *__pyx_t_4cuda_5ccuda_EGLSyncKHR;

/* "cuda/ccuda.pxd":2369
 *     CU_EGL_FRAME_TYPE_PITCH = 1
 * 
 * ctypedef CUeglFrameType_enum CUeglFrameType             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUeglResourceLocationFlags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUeglFrameType_enum __pyx_t_4cuda_5ccuda_CUeglFrameType;

/* "cuda/ccuda.pxd":2375
 *     CU_EGL_RESOURCE_LOCATION_VIDMEM = 1
 * 
 * ctypedef CUeglResourceLocationFlags_enum CUeglResourceLocationFlags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUeglColorFormat_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUeglResourceLocationFlags_enum __pyx_t_4cuda_5ccuda_CUeglResourceLocationFlags;

/* "cuda/ccuda.pxd":2494
 *     CU_EGL_COLOR_FORMAT_MAX = 114
 * 
 * ctypedef CUeglColorFormat_enum CUeglColorFormat             # <<<<<<<<<<<<<<
 * 
 * cdef union _CUeglFrame_v1_CUeglFrame_v1_CUeglFrame_st_frame_u:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUeglColorFormat_enum __pyx_t_4cuda_5ccuda_CUeglColorFormat;

/* "cuda/ccuda.pxd":2496
 * ctypedef CUeglColorFormat_enum CUeglColorFormat
 * 
 * cdef union _CUeglFrame_v1_CUeglFrame_v1_CUeglFrame_st_frame_u:             # <<<<<<<<<<<<<<
 *     CUarray pArray[3]
 *     void* pPitch[3]
 */
union __pyx_t_4cuda_5ccuda__CUeglFrame_v1_CUeglFrame_v1_CUeglFrame_st_frame_u {
  __pyx_t_4cuda_5ccuda_CUarray pArray[3];
  void *pPitch[3];
};

/* "cuda/ccuda.pxd":2500
 *     void* pPitch[3]
 * 
 * cdef struct CUeglFrame_st:             # <<<<<<<<<<<<<<
 *     _CUeglFrame_v1_CUeglFrame_v1_CUeglFrame_st_frame_u frame
 *     unsigned int width
 */
struct __pyx_t_4cuda_5ccuda_CUeglFrame_st {
  union __pyx_t_4cuda_5ccuda__CUeglFrame_v1_CUeglFrame_v1_CUeglFrame_st_frame_u frame;
  unsigned int width;
  unsigned int height;
  unsigned int depth;
  unsigned int pitch;
  unsigned int planeCount;
  unsigned int numChannels;
  __pyx_t_4cuda_5ccuda_CUeglFrameType frameType;
  __pyx_t_4cuda_5ccuda_CUeglColorFormat eglColorFormat;
  __pyx_t_4cuda_5ccuda_CUarray_format cuFormat;
};

/* "cuda/ccuda.pxd":2512
 *     CUarray_format cuFormat
 * 
 * ctypedef CUeglFrame_st CUeglFrame_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUeglFrame_v1 CUeglFrame
 */
typedef struct __pyx_t_4cuda_5ccuda_CUeglFrame_st __pyx_t_4cuda_5ccuda_CUeglFrame_v1;

/* "cuda/ccuda.pxd":2514
 * ctypedef CUeglFrame_st CUeglFrame_v1
 * 
 * ctypedef CUeglFrame_v1 CUeglFrame             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef __pyx_t_4cuda_5ccuda_CUeglFrame_v1 __pyx_t_4cuda_5ccuda_CUeglFrame;

/* "cuda/ccuda.pxd":2519
 *     cdef struct CUeglStreamConnection_st:
 *         pass
 * ctypedef CUeglStreamConnection_st* CUeglStreamConnection             # <<<<<<<<<<<<<<
 * 
 * cdef CUresult cuGraphicsEGLRegisterImage(CUgraphicsResource* pCudaResource, EGLImageKHR image, unsigned int flags) nogil except ?CUDA_ERROR_NOT_FOUND
 */
typedef struct CUeglStreamConnection_st *__pyx_t_4cuda_5ccuda_CUeglStreamConnection;

/* "cuda/ccuda.pxd":2554
 *     CU_GL_DEVICE_LIST_NEXT_FRAME = 3
 * 
 * ctypedef CUGLDeviceList_enum CUGLDeviceList             # <<<<<<<<<<<<<<
 * 
 * cdef CUresult cuGLGetDevices(unsigned int* pCudaDeviceCount, CUdevice* pCudaDevices, unsigned int cudaDeviceCount, CUGLDeviceList deviceList) nogil except ?CUDA_ERROR_NOT_FOUND
 */
typedef enum __pyx_t_4cuda_5ccuda_CUGLDeviceList_enum __pyx_t_4cuda_5ccuda_CUGLDeviceList;

/* "cuda/ccuda.pxd":2563
 *     CU_GL_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 2
 * 
 * ctypedef CUGLmap_flags_enum CUGLmap_flags             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_VERSION = 11060
 */
typedef enum __pyx_t_4cuda_5ccuda_CUGLmap_flags_enum __pyx_t_4cuda_5ccuda_CUGLmap_flags;
struct __pyx_t_4cuda_7ccudart_dim3;
struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc;
struct __pyx_t_4cuda_7ccudart__cudaArraySparseProperties_tileExtent_s;
struct __pyx_t_4cuda_7ccudart_cudaArraySparseProperties;
struct __pyx_t_4cuda_7ccudart_cudaArrayMemoryRequirements;
struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr;
struct __pyx_t_4cuda_7ccudart_cudaExtent;
struct __pyx_t_4cuda_7ccudart_cudaPos;
struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms;
struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DPeerParms;
struct __pyx_t_4cuda_7ccudart_cudaMemsetParams;
struct __pyx_t_4cuda_7ccudart_cudaAccessPolicyWindow;
struct __pyx_t_4cuda_7ccudart_cudaHostNodeParams;
union __pyx_t_4cuda_7ccudart_cudaStreamAttrValue;
union __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrValue;
struct __pyx_t_4cuda_7ccudart__cudaResourceDesc_res_res_array_s;
struct __pyx_t_4cuda_7ccudart__cudaResourceDesc_res_res_mipmap_s;
struct __pyx_t_4cuda_7ccudart__cudaResourceDesc_res_res_linear_s;
struct __pyx_t_4cuda_7ccudart__cudaResourceDesc_res_res_pitch2D_s;
union __pyx_t_4cuda_7ccudart__cudaResourceDesc_res_u;
struct __pyx_t_4cuda_7ccudart_cudaResourceDesc;
struct __pyx_t_4cuda_7ccudart_cudaResourceViewDesc;
struct __pyx_t_4cuda_7ccudart_cudaPointerAttributes;
struct __pyx_t_4cuda_7ccudart_cudaFuncAttributes;
struct __pyx_t_4cuda_7ccudart_cudaMemLocation;
struct __pyx_t_4cuda_7ccudart_cudaMemAccessDesc;
struct __pyx_t_4cuda_7ccudart_cudaMemPoolProps;
struct __pyx_t_4cuda_7ccudart_cudaMemPoolPtrExportData;
struct __pyx_t_4cuda_7ccudart_cudaMemAllocNodeParams;
struct __pyx_t_4cuda_7ccudart_CUuuid_st;
struct __pyx_t_4cuda_7ccudart_cudaDeviceProp;
struct __pyx_t_4cuda_7ccudart_cudaIpcEventHandle_st;
struct __pyx_t_4cuda_7ccudart_cudaIpcMemHandle_st;
struct __pyx_t_4cuda_7ccudart__cudaExternalMemoryHandleDesc_handle_handle_win32_s;
union __pyx_t_4cuda_7ccudart__cudaExternalMemoryHandleDesc_handle_u;
struct __pyx_t_4cuda_7ccudart_cudaExternalMemoryHandleDesc;
struct __pyx_t_4cuda_7ccudart_cudaExternalMemoryBufferDesc;
struct __pyx_t_4cuda_7ccudart_cudaExternalMemoryMipmappedArrayDesc;
struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreHandleDesc_handle_handle_win32_s;
union __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreHandleDesc_handle_u;
struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreHandleDesc;
struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreSignalParams_params_params_fence_s;
union __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreSignalParams_params_params_nvSciSync_u;
struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreSignalParams_params_params_keyedMutex_s;
struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreSignalParams_params_s;
struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreSignalParams;
struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreWaitParams_params_params_fence_s;
union __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreWaitParams_params_params_nvSciSync_u;
struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreWaitParams_params_params_keyedMutex_s;
struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreWaitParams_params_s;
struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreWaitParams;
struct __pyx_t_4cuda_7ccudart_cudaKernelNodeParams;
struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreSignalNodeParams;
struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreWaitNodeParams;
struct __pyx_t_4cuda_7ccudart_cudaTextureDesc;
struct __pyx_t_4cuda_7ccudart_cudaEglPlaneDesc_st;
union __pyx_t_4cuda_7ccudart__cudaEglFrame_cudaEglFrame_cudaEglFrame_st_frame_u;
struct __pyx_t_4cuda_7ccudart_cudaEglFrame_st;

/* "cuda/ccudart.pxd":9
 * # is strictly prohibited.
 * 
 * cdef enum cudaRoundMode:             # <<<<<<<<<<<<<<
 *     cudaRoundNearest = 0
 *     cudaRoundZero = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaRoundMode {
  __pyx_e_4cuda_7ccudart_cudaRoundNearest = 0,
  __pyx_e_4cuda_7ccudart_cudaRoundZero = 1,
  __pyx_e_4cuda_7ccudart_cudaRoundPosInf = 2,
  __pyx_e_4cuda_7ccudart_cudaRoundMinInf = 3
};

/* "cuda/ccudart.pxd":20
 *     unsigned int z
 * 
 * cdef enum cudaError:             # <<<<<<<<<<<<<<
 *     cudaSuccess = 0
 *     cudaErrorInvalidValue = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaError {
  __pyx_e_4cuda_7ccudart_cudaSuccess = 0,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidValue = 1,
  __pyx_e_4cuda_7ccudart_cudaErrorMemoryAllocation = 2,
  __pyx_e_4cuda_7ccudart_cudaErrorInitializationError = 3,
  __pyx_e_4cuda_7ccudart_cudaErrorCudartUnloading = 4,
  __pyx_e_4cuda_7ccudart_cudaErrorProfilerDisabled = 5,
  __pyx_e_4cuda_7ccudart_cudaErrorProfilerNotInitialized = 6,
  __pyx_e_4cuda_7ccudart_cudaErrorProfilerAlreadyStarted = 7,
  __pyx_e_4cuda_7ccudart_cudaErrorProfilerAlreadyStopped = 8,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidConfiguration = 9,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidPitchValue = 12,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidSymbol = 13,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidHostPointer = 16,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidDevicePointer = 17,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidTexture = 18,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidTextureBinding = 19,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidChannelDescriptor = 20,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidMemcpyDirection = 21,
  __pyx_e_4cuda_7ccudart_cudaErrorAddressOfConstant = 22,
  __pyx_e_4cuda_7ccudart_cudaErrorTextureFetchFailed = 23,
  __pyx_e_4cuda_7ccudart_cudaErrorTextureNotBound = 24,
  __pyx_e_4cuda_7ccudart_cudaErrorSynchronizationError = 25,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidFilterSetting = 26,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidNormSetting = 27,
  __pyx_e_4cuda_7ccudart_cudaErrorMixedDeviceExecution = 28,
  __pyx_e_4cuda_7ccudart_cudaErrorNotYetImplemented = 31,
  __pyx_e_4cuda_7ccudart_cudaErrorMemoryValueTooLarge = 32,
  __pyx_e_4cuda_7ccudart_cudaErrorStubLibrary = 34,
  __pyx_e_4cuda_7ccudart_cudaErrorInsufficientDriver = 35,
  __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver = 36,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidSurface = 37,
  __pyx_e_4cuda_7ccudart_cudaErrorDuplicateVariableName = 43,
  __pyx_e_4cuda_7ccudart_cudaErrorDuplicateTextureName = 44,
  __pyx_e_4cuda_7ccudart_cudaErrorDuplicateSurfaceName = 45,
  __pyx_e_4cuda_7ccudart_cudaErrorDevicesUnavailable = 46,
  __pyx_e_4cuda_7ccudart_cudaErrorIncompatibleDriverContext = 49,
  __pyx_e_4cuda_7ccudart_cudaErrorMissingConfiguration = 52,
  __pyx_e_4cuda_7ccudart_cudaErrorPriorLaunchFailure = 53,
  __pyx_e_4cuda_7ccudart_cudaErrorLaunchMaxDepthExceeded = 65,
  __pyx_e_4cuda_7ccudart_cudaErrorLaunchFileScopedTex = 66,
  __pyx_e_4cuda_7ccudart_cudaErrorLaunchFileScopedSurf = 67,
  __pyx_e_4cuda_7ccudart_cudaErrorSyncDepthExceeded = 68,
  __pyx_e_4cuda_7ccudart_cudaErrorLaunchPendingCountExceeded = 69,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidDeviceFunction = 98,
  __pyx_e_4cuda_7ccudart_cudaErrorNoDevice = 0x64,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidDevice = 0x65,
  __pyx_e_4cuda_7ccudart_cudaErrorDeviceNotLicensed = 0x66,
  __pyx_e_4cuda_7ccudart_cudaErrorSoftwareValidityNotEstablished = 0x67,
  __pyx_e_4cuda_7ccudart_cudaErrorStartupFailure = 0x7F,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidKernelImage = 0xC8,
  __pyx_e_4cuda_7ccudart_cudaErrorDeviceUninitialized = 0xC9,
  __pyx_e_4cuda_7ccudart_cudaErrorMapBufferObjectFailed = 0xCD,
  __pyx_e_4cuda_7ccudart_cudaErrorUnmapBufferObjectFailed = 0xCE,
  __pyx_e_4cuda_7ccudart_cudaErrorArrayIsMapped = 0xCF,
  __pyx_e_4cuda_7ccudart_cudaErrorAlreadyMapped = 0xD0,
  __pyx_e_4cuda_7ccudart_cudaErrorNoKernelImageForDevice = 0xD1,
  __pyx_e_4cuda_7ccudart_cudaErrorAlreadyAcquired = 0xD2,
  __pyx_e_4cuda_7ccudart_cudaErrorNotMapped = 0xD3,
  __pyx_e_4cuda_7ccudart_cudaErrorNotMappedAsArray = 0xD4,
  __pyx_e_4cuda_7ccudart_cudaErrorNotMappedAsPointer = 0xD5,
  __pyx_e_4cuda_7ccudart_cudaErrorECCUncorrectable = 0xD6,
  __pyx_e_4cuda_7ccudart_cudaErrorUnsupportedLimit = 0xD7,
  __pyx_e_4cuda_7ccudart_cudaErrorDeviceAlreadyInUse = 0xD8,
  __pyx_e_4cuda_7ccudart_cudaErrorPeerAccessUnsupported = 0xD9,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidPtx = 0xDA,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidGraphicsContext = 0xDB,
  __pyx_e_4cuda_7ccudart_cudaErrorNvlinkUncorrectable = 0xDC,
  __pyx_e_4cuda_7ccudart_cudaErrorJitCompilerNotFound = 0xDD,
  __pyx_e_4cuda_7ccudart_cudaErrorUnsupportedPtxVersion = 0xDE,
  __pyx_e_4cuda_7ccudart_cudaErrorJitCompilationDisabled = 0xDF,
  __pyx_e_4cuda_7ccudart_cudaErrorUnsupportedExecAffinity = 0xE0,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidSource = 0x12C,
  __pyx_e_4cuda_7ccudart_cudaErrorFileNotFound = 0x12D,
  __pyx_e_4cuda_7ccudart_cudaErrorSharedObjectSymbolNotFound = 0x12E,
  __pyx_e_4cuda_7ccudart_cudaErrorSharedObjectInitFailed = 0x12F,
  __pyx_e_4cuda_7ccudart_cudaErrorOperatingSystem = 0x130,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidResourceHandle = 0x190,
  __pyx_e_4cuda_7ccudart_cudaErrorIllegalState = 0x191,
  __pyx_e_4cuda_7ccudart_cudaErrorSymbolNotFound = 0x1F4,
  __pyx_e_4cuda_7ccudart_cudaErrorNotReady = 0x258,
  __pyx_e_4cuda_7ccudart_cudaErrorIllegalAddress = 0x2BC,
  __pyx_e_4cuda_7ccudart_cudaErrorLaunchOutOfResources = 0x2BD,
  __pyx_e_4cuda_7ccudart_cudaErrorLaunchTimeout = 0x2BE,
  __pyx_e_4cuda_7ccudart_cudaErrorLaunchIncompatibleTexturing = 0x2BF,
  __pyx_e_4cuda_7ccudart_cudaErrorPeerAccessAlreadyEnabled = 0x2C0,
  __pyx_e_4cuda_7ccudart_cudaErrorPeerAccessNotEnabled = 0x2C1,
  __pyx_e_4cuda_7ccudart_cudaErrorSetOnActiveProcess = 0x2C4,
  __pyx_e_4cuda_7ccudart_cudaErrorContextIsDestroyed = 0x2C5,
  __pyx_e_4cuda_7ccudart_cudaErrorAssert = 0x2C6,
  __pyx_e_4cuda_7ccudart_cudaErrorTooManyPeers = 0x2C7,
  __pyx_e_4cuda_7ccudart_cudaErrorHostMemoryAlreadyRegistered = 0x2C8,
  __pyx_e_4cuda_7ccudart_cudaErrorHostMemoryNotRegistered = 0x2C9,
  __pyx_e_4cuda_7ccudart_cudaErrorHardwareStackError = 0x2CA,
  __pyx_e_4cuda_7ccudart_cudaErrorIllegalInstruction = 0x2CB,
  __pyx_e_4cuda_7ccudart_cudaErrorMisalignedAddress = 0x2CC,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidAddressSpace = 0x2CD,
  __pyx_e_4cuda_7ccudart_cudaErrorInvalidPc = 0x2CE,
  __pyx_e_4cuda_7ccudart_cudaErrorLaunchFailure = 0x2CF,
  __pyx_e_4cuda_7ccudart_cudaErrorCooperativeLaunchTooLarge = 0x2D0,
  __pyx_e_4cuda_7ccudart_cudaErrorNotPermitted = 0x320,
  __pyx_e_4cuda_7ccudart_cudaErrorNotSupported = 0x321,
  __pyx_e_4cuda_7ccudart_cudaErrorSystemNotReady = 0x322,
  __pyx_e_4cuda_7ccudart_cudaErrorSystemDriverMismatch = 0x323,
  __pyx_e_4cuda_7ccudart_cudaErrorCompatNotSupportedOnDevice = 0x324,
  __pyx_e_4cuda_7ccudart_cudaErrorMpsConnectionFailed = 0x325,
  __pyx_e_4cuda_7ccudart_cudaErrorMpsRpcFailure = 0x326,
  __pyx_e_4cuda_7ccudart_cudaErrorMpsServerNotReady = 0x327,
  __pyx_e_4cuda_7ccudart_cudaErrorMpsMaxClientsReached = 0x328,
  __pyx_e_4cuda_7ccudart_cudaErrorMpsMaxConnectionsReached = 0x329,
  __pyx_e_4cuda_7ccudart_cudaErrorStreamCaptureUnsupported = 0x384,
  __pyx_e_4cuda_7ccudart_cudaErrorStreamCaptureInvalidated = 0x385,
  __pyx_e_4cuda_7ccudart_cudaErrorStreamCaptureMerge = 0x386,
  __pyx_e_4cuda_7ccudart_cudaErrorStreamCaptureUnmatched = 0x387,
  __pyx_e_4cuda_7ccudart_cudaErrorStreamCaptureUnjoined = 0x388,
  __pyx_e_4cuda_7ccudart_cudaErrorStreamCaptureIsolation = 0x389,
  __pyx_e_4cuda_7ccudart_cudaErrorStreamCaptureImplicit = 0x38A,
  __pyx_e_4cuda_7ccudart_cudaErrorCapturedEvent = 0x38B,
  __pyx_e_4cuda_7ccudart_cudaErrorStreamCaptureWrongThread = 0x38C,
  __pyx_e_4cuda_7ccudart_cudaErrorTimeout = 0x38D,
  __pyx_e_4cuda_7ccudart_cudaErrorGraphExecUpdateFailure = 0x38E,
  __pyx_e_4cuda_7ccudart_cudaErrorExternalDevice = 0x38F,
  __pyx_e_4cuda_7ccudart_cudaErrorUnknown = 0x3E7,
  __pyx_e_4cuda_7ccudart_cudaErrorApiFailureBase = 0x2710
};

/* "cuda/ccudart.pxd":145
 *     cudaErrorApiFailureBase = 10000
 * 
 * cdef enum cudaChannelFormatKind:             # <<<<<<<<<<<<<<
 *     cudaChannelFormatKindSigned = 0
 *     cudaChannelFormatKindUnsigned = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaChannelFormatKind {
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindSigned = 0,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindUnsigned = 1,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindFloat = 2,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindNone = 3,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindNV12 = 4,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindUnsignedNormalized8X1 = 5,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindUnsignedNormalized8X2 = 6,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindUnsignedNormalized8X4 = 7,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindUnsignedNormalized16X1 = 8,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindUnsignedNormalized16X2 = 9,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindUnsignedNormalized16X4 = 10,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindSignedNormalized8X1 = 11,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindSignedNormalized8X2 = 12,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindSignedNormalized8X4 = 13,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindSignedNormalized16X1 = 14,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindSignedNormalized16X2 = 15,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindSignedNormalized16X4 = 16,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindUnsignedBlockCompressed1 = 17,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindUnsignedBlockCompressed1SRGB = 18,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindUnsignedBlockCompressed2 = 19,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindUnsignedBlockCompressed2SRGB = 20,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindUnsignedBlockCompressed3 = 21,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindUnsignedBlockCompressed3SRGB = 22,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindUnsignedBlockCompressed4 = 23,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindSignedBlockCompressed4 = 24,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindUnsignedBlockCompressed5 = 25,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindSignedBlockCompressed5 = 26,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindUnsignedBlockCompressed6H = 27,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindSignedBlockCompressed6H = 28,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindUnsignedBlockCompressed7 = 29,
  __pyx_e_4cuda_7ccudart_cudaChannelFormatKindUnsignedBlockCompressed7SRGB = 30
};

/* "cuda/ccudart.pxd":224
 *     unsigned int reserved[4]
 * 
 * cdef enum cudaMemoryType:             # <<<<<<<<<<<<<<
 *     cudaMemoryTypeUnregistered = 0
 *     cudaMemoryTypeHost = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaMemoryType {
  __pyx_e_4cuda_7ccudart_cudaMemoryTypeUnregistered = 0,
  __pyx_e_4cuda_7ccudart_cudaMemoryTypeHost = 1,
  __pyx_e_4cuda_7ccudart_cudaMemoryTypeDevice = 2,
  __pyx_e_4cuda_7ccudart_cudaMemoryTypeManaged = 3
};

/* "cuda/ccudart.pxd":230
 *     cudaMemoryTypeManaged = 3
 * 
 * cdef enum cudaMemcpyKind:             # <<<<<<<<<<<<<<
 *     cudaMemcpyHostToHost = 0
 *     cudaMemcpyHostToDevice = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind {
  __pyx_e_4cuda_7ccudart_cudaMemcpyHostToHost = 0,
  __pyx_e_4cuda_7ccudart_cudaMemcpyHostToDevice = 1,
  __pyx_e_4cuda_7ccudart_cudaMemcpyDeviceToHost = 2,
  __pyx_e_4cuda_7ccudart_cudaMemcpyDeviceToDevice = 3,
  __pyx_e_4cuda_7ccudart_cudaMemcpyDefault = 4
};

/* "cuda/ccudart.pxd":282
 *     size_t height
 * 
 * cdef enum cudaAccessProperty:             # <<<<<<<<<<<<<<
 *     cudaAccessPropertyNormal = 0
 *     cudaAccessPropertyStreaming = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaAccessProperty {
  __pyx_e_4cuda_7ccudart_cudaAccessPropertyNormal = 0,
  __pyx_e_4cuda_7ccudart_cudaAccessPropertyStreaming = 1,
  __pyx_e_4cuda_7ccudart_cudaAccessPropertyPersisting = 2
};

/* "cuda/ccudart.pxd":300
 *     void* userData
 * 
 * cdef enum cudaStreamCaptureStatus:             # <<<<<<<<<<<<<<
 *     cudaStreamCaptureStatusNone = 0
 *     cudaStreamCaptureStatusActive = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaStreamCaptureStatus {
  __pyx_e_4cuda_7ccudart_cudaStreamCaptureStatusNone = 0,
  __pyx_e_4cuda_7ccudart_cudaStreamCaptureStatusActive = 1,
  __pyx_e_4cuda_7ccudart_cudaStreamCaptureStatusInvalidated = 2
};

/* "cuda/ccudart.pxd":305
 *     cudaStreamCaptureStatusInvalidated = 2
 * 
 * cdef enum cudaStreamCaptureMode:             # <<<<<<<<<<<<<<
 *     cudaStreamCaptureModeGlobal = 0
 *     cudaStreamCaptureModeThreadLocal = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaStreamCaptureMode {
  __pyx_e_4cuda_7ccudart_cudaStreamCaptureModeGlobal = 0,
  __pyx_e_4cuda_7ccudart_cudaStreamCaptureModeThreadLocal = 1,
  __pyx_e_4cuda_7ccudart_cudaStreamCaptureModeRelaxed = 2
};

/* "cuda/ccudart.pxd":310
 *     cudaStreamCaptureModeRelaxed = 2
 * 
 * cdef enum cudaSynchronizationPolicy:             # <<<<<<<<<<<<<<
 *     cudaSyncPolicyAuto = 1
 *     cudaSyncPolicySpin = 2
 */
enum __pyx_t_4cuda_7ccudart_cudaSynchronizationPolicy {
  __pyx_e_4cuda_7ccudart_cudaSyncPolicyAuto = 1,
  __pyx_e_4cuda_7ccudart_cudaSyncPolicySpin = 2,
  __pyx_e_4cuda_7ccudart_cudaSyncPolicyYield = 3,
  __pyx_e_4cuda_7ccudart_cudaSyncPolicyBlockingSync = 4
};

/* "cuda/ccudart.pxd":316
 *     cudaSyncPolicyBlockingSync = 4
 * 
 * cdef enum cudaStreamAttrID:             # <<<<<<<<<<<<<<
 *     cudaStreamAttributeAccessPolicyWindow = 1
 *     cudaStreamAttributeSynchronizationPolicy = 3
 */
enum __pyx_t_4cuda_7ccudart_cudaStreamAttrID {
  __pyx_e_4cuda_7ccudart_cudaStreamAttributeAccessPolicyWindow = 1,
  __pyx_e_4cuda_7ccudart_cudaStreamAttributeSynchronizationPolicy = 3
};

/* "cuda/ccudart.pxd":324
 *     cudaSynchronizationPolicy syncPolicy
 * 
 * cdef enum cudaStreamUpdateCaptureDependenciesFlags:             # <<<<<<<<<<<<<<
 *     cudaStreamAddCaptureDependencies = 0
 *     cudaStreamSetCaptureDependencies = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaStreamUpdateCaptureDependenciesFlags {
  __pyx_e_4cuda_7ccudart_cudaStreamAddCaptureDependencies = 0,
  __pyx_e_4cuda_7ccudart_cudaStreamSetCaptureDependencies = 1
};

/* "cuda/ccudart.pxd":328
 *     cudaStreamSetCaptureDependencies = 1
 * 
 * cdef enum cudaUserObjectFlags:             # <<<<<<<<<<<<<<
 *     cudaUserObjectNoDestructorSync = 1
 * 
 */
enum __pyx_t_4cuda_7ccudart_cudaUserObjectFlags {
  __pyx_e_4cuda_7ccudart_cudaUserObjectNoDestructorSync = 1
};

/* "cuda/ccudart.pxd":331
 *     cudaUserObjectNoDestructorSync = 1
 * 
 * cdef enum cudaUserObjectRetainFlags:             # <<<<<<<<<<<<<<
 *     cudaGraphUserObjectMove = 1
 * 
 */
enum __pyx_t_4cuda_7ccudart_cudaUserObjectRetainFlags {
  __pyx_e_4cuda_7ccudart_cudaGraphUserObjectMove = 1
};

/* "cuda/ccudart.pxd":335
 * 
 * 
 * cdef enum cudaGraphicsRegisterFlags:             # <<<<<<<<<<<<<<
 *     cudaGraphicsRegisterFlagsNone = 0
 *     cudaGraphicsRegisterFlagsReadOnly = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaGraphicsRegisterFlags {
  __pyx_e_4cuda_7ccudart_cudaGraphicsRegisterFlagsNone = 0,
  __pyx_e_4cuda_7ccudart_cudaGraphicsRegisterFlagsReadOnly = 1,
  __pyx_e_4cuda_7ccudart_cudaGraphicsRegisterFlagsWriteDiscard = 2,
  __pyx_e_4cuda_7ccudart_cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,
  __pyx_e_4cuda_7ccudart_cudaGraphicsRegisterFlagsTextureGather = 8
};

/* "cuda/ccudart.pxd":342
 *     cudaGraphicsRegisterFlagsTextureGather = 8
 * 
 * cdef enum cudaGraphicsMapFlags:             # <<<<<<<<<<<<<<
 *     cudaGraphicsMapFlagsNone = 0
 *     cudaGraphicsMapFlagsReadOnly = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaGraphicsMapFlags {
  __pyx_e_4cuda_7ccudart_cudaGraphicsMapFlagsNone = 0,
  __pyx_e_4cuda_7ccudart_cudaGraphicsMapFlagsReadOnly = 1,
  __pyx_e_4cuda_7ccudart_cudaGraphicsMapFlagsWriteDiscard = 2
};

/* "cuda/ccudart.pxd":347
 *     cudaGraphicsMapFlagsWriteDiscard = 2
 * 
 * cdef enum cudaGraphicsCubeFace:             # <<<<<<<<<<<<<<
 *     cudaGraphicsCubeFacePositiveX = 0
 *     cudaGraphicsCubeFaceNegativeX = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaGraphicsCubeFace {
  __pyx_e_4cuda_7ccudart_cudaGraphicsCubeFacePositiveX = 0,
  __pyx_e_4cuda_7ccudart_cudaGraphicsCubeFaceNegativeX = 1,
  __pyx_e_4cuda_7ccudart_cudaGraphicsCubeFacePositiveY = 2,
  __pyx_e_4cuda_7ccudart_cudaGraphicsCubeFaceNegativeY = 3,
  __pyx_e_4cuda_7ccudart_cudaGraphicsCubeFacePositiveZ = 4,
  __pyx_e_4cuda_7ccudart_cudaGraphicsCubeFaceNegativeZ = 5
};

/* "cuda/ccudart.pxd":355
 *     cudaGraphicsCubeFaceNegativeZ = 5
 * 
 * cdef enum cudaKernelNodeAttrID:             # <<<<<<<<<<<<<<
 *     cudaKernelNodeAttributeAccessPolicyWindow = 1
 *     cudaKernelNodeAttributeCooperative = 2
 */
enum __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrID {
  __pyx_e_4cuda_7ccudart_cudaKernelNodeAttributeAccessPolicyWindow = 1,
  __pyx_e_4cuda_7ccudart_cudaKernelNodeAttributeCooperative = 2
};

/* "cuda/ccudart.pxd":363
 *     int cooperative
 * 
 * cdef enum cudaResourceType:             # <<<<<<<<<<<<<<
 *     cudaResourceTypeArray = 0
 *     cudaResourceTypeMipmappedArray = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaResourceType {
  __pyx_e_4cuda_7ccudart_cudaResourceTypeArray = 0,
  __pyx_e_4cuda_7ccudart_cudaResourceTypeMipmappedArray = 1,
  __pyx_e_4cuda_7ccudart_cudaResourceTypeLinear = 2,
  __pyx_e_4cuda_7ccudart_cudaResourceTypePitch2D = 3
};

/* "cuda/ccudart.pxd":369
 *     cudaResourceTypePitch2D = 3
 * 
 * cdef enum cudaResourceViewFormat:             # <<<<<<<<<<<<<<
 *     cudaResViewFormatNone = 0
 *     cudaResViewFormatUnsignedChar1 = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaResourceViewFormat {
  __pyx_e_4cuda_7ccudart_cudaResViewFormatNone = 0,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatUnsignedChar1 = 1,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatUnsignedChar2 = 2,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatUnsignedChar4 = 3,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatSignedChar1 = 4,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatSignedChar2 = 5,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatSignedChar4 = 6,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatUnsignedShort1 = 7,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatUnsignedShort2 = 8,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatUnsignedShort4 = 9,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatSignedShort1 = 10,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatSignedShort2 = 11,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatSignedShort4 = 12,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatUnsignedInt1 = 13,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatUnsignedInt2 = 14,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatUnsignedInt4 = 15,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatSignedInt1 = 16,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatSignedInt2 = 17,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatSignedInt4 = 18,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatHalf1 = 19,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatHalf2 = 20,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatHalf4 = 21,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatFloat1 = 22,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatFloat2 = 23,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatFloat4 = 24,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatUnsignedBlockCompressed1 = 25,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatUnsignedBlockCompressed2 = 26,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatUnsignedBlockCompressed3 = 27,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatUnsignedBlockCompressed4 = 28,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatSignedBlockCompressed4 = 29,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatUnsignedBlockCompressed5 = 30,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatSignedBlockCompressed5 = 31,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatUnsignedBlockCompressed6H = 32,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatSignedBlockCompressed6H = 33,
  __pyx_e_4cuda_7ccudart_cudaResViewFormatUnsignedBlockCompressed7 = 34
};

/* "cuda/ccudart.pxd":462
 *     int preferredShmemCarveout
 * 
 * cdef enum cudaFuncAttribute:             # <<<<<<<<<<<<<<
 *     cudaFuncAttributeMaxDynamicSharedMemorySize = 8
 *     cudaFuncAttributePreferredSharedMemoryCarveout = 9
 */
enum __pyx_t_4cuda_7ccudart_cudaFuncAttribute {
  __pyx_e_4cuda_7ccudart_cudaFuncAttributeMaxDynamicSharedMemorySize = 8,
  __pyx_e_4cuda_7ccudart_cudaFuncAttributePreferredSharedMemoryCarveout = 9,
  __pyx_e_4cuda_7ccudart_cudaFuncAttributeMax = 10
};

/* "cuda/ccudart.pxd":467
 *     cudaFuncAttributeMax = 10
 * 
 * cdef enum cudaFuncCache:             # <<<<<<<<<<<<<<
 *     cudaFuncCachePreferNone = 0
 *     cudaFuncCachePreferShared = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaFuncCache {
  __pyx_e_4cuda_7ccudart_cudaFuncCachePreferNone = 0,
  __pyx_e_4cuda_7ccudart_cudaFuncCachePreferShared = 1,
  __pyx_e_4cuda_7ccudart_cudaFuncCachePreferL1 = 2,
  __pyx_e_4cuda_7ccudart_cudaFuncCachePreferEqual = 3
};

/* "cuda/ccudart.pxd":473
 *     cudaFuncCachePreferEqual = 3
 * 
 * cdef enum cudaSharedMemConfig:             # <<<<<<<<<<<<<<
 *     cudaSharedMemBankSizeDefault = 0
 *     cudaSharedMemBankSizeFourByte = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaSharedMemConfig {
  __pyx_e_4cuda_7ccudart_cudaSharedMemBankSizeDefault = 0,
  __pyx_e_4cuda_7ccudart_cudaSharedMemBankSizeFourByte = 1,
  __pyx_e_4cuda_7ccudart_cudaSharedMemBankSizeEightByte = 2
};

/* "cuda/ccudart.pxd":478
 *     cudaSharedMemBankSizeEightByte = 2
 * 
 * cdef enum cudaSharedCarveout:             # <<<<<<<<<<<<<<
 *     cudaSharedmemCarveoutDefault = -1
 *     cudaSharedmemCarveoutMaxShared = 100
 */
enum __pyx_t_4cuda_7ccudart_cudaSharedCarveout {
  __pyx_e_4cuda_7ccudart_cudaSharedmemCarveoutDefault = -1L,
  __pyx_e_4cuda_7ccudart_cudaSharedmemCarveoutMaxShared = 0x64,
  __pyx_e_4cuda_7ccudart_cudaSharedmemCarveoutMaxL1 = 0
};

/* "cuda/ccudart.pxd":483
 *     cudaSharedmemCarveoutMaxL1 = 0
 * 
 * cdef enum cudaComputeMode:             # <<<<<<<<<<<<<<
 *     cudaComputeModeDefault = 0
 *     cudaComputeModeExclusive = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaComputeMode {
  __pyx_e_4cuda_7ccudart_cudaComputeModeDefault = 0,
  __pyx_e_4cuda_7ccudart_cudaComputeModeExclusive = 1,
  __pyx_e_4cuda_7ccudart_cudaComputeModeProhibited = 2,
  __pyx_e_4cuda_7ccudart_cudaComputeModeExclusiveProcess = 3
};

/* "cuda/ccudart.pxd":489
 *     cudaComputeModeExclusiveProcess = 3
 * 
 * cdef enum cudaLimit:             # <<<<<<<<<<<<<<
 *     cudaLimitStackSize = 0
 *     cudaLimitPrintfFifoSize = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaLimit {
  __pyx_e_4cuda_7ccudart_cudaLimitStackSize = 0,
  __pyx_e_4cuda_7ccudart_cudaLimitPrintfFifoSize = 1,
  __pyx_e_4cuda_7ccudart_cudaLimitMallocHeapSize = 2,
  __pyx_e_4cuda_7ccudart_cudaLimitDevRuntimeSyncDepth = 3,
  __pyx_e_4cuda_7ccudart_cudaLimitDevRuntimePendingLaunchCount = 4,
  __pyx_e_4cuda_7ccudart_cudaLimitMaxL2FetchGranularity = 5,
  __pyx_e_4cuda_7ccudart_cudaLimitPersistingL2CacheSize = 6
};

/* "cuda/ccudart.pxd":498
 *     cudaLimitPersistingL2CacheSize = 6
 * 
 * cdef enum cudaMemoryAdvise:             # <<<<<<<<<<<<<<
 *     cudaMemAdviseSetReadMostly = 1
 *     cudaMemAdviseUnsetReadMostly = 2
 */
enum __pyx_t_4cuda_7ccudart_cudaMemoryAdvise {
  __pyx_e_4cuda_7ccudart_cudaMemAdviseSetReadMostly = 1,
  __pyx_e_4cuda_7ccudart_cudaMemAdviseUnsetReadMostly = 2,
  __pyx_e_4cuda_7ccudart_cudaMemAdviseSetPreferredLocation = 3,
  __pyx_e_4cuda_7ccudart_cudaMemAdviseUnsetPreferredLocation = 4,
  __pyx_e_4cuda_7ccudart_cudaMemAdviseSetAccessedBy = 5,
  __pyx_e_4cuda_7ccudart_cudaMemAdviseUnsetAccessedBy = 6
};

/* "cuda/ccudart.pxd":506
 *     cudaMemAdviseUnsetAccessedBy = 6
 * 
 * cdef enum cudaMemRangeAttribute:             # <<<<<<<<<<<<<<
 *     cudaMemRangeAttributeReadMostly = 1
 *     cudaMemRangeAttributePreferredLocation = 2
 */
enum __pyx_t_4cuda_7ccudart_cudaMemRangeAttribute {
  __pyx_e_4cuda_7ccudart_cudaMemRangeAttributeReadMostly = 1,
  __pyx_e_4cuda_7ccudart_cudaMemRangeAttributePreferredLocation = 2,
  __pyx_e_4cuda_7ccudart_cudaMemRangeAttributeAccessedBy = 3,
  __pyx_e_4cuda_7ccudart_cudaMemRangeAttributeLastPrefetchLocation = 4
};

/* "cuda/ccudart.pxd":512
 *     cudaMemRangeAttributeLastPrefetchLocation = 4
 * 
 * cdef enum cudaOutputMode:             # <<<<<<<<<<<<<<
 *     cudaKeyValuePair = 0
 *     cudaCSV = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaOutputMode {
  __pyx_e_4cuda_7ccudart_cudaKeyValuePair = 0,
  __pyx_e_4cuda_7ccudart_cudaCSV = 1
};

/* "cuda/ccudart.pxd":516
 *     cudaCSV = 1
 * 
 * cdef enum cudaFlushGPUDirectRDMAWritesOptions:             # <<<<<<<<<<<<<<
 *     cudaFlushGPUDirectRDMAWritesOptionHost = 1
 *     cudaFlushGPUDirectRDMAWritesOptionMemOps = 2
 */
enum __pyx_t_4cuda_7ccudart_cudaFlushGPUDirectRDMAWritesOptions {
  __pyx_e_4cuda_7ccudart_cudaFlushGPUDirectRDMAWritesOptionHost = 1,
  __pyx_e_4cuda_7ccudart_cudaFlushGPUDirectRDMAWritesOptionMemOps = 2
};

/* "cuda/ccudart.pxd":520
 *     cudaFlushGPUDirectRDMAWritesOptionMemOps = 2
 * 
 * cdef enum cudaGPUDirectRDMAWritesOrdering:             # <<<<<<<<<<<<<<
 *     cudaGPUDirectRDMAWritesOrderingNone = 0
 *     cudaGPUDirectRDMAWritesOrderingOwner = 100
 */
enum __pyx_t_4cuda_7ccudart_cudaGPUDirectRDMAWritesOrdering {
  __pyx_e_4cuda_7ccudart_cudaGPUDirectRDMAWritesOrderingNone = 0,
  __pyx_e_4cuda_7ccudart_cudaGPUDirectRDMAWritesOrderingOwner = 0x64,
  __pyx_e_4cuda_7ccudart_cudaGPUDirectRDMAWritesOrderingAllDevices = 0xC8
};

/* "cuda/ccudart.pxd":525
 *     cudaGPUDirectRDMAWritesOrderingAllDevices = 200
 * 
 * cdef enum cudaFlushGPUDirectRDMAWritesScope:             # <<<<<<<<<<<<<<
 *     cudaFlushGPUDirectRDMAWritesToOwner = 100
 *     cudaFlushGPUDirectRDMAWritesToAllDevices = 200
 */
enum __pyx_t_4cuda_7ccudart_cudaFlushGPUDirectRDMAWritesScope {
  __pyx_e_4cuda_7ccudart_cudaFlushGPUDirectRDMAWritesToOwner = 0x64,
  __pyx_e_4cuda_7ccudart_cudaFlushGPUDirectRDMAWritesToAllDevices = 0xC8
};

/* "cuda/ccudart.pxd":529
 *     cudaFlushGPUDirectRDMAWritesToAllDevices = 200
 * 
 * cdef enum cudaFlushGPUDirectRDMAWritesTarget:             # <<<<<<<<<<<<<<
 *     cudaFlushGPUDirectRDMAWritesTargetCurrentDevice = 0
 * 
 */
enum __pyx_t_4cuda_7ccudart_cudaFlushGPUDirectRDMAWritesTarget {
  __pyx_e_4cuda_7ccudart_cudaFlushGPUDirectRDMAWritesTargetCurrentDevice = 0
};

/* "cuda/ccudart.pxd":532
 *     cudaFlushGPUDirectRDMAWritesTargetCurrentDevice = 0
 * 
 * cdef enum cudaDeviceAttr:             # <<<<<<<<<<<<<<
 *     cudaDevAttrMaxThreadsPerBlock = 1
 *     cudaDevAttrMaxBlockDimX = 2
 */
enum __pyx_t_4cuda_7ccudart_cudaDeviceAttr {
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxThreadsPerBlock = 1,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxBlockDimX = 2,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxBlockDimY = 3,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxBlockDimZ = 4,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxGridDimX = 5,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxGridDimY = 6,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxGridDimZ = 7,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxSharedMemoryPerBlock = 8,
  __pyx_e_4cuda_7ccudart_cudaDevAttrTotalConstantMemory = 9,
  __pyx_e_4cuda_7ccudart_cudaDevAttrWarpSize = 10,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxPitch = 11,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxRegistersPerBlock = 12,
  __pyx_e_4cuda_7ccudart_cudaDevAttrClockRate = 13,
  __pyx_e_4cuda_7ccudart_cudaDevAttrTextureAlignment = 14,
  __pyx_e_4cuda_7ccudart_cudaDevAttrGpuOverlap = 15,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMultiProcessorCount = 16,
  __pyx_e_4cuda_7ccudart_cudaDevAttrKernelExecTimeout = 17,
  __pyx_e_4cuda_7ccudart_cudaDevAttrIntegrated = 18,
  __pyx_e_4cuda_7ccudart_cudaDevAttrCanMapHostMemory = 19,
  __pyx_e_4cuda_7ccudart_cudaDevAttrComputeMode = 20,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture1DWidth = 21,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture2DWidth = 22,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture2DHeight = 23,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture3DWidth = 24,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture3DHeight = 25,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture3DDepth = 26,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture2DLayeredWidth = 27,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture2DLayeredHeight = 28,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture2DLayeredLayers = 29,
  __pyx_e_4cuda_7ccudart_cudaDevAttrSurfaceAlignment = 30,
  __pyx_e_4cuda_7ccudart_cudaDevAttrConcurrentKernels = 31,
  __pyx_e_4cuda_7ccudart_cudaDevAttrEccEnabled = 32,
  __pyx_e_4cuda_7ccudart_cudaDevAttrPciBusId = 33,
  __pyx_e_4cuda_7ccudart_cudaDevAttrPciDeviceId = 34,
  __pyx_e_4cuda_7ccudart_cudaDevAttrTccDriver = 35,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMemoryClockRate = 36,
  __pyx_e_4cuda_7ccudart_cudaDevAttrGlobalMemoryBusWidth = 37,
  __pyx_e_4cuda_7ccudart_cudaDevAttrL2CacheSize = 38,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxThreadsPerMultiProcessor = 39,
  __pyx_e_4cuda_7ccudart_cudaDevAttrAsyncEngineCount = 40,
  __pyx_e_4cuda_7ccudart_cudaDevAttrUnifiedAddressing = 41,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture1DLayeredWidth = 42,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture1DLayeredLayers = 43,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture2DGatherWidth = 45,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture2DGatherHeight = 46,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture3DWidthAlt = 47,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture3DHeightAlt = 48,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture3DDepthAlt = 49,
  __pyx_e_4cuda_7ccudart_cudaDevAttrPciDomainId = 50,
  __pyx_e_4cuda_7ccudart_cudaDevAttrTexturePitchAlignment = 51,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTextureCubemapWidth = 52,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTextureCubemapLayeredWidth = 53,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTextureCubemapLayeredLayers = 54,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxSurface1DWidth = 55,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxSurface2DWidth = 56,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxSurface2DHeight = 57,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxSurface3DWidth = 58,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxSurface3DHeight = 59,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxSurface3DDepth = 60,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxSurface1DLayeredWidth = 61,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxSurface1DLayeredLayers = 62,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxSurface2DLayeredWidth = 63,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxSurface2DLayeredHeight = 64,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxSurface2DLayeredLayers = 65,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxSurfaceCubemapWidth = 66,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture1DLinearWidth = 69,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture2DLinearWidth = 70,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture2DLinearHeight = 71,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture2DLinearPitch = 72,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture2DMipmappedWidth = 73,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture2DMipmappedHeight = 74,
  __pyx_e_4cuda_7ccudart_cudaDevAttrComputeCapabilityMajor = 75,
  __pyx_e_4cuda_7ccudart_cudaDevAttrComputeCapabilityMinor = 76,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTexture1DMipmappedWidth = 77,
  __pyx_e_4cuda_7ccudart_cudaDevAttrStreamPrioritiesSupported = 78,
  __pyx_e_4cuda_7ccudart_cudaDevAttrGlobalL1CacheSupported = 79,
  __pyx_e_4cuda_7ccudart_cudaDevAttrLocalL1CacheSupported = 80,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxRegistersPerMultiprocessor = 82,
  __pyx_e_4cuda_7ccudart_cudaDevAttrManagedMemory = 83,
  __pyx_e_4cuda_7ccudart_cudaDevAttrIsMultiGpuBoard = 84,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMultiGpuBoardGroupID = 85,
  __pyx_e_4cuda_7ccudart_cudaDevAttrHostNativeAtomicSupported = 86,
  __pyx_e_4cuda_7ccudart_cudaDevAttrSingleToDoublePrecisionPerfRatio = 87,
  __pyx_e_4cuda_7ccudart_cudaDevAttrPageableMemoryAccess = 88,
  __pyx_e_4cuda_7ccudart_cudaDevAttrConcurrentManagedAccess = 89,
  __pyx_e_4cuda_7ccudart_cudaDevAttrComputePreemptionSupported = 90,
  __pyx_e_4cuda_7ccudart_cudaDevAttrCanUseHostPointerForRegisteredMem = 91,
  __pyx_e_4cuda_7ccudart_cudaDevAttrReserved92 = 92,
  __pyx_e_4cuda_7ccudart_cudaDevAttrReserved93 = 93,
  __pyx_e_4cuda_7ccudart_cudaDevAttrReserved94 = 94,
  __pyx_e_4cuda_7ccudart_cudaDevAttrCooperativeLaunch = 95,
  __pyx_e_4cuda_7ccudart_cudaDevAttrCooperativeMultiDeviceLaunch = 96,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxSharedMemoryPerBlockOptin = 97,
  __pyx_e_4cuda_7ccudart_cudaDevAttrCanFlushRemoteWrites = 98,
  __pyx_e_4cuda_7ccudart_cudaDevAttrHostRegisterSupported = 99,
  __pyx_e_4cuda_7ccudart_cudaDevAttrPageableMemoryAccessUsesHostPageTables = 0x64,
  __pyx_e_4cuda_7ccudart_cudaDevAttrDirectManagedMemAccessFromHost = 0x65,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxBlocksPerMultiprocessor = 0x6A,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxPersistingL2CacheSize = 0x6C,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxAccessPolicyWindowSize = 0x6D,
  __pyx_e_4cuda_7ccudart_cudaDevAttrReservedSharedMemoryPerBlock = 0x6F,
  __pyx_e_4cuda_7ccudart_cudaDevAttrSparseCudaArraySupported = 0x70,
  __pyx_e_4cuda_7ccudart_cudaDevAttrHostRegisterReadOnlySupported = 0x71,
  __pyx_e_4cuda_7ccudart_cudaDevAttrTimelineSemaphoreInteropSupported = 0x72,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMaxTimelineSemaphoreInteropSupported = 0x72,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMemoryPoolsSupported = 0x73,
  __pyx_e_4cuda_7ccudart_cudaDevAttrGPUDirectRDMASupported = 0x74,
  __pyx_e_4cuda_7ccudart_cudaDevAttrGPUDirectRDMAFlushWritesOptions = 0x75,
  __pyx_e_4cuda_7ccudart_cudaDevAttrGPUDirectRDMAWritesOrdering = 0x76,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMemoryPoolSupportedHandleTypes = 0x77,
  __pyx_e_4cuda_7ccudart_cudaDevAttrDeferredMappingCudaArraySupported = 0x79,
  __pyx_e_4cuda_7ccudart_cudaDevAttrMax = 0x7A
};

/* "cuda/ccudart.pxd":649
 *     cudaDevAttrMax = 122
 * 
 * cdef enum cudaMemPoolAttr:             # <<<<<<<<<<<<<<
 *     cudaMemPoolReuseFollowEventDependencies = 1
 *     cudaMemPoolReuseAllowOpportunistic = 2
 */
enum __pyx_t_4cuda_7ccudart_cudaMemPoolAttr {
  __pyx_e_4cuda_7ccudart_cudaMemPoolReuseFollowEventDependencies = 1,
  __pyx_e_4cuda_7ccudart_cudaMemPoolReuseAllowOpportunistic = 2,
  __pyx_e_4cuda_7ccudart_cudaMemPoolReuseAllowInternalDependencies = 3,
  __pyx_e_4cuda_7ccudart_cudaMemPoolAttrReleaseThreshold = 4,
  __pyx_e_4cuda_7ccudart_cudaMemPoolAttrReservedMemCurrent = 5,
  __pyx_e_4cuda_7ccudart_cudaMemPoolAttrReservedMemHigh = 6,
  __pyx_e_4cuda_7ccudart_cudaMemPoolAttrUsedMemCurrent = 7,
  __pyx_e_4cuda_7ccudart_cudaMemPoolAttrUsedMemHigh = 8
};

/* "cuda/ccudart.pxd":659
 *     cudaMemPoolAttrUsedMemHigh = 8
 * 
 * cdef enum cudaMemLocationType:             # <<<<<<<<<<<<<<
 *     cudaMemLocationTypeInvalid = 0
 *     cudaMemLocationTypeDevice = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaMemLocationType {
  __pyx_e_4cuda_7ccudart_cudaMemLocationTypeInvalid = 0,
  __pyx_e_4cuda_7ccudart_cudaMemLocationTypeDevice = 1
};

/* "cuda/ccudart.pxd":667
 *     int id
 * 
 * cdef enum cudaMemAccessFlags:             # <<<<<<<<<<<<<<
 *     cudaMemAccessFlagsProtNone = 0
 *     cudaMemAccessFlagsProtRead = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaMemAccessFlags {
  __pyx_e_4cuda_7ccudart_cudaMemAccessFlagsProtNone = 0,
  __pyx_e_4cuda_7ccudart_cudaMemAccessFlagsProtRead = 1,
  __pyx_e_4cuda_7ccudart_cudaMemAccessFlagsProtReadWrite = 3
};

/* "cuda/ccudart.pxd":676
 *     cudaMemAccessFlags flags
 * 
 * cdef enum cudaMemAllocationType:             # <<<<<<<<<<<<<<
 *     cudaMemAllocationTypeInvalid = 0
 *     cudaMemAllocationTypePinned = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaMemAllocationType {
  __pyx_e_4cuda_7ccudart_cudaMemAllocationTypeInvalid = 0,
  __pyx_e_4cuda_7ccudart_cudaMemAllocationTypePinned = 1,
  __pyx_e_4cuda_7ccudart_cudaMemAllocationTypeMax = 0x7FFFFFFF
};

/* "cuda/ccudart.pxd":681
 *     cudaMemAllocationTypeMax = 2147483647
 * 
 * cdef enum cudaMemAllocationHandleType:             # <<<<<<<<<<<<<<
 *     cudaMemHandleTypeNone = 0
 *     cudaMemHandleTypePosixFileDescriptor = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaMemAllocationHandleType {
  __pyx_e_4cuda_7ccudart_cudaMemHandleTypeNone = 0,
  __pyx_e_4cuda_7ccudart_cudaMemHandleTypePosixFileDescriptor = 1,
  __pyx_e_4cuda_7ccudart_cudaMemHandleTypeWin32 = 2,
  __pyx_e_4cuda_7ccudart_cudaMemHandleTypeWin32Kmt = 4
};

/* "cuda/ccudart.pxd":704
 *     void* dptr
 * 
 * cdef enum cudaGraphMemAttributeType:             # <<<<<<<<<<<<<<
 *     cudaGraphMemAttrUsedMemCurrent = 0
 *     cudaGraphMemAttrUsedMemHigh = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaGraphMemAttributeType {
  __pyx_e_4cuda_7ccudart_cudaGraphMemAttrUsedMemCurrent = 0,
  __pyx_e_4cuda_7ccudart_cudaGraphMemAttrUsedMemHigh = 1,
  __pyx_e_4cuda_7ccudart_cudaGraphMemAttrReservedMemCurrent = 2,
  __pyx_e_4cuda_7ccudart_cudaGraphMemAttrReservedMemHigh = 3
};

/* "cuda/ccudart.pxd":710
 *     cudaGraphMemAttrReservedMemHigh = 3
 * 
 * cdef enum cudaDeviceP2PAttr:             # <<<<<<<<<<<<<<
 *     cudaDevP2PAttrPerformanceRank = 1
 *     cudaDevP2PAttrAccessSupported = 2
 */
enum __pyx_t_4cuda_7ccudart_cudaDeviceP2PAttr {
  __pyx_e_4cuda_7ccudart_cudaDevP2PAttrPerformanceRank = 1,
  __pyx_e_4cuda_7ccudart_cudaDevP2PAttrAccessSupported = 2,
  __pyx_e_4cuda_7ccudart_cudaDevP2PAttrNativeAtomicSupported = 3,
  __pyx_e_4cuda_7ccudart_cudaDevP2PAttrCudaArrayAccessSupported = 4
};

/* "cuda/ccudart.pxd":815
 * ctypedef cudaIpcMemHandle_st cudaIpcMemHandle_t
 * 
 * cdef enum cudaExternalMemoryHandleType:             # <<<<<<<<<<<<<<
 *     cudaExternalMemoryHandleTypeOpaqueFd = 1
 *     cudaExternalMemoryHandleTypeOpaqueWin32 = 2
 */
enum __pyx_t_4cuda_7ccudart_cudaExternalMemoryHandleType {
  __pyx_e_4cuda_7ccudart_cudaExternalMemoryHandleTypeOpaqueFd = 1,
  __pyx_e_4cuda_7ccudart_cudaExternalMemoryHandleTypeOpaqueWin32 = 2,
  __pyx_e_4cuda_7ccudart_cudaExternalMemoryHandleTypeOpaqueWin32Kmt = 3,
  __pyx_e_4cuda_7ccudart_cudaExternalMemoryHandleTypeD3D12Heap = 4,
  __pyx_e_4cuda_7ccudart_cudaExternalMemoryHandleTypeD3D12Resource = 5,
  __pyx_e_4cuda_7ccudart_cudaExternalMemoryHandleTypeD3D11Resource = 6,
  __pyx_e_4cuda_7ccudart_cudaExternalMemoryHandleTypeD3D11ResourceKmt = 7,
  __pyx_e_4cuda_7ccudart_cudaExternalMemoryHandleTypeNvSciBuf = 8
};

/* "cuda/ccudart.pxd":852
 *     unsigned int numLevels
 * 
 * cdef enum cudaExternalSemaphoreHandleType:             # <<<<<<<<<<<<<<
 *     cudaExternalSemaphoreHandleTypeOpaqueFd = 1
 *     cudaExternalSemaphoreHandleTypeOpaqueWin32 = 2
 */
enum __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreHandleType {
  __pyx_e_4cuda_7ccudart_cudaExternalSemaphoreHandleTypeOpaqueFd = 1,
  __pyx_e_4cuda_7ccudart_cudaExternalSemaphoreHandleTypeOpaqueWin32 = 2,
  __pyx_e_4cuda_7ccudart_cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt = 3,
  __pyx_e_4cuda_7ccudart_cudaExternalSemaphoreHandleTypeD3D12Fence = 4,
  __pyx_e_4cuda_7ccudart_cudaExternalSemaphoreHandleTypeD3D11Fence = 5,
  __pyx_e_4cuda_7ccudart_cudaExternalSemaphoreHandleTypeNvSciSync = 6,
  __pyx_e_4cuda_7ccudart_cudaExternalSemaphoreHandleTypeKeyedMutex = 7,
  __pyx_e_4cuda_7ccudart_cudaExternalSemaphoreHandleTypeKeyedMutexKmt = 8,
  __pyx_e_4cuda_7ccudart_cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd = 9,
  __pyx_e_4cuda_7ccudart_cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32 = 10
};

/* "cuda/ccudart.pxd":975
 * ctypedef CUmemPoolHandle_st* cudaMemPool_t
 * 
 * cdef enum cudaCGScope:             # <<<<<<<<<<<<<<
 *     cudaCGScopeInvalid = 0
 *     cudaCGScopeGrid = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaCGScope {
  __pyx_e_4cuda_7ccudart_cudaCGScopeInvalid = 0,
  __pyx_e_4cuda_7ccudart_cudaCGScopeGrid = 1,
  __pyx_e_4cuda_7ccudart_cudaCGScopeMultiGrid = 2
};

/* "cuda/ccudart.pxd":998
 *     unsigned int numExtSems
 * 
 * cdef enum cudaGraphNodeType:             # <<<<<<<<<<<<<<
 *     cudaGraphNodeTypeKernel = 0
 *     cudaGraphNodeTypeMemcpy = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaGraphNodeType {
  __pyx_e_4cuda_7ccudart_cudaGraphNodeTypeKernel = 0,
  __pyx_e_4cuda_7ccudart_cudaGraphNodeTypeMemcpy = 1,
  __pyx_e_4cuda_7ccudart_cudaGraphNodeTypeMemset = 2,
  __pyx_e_4cuda_7ccudart_cudaGraphNodeTypeHost = 3,
  __pyx_e_4cuda_7ccudart_cudaGraphNodeTypeGraph = 4,
  __pyx_e_4cuda_7ccudart_cudaGraphNodeTypeEmpty = 5,
  __pyx_e_4cuda_7ccudart_cudaGraphNodeTypeWaitEvent = 6,
  __pyx_e_4cuda_7ccudart_cudaGraphNodeTypeEventRecord = 7,
  __pyx_e_4cuda_7ccudart_cudaGraphNodeTypeExtSemaphoreSignal = 8,
  __pyx_e_4cuda_7ccudart_cudaGraphNodeTypeExtSemaphoreWait = 9,
  __pyx_e_4cuda_7ccudart_cudaGraphNodeTypeMemAlloc = 10,
  __pyx_e_4cuda_7ccudart_cudaGraphNodeTypeMemFree = 11,
  __pyx_e_4cuda_7ccudart_cudaGraphNodeTypeCount = 12
};

/* "cuda/ccudart.pxd":1018
 * ctypedef CUgraphExec_st* cudaGraphExec_t
 * 
 * cdef enum cudaGraphExecUpdateResult:             # <<<<<<<<<<<<<<
 *     cudaGraphExecUpdateSuccess = 0
 *     cudaGraphExecUpdateError = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaGraphExecUpdateResult {
  __pyx_e_4cuda_7ccudart_cudaGraphExecUpdateSuccess = 0,
  __pyx_e_4cuda_7ccudart_cudaGraphExecUpdateError = 1,
  __pyx_e_4cuda_7ccudart_cudaGraphExecUpdateErrorTopologyChanged = 2,
  __pyx_e_4cuda_7ccudart_cudaGraphExecUpdateErrorNodeTypeChanged = 3,
  __pyx_e_4cuda_7ccudart_cudaGraphExecUpdateErrorFunctionChanged = 4,
  __pyx_e_4cuda_7ccudart_cudaGraphExecUpdateErrorParametersChanged = 5,
  __pyx_e_4cuda_7ccudart_cudaGraphExecUpdateErrorNotSupported = 6,
  __pyx_e_4cuda_7ccudart_cudaGraphExecUpdateErrorUnsupportedFunctionChange = 7,
  __pyx_e_4cuda_7ccudart_cudaGraphExecUpdateErrorAttributesChanged = 8
};

/* "cuda/ccudart.pxd":1029
 *     cudaGraphExecUpdateErrorAttributesChanged = 8
 * 
 * cdef enum cudaGetDriverEntryPointFlags:             # <<<<<<<<<<<<<<
 *     cudaEnableDefault = 0
 *     cudaEnableLegacyStream = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaGetDriverEntryPointFlags {
  __pyx_e_4cuda_7ccudart_cudaEnableDefault = 0,
  __pyx_e_4cuda_7ccudart_cudaEnableLegacyStream = 1,
  __pyx_e_4cuda_7ccudart_cudaEnablePerThreadDefaultStream = 2
};

/* "cuda/ccudart.pxd":1034
 *     cudaEnablePerThreadDefaultStream = 2
 * 
 * cdef enum cudaGraphDebugDotFlags:             # <<<<<<<<<<<<<<
 *     cudaGraphDebugDotFlagsVerbose = 1
 *     cudaGraphDebugDotFlagsKernelNodeParams = 4
 */
enum __pyx_t_4cuda_7ccudart_cudaGraphDebugDotFlags {
  __pyx_e_4cuda_7ccudart_cudaGraphDebugDotFlagsVerbose = 1,
  __pyx_e_4cuda_7ccudart_cudaGraphDebugDotFlagsKernelNodeParams = 4,
  __pyx_e_4cuda_7ccudart_cudaGraphDebugDotFlagsMemcpyNodeParams = 8,
  __pyx_e_4cuda_7ccudart_cudaGraphDebugDotFlagsMemsetNodeParams = 16,
  __pyx_e_4cuda_7ccudart_cudaGraphDebugDotFlagsHostNodeParams = 32,
  __pyx_e_4cuda_7ccudart_cudaGraphDebugDotFlagsEventNodeParams = 64,
  __pyx_e_4cuda_7ccudart_cudaGraphDebugDotFlagsExtSemasSignalNodeParams = 0x80,
  __pyx_e_4cuda_7ccudart_cudaGraphDebugDotFlagsExtSemasWaitNodeParams = 0x100,
  __pyx_e_4cuda_7ccudart_cudaGraphDebugDotFlagsKernelNodeAttributes = 0x200,
  __pyx_e_4cuda_7ccudart_cudaGraphDebugDotFlagsHandles = 0x400
};

/* "cuda/ccudart.pxd":1046
 *     cudaGraphDebugDotFlagsHandles = 1024
 * 
 * cdef enum cudaGraphInstantiateFlags:             # <<<<<<<<<<<<<<
 *     cudaGraphInstantiateFlagAutoFreeOnLaunch = 1
 * 
 */
enum __pyx_t_4cuda_7ccudart_cudaGraphInstantiateFlags {
  __pyx_e_4cuda_7ccudart_cudaGraphInstantiateFlagAutoFreeOnLaunch = 1
};

/* "cuda/ccudart.pxd":1049
 *     cudaGraphInstantiateFlagAutoFreeOnLaunch = 1
 * 
 * cdef enum cudaSurfaceBoundaryMode:             # <<<<<<<<<<<<<<
 *     cudaBoundaryModeZero = 0
 *     cudaBoundaryModeClamp = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaSurfaceBoundaryMode {
  __pyx_e_4cuda_7ccudart_cudaBoundaryModeZero = 0,
  __pyx_e_4cuda_7ccudart_cudaBoundaryModeClamp = 1,
  __pyx_e_4cuda_7ccudart_cudaBoundaryModeTrap = 2
};

/* "cuda/ccudart.pxd":1054
 *     cudaBoundaryModeTrap = 2
 * 
 * cdef enum cudaSurfaceFormatMode:             # <<<<<<<<<<<<<<
 *     cudaFormatModeForced = 0
 *     cudaFormatModeAuto = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaSurfaceFormatMode {
  __pyx_e_4cuda_7ccudart_cudaFormatModeForced = 0,
  __pyx_e_4cuda_7ccudart_cudaFormatModeAuto = 1
};

/* "cuda/ccudart.pxd":1060
 * ctypedef unsigned long long cudaSurfaceObject_t
 * 
 * cdef enum cudaTextureAddressMode:             # <<<<<<<<<<<<<<
 *     cudaAddressModeWrap = 0
 *     cudaAddressModeClamp = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaTextureAddressMode {
  __pyx_e_4cuda_7ccudart_cudaAddressModeWrap = 0,
  __pyx_e_4cuda_7ccudart_cudaAddressModeClamp = 1,
  __pyx_e_4cuda_7ccudart_cudaAddressModeMirror = 2,
  __pyx_e_4cuda_7ccudart_cudaAddressModeBorder = 3
};

/* "cuda/ccudart.pxd":1066
 *     cudaAddressModeBorder = 3
 * 
 * cdef enum cudaTextureFilterMode:             # <<<<<<<<<<<<<<
 *     cudaFilterModePoint = 0
 *     cudaFilterModeLinear = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaTextureFilterMode {
  __pyx_e_4cuda_7ccudart_cudaFilterModePoint = 0,
  __pyx_e_4cuda_7ccudart_cudaFilterModeLinear = 1
};

/* "cuda/ccudart.pxd":1070
 *     cudaFilterModeLinear = 1
 * 
 * cdef enum cudaTextureReadMode:             # <<<<<<<<<<<<<<
 *     cudaReadModeElementType = 0
 *     cudaReadModeNormalizedFloat = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaTextureReadMode {
  __pyx_e_4cuda_7ccudart_cudaReadModeElementType = 0,
  __pyx_e_4cuda_7ccudart_cudaReadModeNormalizedFloat = 1
};

/* "cuda/ccudart.pxd":1091
 * ctypedef unsigned long long cudaTextureObject_t
 * 
 * cdef enum cudaDataType_t:             # <<<<<<<<<<<<<<
 *     CUDA_R_16F = 2
 *     CUDA_C_16F = 6
 */
enum __pyx_t_4cuda_7ccudart_cudaDataType_t {
  __pyx_e_4cuda_7ccudart_CUDA_R_16F = 2,
  __pyx_e_4cuda_7ccudart_CUDA_C_16F = 6,
  __pyx_e_4cuda_7ccudart_CUDA_R_16BF = 14,
  __pyx_e_4cuda_7ccudart_CUDA_C_16BF = 15,
  __pyx_e_4cuda_7ccudart_CUDA_R_32F = 0,
  __pyx_e_4cuda_7ccudart_CUDA_C_32F = 4,
  __pyx_e_4cuda_7ccudart_CUDA_R_64F = 1,
  __pyx_e_4cuda_7ccudart_CUDA_C_64F = 5,
  __pyx_e_4cuda_7ccudart_CUDA_R_4I = 16,
  __pyx_e_4cuda_7ccudart_CUDA_C_4I = 17,
  __pyx_e_4cuda_7ccudart_CUDA_R_4U = 18,
  __pyx_e_4cuda_7ccudart_CUDA_C_4U = 19,
  __pyx_e_4cuda_7ccudart_CUDA_R_8I = 3,
  __pyx_e_4cuda_7ccudart_CUDA_C_8I = 7,
  __pyx_e_4cuda_7ccudart_CUDA_R_8U = 8,
  __pyx_e_4cuda_7ccudart_CUDA_C_8U = 9,
  __pyx_e_4cuda_7ccudart_CUDA_R_16I = 20,
  __pyx_e_4cuda_7ccudart_CUDA_C_16I = 21,
  __pyx_e_4cuda_7ccudart_CUDA_R_16U = 22,
  __pyx_e_4cuda_7ccudart_CUDA_C_16U = 23,
  __pyx_e_4cuda_7ccudart_CUDA_R_32I = 10,
  __pyx_e_4cuda_7ccudart_CUDA_C_32I = 11,
  __pyx_e_4cuda_7ccudart_CUDA_R_32U = 12,
  __pyx_e_4cuda_7ccudart_CUDA_C_32U = 13,
  __pyx_e_4cuda_7ccudart_CUDA_R_64I = 24,
  __pyx_e_4cuda_7ccudart_CUDA_C_64I = 25,
  __pyx_e_4cuda_7ccudart_CUDA_R_64U = 26,
  __pyx_e_4cuda_7ccudart_CUDA_C_64U = 27
};

/* "cuda/ccudart.pxd":1123
 * ctypedef cudaDataType_t cudaDataType
 * 
 * cdef enum libraryPropertyType_t:             # <<<<<<<<<<<<<<
 *     MAJOR_VERSION = 0
 *     MINOR_VERSION = 1
 */
enum __pyx_t_4cuda_7ccudart_libraryPropertyType_t {
  __pyx_e_4cuda_7ccudart_MAJOR_VERSION = 0,
  __pyx_e_4cuda_7ccudart_MINOR_VERSION = 1,
  __pyx_e_4cuda_7ccudart_PATCH_LEVEL = 2
};

/* "cuda/ccudart.pxd":1701
 * cdef cudaError_t cudaGraphicsVDPAURegisterOutputSurface(cudaGraphicsResource** resource, VdpOutputSurface vdpSurface, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver
 * 
 * cdef enum cudaGLDeviceList:             # <<<<<<<<<<<<<<
 *     cudaGLDeviceListAll = 1
 *     cudaGLDeviceListCurrentFrame = 2
 */
enum __pyx_t_4cuda_7ccudart_cudaGLDeviceList {
  __pyx_e_4cuda_7ccudart_cudaGLDeviceListAll = 1,
  __pyx_e_4cuda_7ccudart_cudaGLDeviceListCurrentFrame = 2,
  __pyx_e_4cuda_7ccudart_cudaGLDeviceListNextFrame = 3
};

/* "cuda/ccudart.pxd":1712
 * cdef cudaError_t cudaGraphicsGLRegisterBuffer(cudaGraphicsResource** resource, GLuint buffer, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver
 * 
 * cdef enum cudaGLMapFlags:             # <<<<<<<<<<<<<<
 *     cudaGLMapFlagsNone = 0
 *     cudaGLMapFlagsReadOnly = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaGLMapFlags {
  __pyx_e_4cuda_7ccudart_cudaGLMapFlagsNone = 0,
  __pyx_e_4cuda_7ccudart_cudaGLMapFlagsReadOnly = 1,
  __pyx_e_4cuda_7ccudart_cudaGLMapFlagsWriteDiscard = 2
};

/* "cuda/ccudart.pxd":1717
 *     cudaGLMapFlagsWriteDiscard = 2
 * 
 * cdef enum cudaEglFrameType_enum:             # <<<<<<<<<<<<<<
 *     cudaEglFrameTypeArray = 0
 *     cudaEglFrameTypePitch = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaEglFrameType_enum {
  __pyx_e_4cuda_7ccudart_cudaEglFrameTypeArray = 0,
  __pyx_e_4cuda_7ccudart_cudaEglFrameTypePitch = 1
};

/* "cuda/ccudart.pxd":1723
 * ctypedef cudaEglFrameType_enum cudaEglFrameType
 * 
 * cdef enum cudaEglResourceLocationFlags_enum:             # <<<<<<<<<<<<<<
 *     cudaEglResourceLocationSysmem = 0
 *     cudaEglResourceLocationVidmem = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaEglResourceLocationFlags_enum {
  __pyx_e_4cuda_7ccudart_cudaEglResourceLocationSysmem = 0,
  __pyx_e_4cuda_7ccudart_cudaEglResourceLocationVidmem = 1
};

/* "cuda/ccudart.pxd":1729
 * ctypedef cudaEglResourceLocationFlags_enum cudaEglResourceLocationFlags
 * 
 * cdef enum cudaEglColorFormat_enum:             # <<<<<<<<<<<<<<
 *     cudaEglColorFormatYUV420Planar = 0
 *     cudaEglColorFormatYUV420SemiPlanar = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaEglColorFormat_enum {
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV420Planar = 0,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV420SemiPlanar = 1,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV422Planar = 2,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV422SemiPlanar = 3,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatARGB = 6,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatRGBA = 7,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatL = 8,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatR = 9,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV444Planar = 10,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV444SemiPlanar = 11,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUYV422 = 12,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatUYVY422 = 13,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatABGR = 14,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBGRA = 15,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatA = 16,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatRG = 17,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatAYUV = 18,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU444SemiPlanar = 19,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU422SemiPlanar = 20,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU420SemiPlanar = 21,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_444SemiPlanar = 22,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_420SemiPlanar = 23,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY12V12U12_444SemiPlanar = 24,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY12V12U12_420SemiPlanar = 25,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatVYUY_ER = 26,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatUYVY_ER = 27,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUYV_ER = 28,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVYU_ER = 29,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUVA_ER = 31,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatAYUV_ER = 32,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV444Planar_ER = 33,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV422Planar_ER = 34,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV420Planar_ER = 35,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV444SemiPlanar_ER = 36,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV422SemiPlanar_ER = 37,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV420SemiPlanar_ER = 38,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU444Planar_ER = 39,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU422Planar_ER = 40,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU420Planar_ER = 41,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU444SemiPlanar_ER = 42,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU422SemiPlanar_ER = 43,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU420SemiPlanar_ER = 44,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerRGGB = 45,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerBGGR = 46,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerGRBG = 47,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerGBRG = 48,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer10RGGB = 49,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer10BGGR = 50,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer10GRBG = 51,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer10GBRG = 52,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer12RGGB = 53,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer12BGGR = 54,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer12GRBG = 55,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer12GBRG = 56,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer14RGGB = 57,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer14BGGR = 58,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer14GRBG = 59,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer14GBRG = 60,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer20RGGB = 61,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer20BGGR = 62,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer20GRBG = 63,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer20GBRG = 64,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU444Planar = 65,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU422Planar = 66,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU420Planar = 67,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerIspRGGB = 68,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerIspBGGR = 69,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerIspGRBG = 70,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerIspGBRG = 71,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerBCCR = 72,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerRCCB = 73,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerCRBC = 74,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerCBRC = 75,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer10CCCC = 76,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer12BCCR = 77,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer12RCCB = 78,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer12CRBC = 79,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer12CBRC = 80,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer12CCCC = 81,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY = 82,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV420SemiPlanar_2020 = 83,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU420SemiPlanar_2020 = 84,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV420Planar_2020 = 85,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU420Planar_2020 = 86,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV420SemiPlanar_709 = 87,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU420SemiPlanar_709 = 88,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV420Planar_709 = 89,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU420Planar_709 = 90,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_420SemiPlanar_709 = 91,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_420SemiPlanar_2020 = 92,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_422SemiPlanar_2020 = 93,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_422SemiPlanar = 94,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_422SemiPlanar_709 = 95,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY_ER = 96,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY_709_ER = 97,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10_ER = 98,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10_709_ER = 99,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY12_ER = 0x64,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY12_709_ER = 0x65,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUVA = 0x66,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVYU = 0x68,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatVYUY = 0x69,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_420SemiPlanar_ER = 0x6A,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_420SemiPlanar_709_ER = 0x6B,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_444SemiPlanar_ER = 0x6C,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_444SemiPlanar_709_ER = 0x6D,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY12V12U12_420SemiPlanar_ER = 0x6E,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY12V12U12_420SemiPlanar_709_ER = 0x6F,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY12V12U12_444SemiPlanar_ER = 0x70,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY12V12U12_444SemiPlanar_709_ER = 0x71
};

/* "cuda/ccudart.pxd":1896
 * cdef cudaError_t cudaEventCreateFromEGLSync(cudaEvent_t* phEvent, EGLSyncKHR eglSync, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver
 * 
 * cdef enum: cudaHostAllocDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostAllocPortable = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaHostAllocDefault = 0
};

/* "cuda/ccudart.pxd":1898
 * cdef enum: cudaHostAllocDefault = 0
 * 
 * cdef enum: cudaHostAllocPortable = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostAllocMapped = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaHostAllocPortable = 1
};

/* "cuda/ccudart.pxd":1900
 * cdef enum: cudaHostAllocPortable = 1
 * 
 * cdef enum: cudaHostAllocMapped = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostAllocWriteCombined = 4
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaHostAllocMapped = 2
};

/* "cuda/ccudart.pxd":1902
 * cdef enum: cudaHostAllocMapped = 2
 * 
 * cdef enum: cudaHostAllocWriteCombined = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostRegisterDefault = 0
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaHostAllocWriteCombined = 4
};

/* "cuda/ccudart.pxd":1904
 * cdef enum: cudaHostAllocWriteCombined = 4
 * 
 * cdef enum: cudaHostRegisterDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostRegisterPortable = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaHostRegisterDefault = 0
};

/* "cuda/ccudart.pxd":1906
 * cdef enum: cudaHostRegisterDefault = 0
 * 
 * cdef enum: cudaHostRegisterPortable = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostRegisterMapped = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaHostRegisterPortable = 1
};

/* "cuda/ccudart.pxd":1908
 * cdef enum: cudaHostRegisterPortable = 1
 * 
 * cdef enum: cudaHostRegisterMapped = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostRegisterIoMemory = 4
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaHostRegisterMapped = 2
};

/* "cuda/ccudart.pxd":1910
 * cdef enum: cudaHostRegisterMapped = 2
 * 
 * cdef enum: cudaHostRegisterIoMemory = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostRegisterReadOnly = 8
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaHostRegisterIoMemory = 4
};

/* "cuda/ccudart.pxd":1912
 * cdef enum: cudaHostRegisterIoMemory = 4
 * 
 * cdef enum: cudaHostRegisterReadOnly = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaPeerAccessDefault = 0
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaHostRegisterReadOnly = 8
};

/* "cuda/ccudart.pxd":1914
 * cdef enum: cudaHostRegisterReadOnly = 8
 * 
 * cdef enum: cudaPeerAccessDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamDefault = 0
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaPeerAccessDefault = 0
};

/* "cuda/ccudart.pxd":1916
 * cdef enum: cudaPeerAccessDefault = 0
 * 
 * cdef enum: cudaStreamDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamNonBlocking = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaStreamDefault = 0
};

/* "cuda/ccudart.pxd":1918
 * cdef enum: cudaStreamDefault = 0
 * 
 * cdef enum: cudaStreamNonBlocking = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamLegacy = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaStreamNonBlocking = 1
};

/* "cuda/ccudart.pxd":1920
 * cdef enum: cudaStreamNonBlocking = 1
 * 
 * cdef enum: cudaStreamLegacy = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamPerThread = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaStreamLegacy = 1
};

/* "cuda/ccudart.pxd":1922
 * cdef enum: cudaStreamLegacy = 1
 * 
 * cdef enum: cudaStreamPerThread = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventDefault = 0
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaStreamPerThread = 2
};

/* "cuda/ccudart.pxd":1924
 * cdef enum: cudaStreamPerThread = 2
 * 
 * cdef enum: cudaEventDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventBlockingSync = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaEventDefault = 0
};

/* "cuda/ccudart.pxd":1926
 * cdef enum: cudaEventDefault = 0
 * 
 * cdef enum: cudaEventBlockingSync = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventDisableTiming = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaEventBlockingSync = 1
};

/* "cuda/ccudart.pxd":1928
 * cdef enum: cudaEventBlockingSync = 1
 * 
 * cdef enum: cudaEventDisableTiming = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventInterprocess = 4
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaEventDisableTiming = 2
};

/* "cuda/ccudart.pxd":1930
 * cdef enum: cudaEventDisableTiming = 2
 * 
 * cdef enum: cudaEventInterprocess = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventRecordDefault = 0
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaEventInterprocess = 4
};

/* "cuda/ccudart.pxd":1932
 * cdef enum: cudaEventInterprocess = 4
 * 
 * cdef enum: cudaEventRecordDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventRecordExternal = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaEventRecordDefault = 0
};

/* "cuda/ccudart.pxd":1934
 * cdef enum: cudaEventRecordDefault = 0
 * 
 * cdef enum: cudaEventRecordExternal = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventWaitDefault = 0
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaEventRecordExternal = 1
};

/* "cuda/ccudart.pxd":1936
 * cdef enum: cudaEventRecordExternal = 1
 * 
 * cdef enum: cudaEventWaitDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventWaitExternal = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaEventWaitDefault = 0
};

/* "cuda/ccudart.pxd":1938
 * cdef enum: cudaEventWaitDefault = 0
 * 
 * cdef enum: cudaEventWaitExternal = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceScheduleAuto = 0
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaEventWaitExternal = 1
};

/* "cuda/ccudart.pxd":1940
 * cdef enum: cudaEventWaitExternal = 1
 * 
 * cdef enum: cudaDeviceScheduleAuto = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceScheduleSpin = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaDeviceScheduleAuto = 0
};

/* "cuda/ccudart.pxd":1942
 * cdef enum: cudaDeviceScheduleAuto = 0
 * 
 * cdef enum: cudaDeviceScheduleSpin = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceScheduleYield = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaDeviceScheduleSpin = 1
};

/* "cuda/ccudart.pxd":1944
 * cdef enum: cudaDeviceScheduleSpin = 1
 * 
 * cdef enum: cudaDeviceScheduleYield = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceScheduleBlockingSync = 4
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaDeviceScheduleYield = 2
};

/* "cuda/ccudart.pxd":1946
 * cdef enum: cudaDeviceScheduleYield = 2
 * 
 * cdef enum: cudaDeviceScheduleBlockingSync = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceBlockingSync = 4
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaDeviceScheduleBlockingSync = 4
};

/* "cuda/ccudart.pxd":1948
 * cdef enum: cudaDeviceScheduleBlockingSync = 4
 * 
 * cdef enum: cudaDeviceBlockingSync = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceScheduleMask = 7
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaDeviceBlockingSync = 4
};

/* "cuda/ccudart.pxd":1950
 * cdef enum: cudaDeviceBlockingSync = 4
 * 
 * cdef enum: cudaDeviceScheduleMask = 7             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceMapHost = 8
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaDeviceScheduleMask = 7
};

/* "cuda/ccudart.pxd":1952
 * cdef enum: cudaDeviceScheduleMask = 7
 * 
 * cdef enum: cudaDeviceMapHost = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceLmemResizeToMax = 16
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaDeviceMapHost = 8
};

/* "cuda/ccudart.pxd":1954
 * cdef enum: cudaDeviceMapHost = 8
 * 
 * cdef enum: cudaDeviceLmemResizeToMax = 16             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceMask = 31
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaDeviceLmemResizeToMax = 16
};

/* "cuda/ccudart.pxd":1956
 * cdef enum: cudaDeviceLmemResizeToMax = 16
 * 
 * cdef enum: cudaDeviceMask = 31             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArrayDefault = 0
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaDeviceMask = 31
};

/* "cuda/ccudart.pxd":1958
 * cdef enum: cudaDeviceMask = 31
 * 
 * cdef enum: cudaArrayDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArrayLayered = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaArrayDefault = 0
};

/* "cuda/ccudart.pxd":1960
 * cdef enum: cudaArrayDefault = 0
 * 
 * cdef enum: cudaArrayLayered = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArraySurfaceLoadStore = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaArrayLayered = 1
};

/* "cuda/ccudart.pxd":1962
 * cdef enum: cudaArrayLayered = 1
 * 
 * cdef enum: cudaArraySurfaceLoadStore = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArrayCubemap = 4
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaArraySurfaceLoadStore = 2
};

/* "cuda/ccudart.pxd":1964
 * cdef enum: cudaArraySurfaceLoadStore = 2
 * 
 * cdef enum: cudaArrayCubemap = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArrayTextureGather = 8
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaArrayCubemap = 4
};

/* "cuda/ccudart.pxd":1966
 * cdef enum: cudaArrayCubemap = 4
 * 
 * cdef enum: cudaArrayTextureGather = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArrayColorAttachment = 32
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaArrayTextureGather = 8
};

/* "cuda/ccudart.pxd":1968
 * cdef enum: cudaArrayTextureGather = 8
 * 
 * cdef enum: cudaArrayColorAttachment = 32             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArraySparse = 64
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaArrayColorAttachment = 32
};

/* "cuda/ccudart.pxd":1970
 * cdef enum: cudaArrayColorAttachment = 32
 * 
 * cdef enum: cudaArraySparse = 64             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArrayDeferredMapping = 128
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaArraySparse = 64
};

/* "cuda/ccudart.pxd":1972
 * cdef enum: cudaArraySparse = 64
 * 
 * cdef enum: cudaArrayDeferredMapping = 128             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaIpcMemLazyEnablePeerAccess = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaArrayDeferredMapping = 0x80
};

/* "cuda/ccudart.pxd":1974
 * cdef enum: cudaArrayDeferredMapping = 128
 * 
 * cdef enum: cudaIpcMemLazyEnablePeerAccess = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaMemAttachGlobal = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaIpcMemLazyEnablePeerAccess = 1
};

/* "cuda/ccudart.pxd":1976
 * cdef enum: cudaIpcMemLazyEnablePeerAccess = 1
 * 
 * cdef enum: cudaMemAttachGlobal = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaMemAttachHost = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaMemAttachGlobal = 1
};

/* "cuda/ccudart.pxd":1978
 * cdef enum: cudaMemAttachGlobal = 1
 * 
 * cdef enum: cudaMemAttachHost = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaMemAttachSingle = 4
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaMemAttachHost = 2
};

/* "cuda/ccudart.pxd":1980
 * cdef enum: cudaMemAttachHost = 2
 * 
 * cdef enum: cudaMemAttachSingle = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaOccupancyDefault = 0
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaMemAttachSingle = 4
};

/* "cuda/ccudart.pxd":1982
 * cdef enum: cudaMemAttachSingle = 4
 * 
 * cdef enum: cudaOccupancyDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaOccupancyDisableCachingOverride = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaOccupancyDefault = 0
};

/* "cuda/ccudart.pxd":1984
 * cdef enum: cudaOccupancyDefault = 0
 * 
 * cdef enum: cudaOccupancyDisableCachingOverride = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaCpuDeviceId = -1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaOccupancyDisableCachingOverride = 1
};

/* "cuda/ccudart.pxd":1986
 * cdef enum: cudaOccupancyDisableCachingOverride = 1
 * 
 * cdef enum: cudaCpuDeviceId = -1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaInvalidDeviceId = -2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaCpuDeviceId = -1L
};

/* "cuda/ccudart.pxd":1988
 * cdef enum: cudaCpuDeviceId = -1
 * 
 * cdef enum: cudaInvalidDeviceId = -2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaCooperativeLaunchMultiDeviceNoPreSync = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaInvalidDeviceId = -2L
};

/* "cuda/ccudart.pxd":1990
 * cdef enum: cudaInvalidDeviceId = -2
 * 
 * cdef enum: cudaCooperativeLaunchMultiDeviceNoPreSync = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaCooperativeLaunchMultiDeviceNoPostSync = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaCooperativeLaunchMultiDeviceNoPreSync = 1
};

/* "cuda/ccudart.pxd":1992
 * cdef enum: cudaCooperativeLaunchMultiDeviceNoPreSync = 1
 * 
 * cdef enum: cudaCooperativeLaunchMultiDeviceNoPostSync = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArraySparsePropertiesSingleMipTail = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaCooperativeLaunchMultiDeviceNoPostSync = 2
};

/* "cuda/ccudart.pxd":1994
 * cdef enum: cudaCooperativeLaunchMultiDeviceNoPostSync = 2
 * 
 * cdef enum: cudaArraySparsePropertiesSingleMipTail = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_IPC_HANDLE_SIZE = 64
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaArraySparsePropertiesSingleMipTail = 1
};

/* "cuda/ccudart.pxd":1996
 * cdef enum: cudaArraySparsePropertiesSingleMipTail = 1
 * 
 * cdef enum: CUDA_IPC_HANDLE_SIZE = 64             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaExternalMemoryDedicated = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_CUDA_IPC_HANDLE_SIZE = 64
};

/* "cuda/ccudart.pxd":1998
 * cdef enum: CUDA_IPC_HANDLE_SIZE = 64
 * 
 * cdef enum: cudaExternalMemoryDedicated = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaExternalSemaphoreSignalSkipNvSciBufMemSync = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaExternalMemoryDedicated = 1
};

/* "cuda/ccudart.pxd":2000
 * cdef enum: cudaExternalMemoryDedicated = 1
 * 
 * cdef enum: cudaExternalSemaphoreSignalSkipNvSciBufMemSync = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaExternalSemaphoreWaitSkipNvSciBufMemSync = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaExternalSemaphoreSignalSkipNvSciBufMemSync = 1
};

/* "cuda/ccudart.pxd":2002
 * cdef enum: cudaExternalSemaphoreSignalSkipNvSciBufMemSync = 1
 * 
 * cdef enum: cudaExternalSemaphoreWaitSkipNvSciBufMemSync = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaNvSciSyncAttrSignal = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaExternalSemaphoreWaitSkipNvSciBufMemSync = 2
};

/* "cuda/ccudart.pxd":2004
 * cdef enum: cudaExternalSemaphoreWaitSkipNvSciBufMemSync = 2
 * 
 * cdef enum: cudaNvSciSyncAttrSignal = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaNvSciSyncAttrWait = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaNvSciSyncAttrSignal = 1
};

/* "cuda/ccudart.pxd":2006
 * cdef enum: cudaNvSciSyncAttrSignal = 1
 * 
 * cdef enum: cudaNvSciSyncAttrWait = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceType1D = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaNvSciSyncAttrWait = 2
};

/* "cuda/ccudart.pxd":2008
 * cdef enum: cudaNvSciSyncAttrWait = 2
 * 
 * cdef enum: cudaSurfaceType1D = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceType2D = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaSurfaceType1D = 1
};

/* "cuda/ccudart.pxd":2010
 * cdef enum: cudaSurfaceType1D = 1
 * 
 * cdef enum: cudaSurfaceType2D = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceType3D = 3
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaSurfaceType2D = 2
};

/* "cuda/ccudart.pxd":2012
 * cdef enum: cudaSurfaceType2D = 2
 * 
 * cdef enum: cudaSurfaceType3D = 3             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceTypeCubemap = 12
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaSurfaceType3D = 3
};

/* "cuda/ccudart.pxd":2014
 * cdef enum: cudaSurfaceType3D = 3
 * 
 * cdef enum: cudaSurfaceTypeCubemap = 12             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceType1DLayered = 241
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaSurfaceTypeCubemap = 12
};

/* "cuda/ccudart.pxd":2016
 * cdef enum: cudaSurfaceTypeCubemap = 12
 * 
 * cdef enum: cudaSurfaceType1DLayered = 241             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceType2DLayered = 242
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaSurfaceType1DLayered = 0xF1
};

/* "cuda/ccudart.pxd":2018
 * cdef enum: cudaSurfaceType1DLayered = 241
 * 
 * cdef enum: cudaSurfaceType2DLayered = 242             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceTypeCubemapLayered = 252
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaSurfaceType2DLayered = 0xF2
};

/* "cuda/ccudart.pxd":2020
 * cdef enum: cudaSurfaceType2DLayered = 242
 * 
 * cdef enum: cudaSurfaceTypeCubemapLayered = 252             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureType1D = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaSurfaceTypeCubemapLayered = 0xFC
};

/* "cuda/ccudart.pxd":2022
 * cdef enum: cudaSurfaceTypeCubemapLayered = 252
 * 
 * cdef enum: cudaTextureType1D = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureType2D = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaTextureType1D = 1
};

/* "cuda/ccudart.pxd":2024
 * cdef enum: cudaTextureType1D = 1
 * 
 * cdef enum: cudaTextureType2D = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureType3D = 3
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaTextureType2D = 2
};

/* "cuda/ccudart.pxd":2026
 * cdef enum: cudaTextureType2D = 2
 * 
 * cdef enum: cudaTextureType3D = 3             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureTypeCubemap = 12
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaTextureType3D = 3
};

/* "cuda/ccudart.pxd":2028
 * cdef enum: cudaTextureType3D = 3
 * 
 * cdef enum: cudaTextureTypeCubemap = 12             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureType1DLayered = 241
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaTextureTypeCubemap = 12
};

/* "cuda/ccudart.pxd":2030
 * cdef enum: cudaTextureTypeCubemap = 12
 * 
 * cdef enum: cudaTextureType1DLayered = 241             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureType2DLayered = 242
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaTextureType1DLayered = 0xF1
};

/* "cuda/ccudart.pxd":2032
 * cdef enum: cudaTextureType1DLayered = 241
 * 
 * cdef enum: cudaTextureType2DLayered = 242             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureTypeCubemapLayered = 252
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaTextureType2DLayered = 0xF2
};

/* "cuda/ccudart.pxd":2034
 * cdef enum: cudaTextureType2DLayered = 242
 * 
 * cdef enum: cudaTextureTypeCubemapLayered = 252             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDART_VERSION = 11060
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaTextureTypeCubemapLayered = 0xFC
};

/* "cuda/ccudart.pxd":2036
 * cdef enum: cudaTextureTypeCubemapLayered = 252
 * 
 * cdef enum: CUDART_VERSION = 11060             # <<<<<<<<<<<<<<
 * 
 * cdef enum: __CUDART_API_VERSION = 11060
 */
enum  {
  __pyx_e_4cuda_7ccudart_CUDART_VERSION = 0x2B34
};

/* "cuda/ccudart.pxd":2038
 * cdef enum: CUDART_VERSION = 11060
 * 
 * cdef enum: __CUDART_API_VERSION = 11060             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_EGL_MAX_PLANES = 3
 */
enum  {
  __pyx_e_4cuda_7ccudart___CUDART_API_VERSION = 0x2B34
};

/* "cuda/ccudart.pxd":2040
 * cdef enum: __CUDART_API_VERSION = 11060
 * 
 * cdef enum: CUDA_EGL_MAX_PLANES = 3             # <<<<<<<<<<<<<<
 */
enum  {
  __pyx_e_4cuda_7ccudart_CUDA_EGL_MAX_PLANES = 3
};

/* "cuda/ccudart.pxd":15
 *     cudaRoundMinInf = 3
 * 
 * cdef struct dim3:             # <<<<<<<<<<<<<<
 *     unsigned int x
 *     unsigned int y
 */
struct __pyx_t_4cuda_7ccudart_dim3 {
  unsigned int x;
  unsigned int y;
  unsigned int z;
};

/* "cuda/ccudart.pxd":178
 *     cudaChannelFormatKindUnsignedBlockCompressed7SRGB = 30
 * 
 * cdef struct cudaChannelFormatDesc:             # <<<<<<<<<<<<<<
 *     int x
 *     int y
 */
struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc {
  int x;
  int y;
  int z;
  int w;
  enum __pyx_t_4cuda_7ccudart_cudaChannelFormatKind f;
};

/* "cuda/ccudart.pxd":188
 *     cdef struct cudaArray:
 *         pass
 * ctypedef cudaArray* cudaArray_t             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct cudaArray *__pyx_t_4cuda_7ccudart_cudaArray_t;

/* "cuda/ccudart.pxd":193
 *     cdef struct cudaArray:
 *         pass
 * ctypedef cudaArray* cudaArray_const_t             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef struct cudaArray *__pyx_t_4cuda_7ccudart_cudaArray_const_t;

/* "cuda/ccudart.pxd":199
 *     cdef struct cudaMipmappedArray:
 *         pass
 * ctypedef cudaMipmappedArray* cudaMipmappedArray_t             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct cudaMipmappedArray *__pyx_t_4cuda_7ccudart_cudaMipmappedArray_t;

/* "cuda/ccudart.pxd":204
 *     cdef struct cudaMipmappedArray:
 *         pass
 * ctypedef cudaMipmappedArray* cudaMipmappedArray_const_t             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef struct cudaMipmappedArray *__pyx_t_4cuda_7ccudart_cudaMipmappedArray_const_t;

/* "cuda/ccudart.pxd":207
 * 
 * 
 * cdef struct _cudaArraySparseProperties_tileExtent_s:             # <<<<<<<<<<<<<<
 *     unsigned int width
 *     unsigned int height
 */
struct __pyx_t_4cuda_7ccudart__cudaArraySparseProperties_tileExtent_s {
  unsigned int width;
  unsigned int height;
  unsigned int depth;
};

/* "cuda/ccudart.pxd":212
 *     unsigned int depth
 * 
 * cdef struct cudaArraySparseProperties:             # <<<<<<<<<<<<<<
 *     _cudaArraySparseProperties_tileExtent_s tileExtent
 *     unsigned int miptailFirstLevel
 */
struct __pyx_t_4cuda_7ccudart_cudaArraySparseProperties {
  struct __pyx_t_4cuda_7ccudart__cudaArraySparseProperties_tileExtent_s tileExtent;
  unsigned int miptailFirstLevel;
  unsigned PY_LONG_LONG miptailSize;
  unsigned int flags;
  unsigned int reserved[4];
};

/* "cuda/ccudart.pxd":219
 *     unsigned int reserved[4]
 * 
 * cdef struct cudaArrayMemoryRequirements:             # <<<<<<<<<<<<<<
 *     size_t size
 *     size_t alignment
 */
struct __pyx_t_4cuda_7ccudart_cudaArrayMemoryRequirements {
  size_t size;
  size_t alignment;
  unsigned int reserved[4];
};

/* "cuda/ccudart.pxd":237
 *     cudaMemcpyDefault = 4
 * 
 * cdef struct cudaPitchedPtr:             # <<<<<<<<<<<<<<
 *     void* ptr
 *     size_t pitch
 */
struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr {
  void *ptr;
  size_t pitch;
  size_t xsize;
  size_t ysize;
};

/* "cuda/ccudart.pxd":243
 *     size_t ysize
 * 
 * cdef struct cudaExtent:             # <<<<<<<<<<<<<<
 *     size_t width
 *     size_t height
 */
struct __pyx_t_4cuda_7ccudart_cudaExtent {
  size_t width;
  size_t height;
  size_t depth;
};

/* "cuda/ccudart.pxd":248
 *     size_t depth
 * 
 * cdef struct cudaPos:             # <<<<<<<<<<<<<<
 *     size_t x
 *     size_t y
 */
struct __pyx_t_4cuda_7ccudart_cudaPos {
  size_t x;
  size_t y;
  size_t z;
};

/* "cuda/ccudart.pxd":253
 *     size_t z
 * 
 * cdef struct cudaMemcpy3DParms:             # <<<<<<<<<<<<<<
 *     cudaArray_t srcArray
 *     cudaPos srcPos
 */
struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms {
  __pyx_t_4cuda_7ccudart_cudaArray_t srcArray;
  struct __pyx_t_4cuda_7ccudart_cudaPos srcPos;
  struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr srcPtr;
  __pyx_t_4cuda_7ccudart_cudaArray_t dstArray;
  struct __pyx_t_4cuda_7ccudart_cudaPos dstPos;
  struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr dstPtr;
  struct __pyx_t_4cuda_7ccudart_cudaExtent extent;
  enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind kind;
};

/* "cuda/ccudart.pxd":263
 *     cudaMemcpyKind kind
 * 
 * cdef struct cudaMemcpy3DPeerParms:             # <<<<<<<<<<<<<<
 *     cudaArray_t srcArray
 *     cudaPos srcPos
 */
struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DPeerParms {
  __pyx_t_4cuda_7ccudart_cudaArray_t srcArray;
  struct __pyx_t_4cuda_7ccudart_cudaPos srcPos;
  struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr srcPtr;
  int srcDevice;
  __pyx_t_4cuda_7ccudart_cudaArray_t dstArray;
  struct __pyx_t_4cuda_7ccudart_cudaPos dstPos;
  struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr dstPtr;
  int dstDevice;
  struct __pyx_t_4cuda_7ccudart_cudaExtent extent;
};

/* "cuda/ccudart.pxd":274
 *     cudaExtent extent
 * 
 * cdef struct cudaMemsetParams:             # <<<<<<<<<<<<<<
 *     void* dst
 *     size_t pitch
 */
struct __pyx_t_4cuda_7ccudart_cudaMemsetParams {
  void *dst;
  size_t pitch;
  unsigned int value;
  unsigned int elementSize;
  size_t width;
  size_t height;
};

/* "cuda/ccudart.pxd":287
 *     cudaAccessPropertyPersisting = 2
 * 
 * cdef struct cudaAccessPolicyWindow:             # <<<<<<<<<<<<<<
 *     void* base_ptr
 *     size_t num_bytes
 */
struct __pyx_t_4cuda_7ccudart_cudaAccessPolicyWindow {
  void *base_ptr;
  size_t num_bytes;
  float hitRatio;
  enum __pyx_t_4cuda_7ccudart_cudaAccessProperty hitProp;
  enum __pyx_t_4cuda_7ccudart_cudaAccessProperty missProp;
};

/* "cuda/ccudart.pxd":294
 *     cudaAccessProperty missProp
 * 
 * ctypedef void (*cudaHostFn_t)(void* userData)             # <<<<<<<<<<<<<<
 * 
 * cdef struct cudaHostNodeParams:
 */
typedef void (*__pyx_t_4cuda_7ccudart_cudaHostFn_t)(void *);

/* "cuda/ccudart.pxd":296
 * ctypedef void (*cudaHostFn_t)(void* userData)
 * 
 * cdef struct cudaHostNodeParams:             # <<<<<<<<<<<<<<
 *     cudaHostFn_t fn
 *     void* userData
 */
struct __pyx_t_4cuda_7ccudart_cudaHostNodeParams {
  __pyx_t_4cuda_7ccudart_cudaHostFn_t fn;
  void *userData;
};

/* "cuda/ccudart.pxd":320
 *     cudaStreamAttributeSynchronizationPolicy = 3
 * 
 * cdef union cudaStreamAttrValue:             # <<<<<<<<<<<<<<
 *     cudaAccessPolicyWindow accessPolicyWindow
 *     cudaSynchronizationPolicy syncPolicy
 */
union __pyx_t_4cuda_7ccudart_cudaStreamAttrValue {
  struct __pyx_t_4cuda_7ccudart_cudaAccessPolicyWindow accessPolicyWindow;
  enum __pyx_t_4cuda_7ccudart_cudaSynchronizationPolicy syncPolicy;
};

/* "cuda/ccudart.pxd":359
 *     cudaKernelNodeAttributeCooperative = 2
 * 
 * cdef union cudaKernelNodeAttrValue:             # <<<<<<<<<<<<<<
 *     cudaAccessPolicyWindow accessPolicyWindow
 *     int cooperative
 */
union __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrValue {
  struct __pyx_t_4cuda_7ccudart_cudaAccessPolicyWindow accessPolicyWindow;
  int cooperative;
};

/* "cuda/ccudart.pxd":406
 *     cudaResViewFormatUnsignedBlockCompressed7 = 34
 * 
 * cdef struct _cudaResourceDesc_res_res_array_s:             # <<<<<<<<<<<<<<
 *     cudaArray_t array
 * 
 */
struct __pyx_t_4cuda_7ccudart__cudaResourceDesc_res_res_array_s {
  __pyx_t_4cuda_7ccudart_cudaArray_t array;
};

/* "cuda/ccudart.pxd":409
 *     cudaArray_t array
 * 
 * cdef struct _cudaResourceDesc_res_res_mipmap_s:             # <<<<<<<<<<<<<<
 *     cudaMipmappedArray_t mipmap
 * 
 */
struct __pyx_t_4cuda_7ccudart__cudaResourceDesc_res_res_mipmap_s {
  __pyx_t_4cuda_7ccudart_cudaMipmappedArray_t mipmap;
};

/* "cuda/ccudart.pxd":412
 *     cudaMipmappedArray_t mipmap
 * 
 * cdef struct _cudaResourceDesc_res_res_linear_s:             # <<<<<<<<<<<<<<
 *     void* devPtr
 *     cudaChannelFormatDesc desc
 */
struct __pyx_t_4cuda_7ccudart__cudaResourceDesc_res_res_linear_s {
  void *devPtr;
  struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc desc;
  size_t sizeInBytes;
};

/* "cuda/ccudart.pxd":417
 *     size_t sizeInBytes
 * 
 * cdef struct _cudaResourceDesc_res_res_pitch2D_s:             # <<<<<<<<<<<<<<
 *     void* devPtr
 *     cudaChannelFormatDesc desc
 */
struct __pyx_t_4cuda_7ccudart__cudaResourceDesc_res_res_pitch2D_s {
  void *devPtr;
  struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc desc;
  size_t width;
  size_t height;
  size_t pitchInBytes;
};

/* "cuda/ccudart.pxd":424
 *     size_t pitchInBytes
 * 
 * cdef union _cudaResourceDesc_res_u:             # <<<<<<<<<<<<<<
 *     _cudaResourceDesc_res_res_array_s array
 *     _cudaResourceDesc_res_res_mipmap_s mipmap
 */
union __pyx_t_4cuda_7ccudart__cudaResourceDesc_res_u {
  struct __pyx_t_4cuda_7ccudart__cudaResourceDesc_res_res_array_s array;
  struct __pyx_t_4cuda_7ccudart__cudaResourceDesc_res_res_mipmap_s mipmap;
  struct __pyx_t_4cuda_7ccudart__cudaResourceDesc_res_res_linear_s linear;
  struct __pyx_t_4cuda_7ccudart__cudaResourceDesc_res_res_pitch2D_s pitch2D;
};

/* "cuda/ccudart.pxd":430
 *     _cudaResourceDesc_res_res_pitch2D_s pitch2D
 * 
 * cdef struct cudaResourceDesc:             # <<<<<<<<<<<<<<
 *     cudaResourceType resType
 *     _cudaResourceDesc_res_u res
 */
struct __pyx_t_4cuda_7ccudart_cudaResourceDesc {
  enum __pyx_t_4cuda_7ccudart_cudaResourceType resType;
  union __pyx_t_4cuda_7ccudart__cudaResourceDesc_res_u res;
};

/* "cuda/ccudart.pxd":434
 *     _cudaResourceDesc_res_u res
 * 
 * cdef struct cudaResourceViewDesc:             # <<<<<<<<<<<<<<
 *     cudaResourceViewFormat format
 *     size_t width
 */
struct __pyx_t_4cuda_7ccudart_cudaResourceViewDesc {
  enum __pyx_t_4cuda_7ccudart_cudaResourceViewFormat format;
  size_t width;
  size_t height;
  size_t depth;
  unsigned int firstMipmapLevel;
  unsigned int lastMipmapLevel;
  unsigned int firstLayer;
  unsigned int lastLayer;
};

/* "cuda/ccudart.pxd":444
 *     unsigned int lastLayer
 * 
 * cdef struct cudaPointerAttributes:             # <<<<<<<<<<<<<<
 *     cudaMemoryType type
 *     int device
 */
struct __pyx_t_4cuda_7ccudart_cudaPointerAttributes {
  enum __pyx_t_4cuda_7ccudart_cudaMemoryType type;
  int device;
  void *devicePointer;
  void *hostPointer;
};

/* "cuda/ccudart.pxd":450
 *     void* hostPointer
 * 
 * cdef struct cudaFuncAttributes:             # <<<<<<<<<<<<<<
 *     size_t sharedSizeBytes
 *     size_t constSizeBytes
 */
struct __pyx_t_4cuda_7ccudart_cudaFuncAttributes {
  size_t sharedSizeBytes;
  size_t constSizeBytes;
  size_t localSizeBytes;
  int maxThreadsPerBlock;
  int numRegs;
  int ptxVersion;
  int binaryVersion;
  int cacheModeCA;
  int maxDynamicSharedSizeBytes;
  int preferredShmemCarveout;
};

/* "cuda/ccudart.pxd":663
 *     cudaMemLocationTypeDevice = 1
 * 
 * cdef struct cudaMemLocation:             # <<<<<<<<<<<<<<
 *     cudaMemLocationType type
 *     int id
 */
struct __pyx_t_4cuda_7ccudart_cudaMemLocation {
  enum __pyx_t_4cuda_7ccudart_cudaMemLocationType type;
  int id;
};

/* "cuda/ccudart.pxd":672
 *     cudaMemAccessFlagsProtReadWrite = 3
 * 
 * cdef struct cudaMemAccessDesc:             # <<<<<<<<<<<<<<
 *     cudaMemLocation location
 *     cudaMemAccessFlags flags
 */
struct __pyx_t_4cuda_7ccudart_cudaMemAccessDesc {
  struct __pyx_t_4cuda_7ccudart_cudaMemLocation location;
  enum __pyx_t_4cuda_7ccudart_cudaMemAccessFlags flags;
};

/* "cuda/ccudart.pxd":687
 *     cudaMemHandleTypeWin32Kmt = 4
 * 
 * cdef struct cudaMemPoolProps:             # <<<<<<<<<<<<<<
 *     cudaMemAllocationType allocType
 *     cudaMemAllocationHandleType handleTypes
 */
struct __pyx_t_4cuda_7ccudart_cudaMemPoolProps {
  enum __pyx_t_4cuda_7ccudart_cudaMemAllocationType allocType;
  enum __pyx_t_4cuda_7ccudart_cudaMemAllocationHandleType handleTypes;
  struct __pyx_t_4cuda_7ccudart_cudaMemLocation location;
  void *win32SecurityAttributes;
  unsigned char reserved[64];
};

/* "cuda/ccudart.pxd":694
 *     unsigned char reserved[64]
 * 
 * cdef struct cudaMemPoolPtrExportData:             # <<<<<<<<<<<<<<
 *     unsigned char reserved[64]
 * 
 */
struct __pyx_t_4cuda_7ccudart_cudaMemPoolPtrExportData {
  unsigned char reserved[64];
};

/* "cuda/ccudart.pxd":697
 *     unsigned char reserved[64]
 * 
 * cdef struct cudaMemAllocNodeParams:             # <<<<<<<<<<<<<<
 *     cudaMemPoolProps poolProps
 *     const cudaMemAccessDesc* accessDescs
 */
struct __pyx_t_4cuda_7ccudart_cudaMemAllocNodeParams {
  struct __pyx_t_4cuda_7ccudart_cudaMemPoolProps poolProps;
  struct __pyx_t_4cuda_7ccudart_cudaMemAccessDesc const *accessDescs;
  size_t accessDescCount;
  size_t bytesize;
  void *dptr;
};

/* "cuda/ccudart.pxd":716
 *     cudaDevP2PAttrCudaArrayAccessSupported = 4
 * 
 * cdef struct CUuuid_st:             # <<<<<<<<<<<<<<
 *     char bytes[16]
 * 
 */
struct __pyx_t_4cuda_7ccudart_CUuuid_st {
  char bytes[16];
};

/* "cuda/ccudart.pxd":719
 *     char bytes[16]
 * 
 * ctypedef CUuuid_st CUuuid             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUuuid_st cudaUUID_t
 */
typedef struct __pyx_t_4cuda_7ccudart_CUuuid_st __pyx_t_4cuda_7ccudart_CUuuid;

/* "cuda/ccudart.pxd":721
 * ctypedef CUuuid_st CUuuid
 * 
 * ctypedef CUuuid_st cudaUUID_t             # <<<<<<<<<<<<<<
 * 
 * cdef struct cudaDeviceProp:
 */
typedef struct __pyx_t_4cuda_7ccudart_CUuuid_st __pyx_t_4cuda_7ccudart_cudaUUID_t;

/* "cuda/ccudart.pxd":723
 * ctypedef CUuuid_st cudaUUID_t
 * 
 * cdef struct cudaDeviceProp:             # <<<<<<<<<<<<<<
 *     char name[256]
 *     cudaUUID_t uuid
 */
struct __pyx_t_4cuda_7ccudart_cudaDeviceProp {
  char name[0x100];
  __pyx_t_4cuda_7ccudart_cudaUUID_t uuid;
  char luid[8];
  unsigned int luidDeviceNodeMask;
  size_t totalGlobalMem;
  size_t sharedMemPerBlock;
  int regsPerBlock;
  int warpSize;
  size_t memPitch;
  int maxThreadsPerBlock;
  int maxThreadsDim[3];
  int maxGridSize[3];
  int clockRate;
  size_t totalConstMem;
  int major;
  int minor;
  size_t textureAlignment;
  size_t texturePitchAlignment;
  int deviceOverlap;
  int multiProcessorCount;
  int kernelExecTimeoutEnabled;
  int integrated;
  int canMapHostMemory;
  int computeMode;
  int maxTexture1D;
  int maxTexture1DMipmap;
  int maxTexture1DLinear;
  int maxTexture2D[2];
  int maxTexture2DMipmap[2];
  int maxTexture2DLinear[3];
  int maxTexture2DGather[2];
  int maxTexture3D[3];
  int maxTexture3DAlt[3];
  int maxTextureCubemap;
  int maxTexture1DLayered[2];
  int maxTexture2DLayered[3];
  int maxTextureCubemapLayered[2];
  int maxSurface1D;
  int maxSurface2D[2];
  int maxSurface3D[3];
  int maxSurface1DLayered[2];
  int maxSurface2DLayered[3];
  int maxSurfaceCubemap;
  int maxSurfaceCubemapLayered[2];
  size_t surfaceAlignment;
  int concurrentKernels;
  int ECCEnabled;
  int pciBusID;
  int pciDeviceID;
  int pciDomainID;
  int tccDriver;
  int asyncEngineCount;
  int unifiedAddressing;
  int memoryClockRate;
  int memoryBusWidth;
  int l2CacheSize;
  int persistingL2CacheMaxSize;
  int maxThreadsPerMultiProcessor;
  int streamPrioritiesSupported;
  int globalL1CacheSupported;
  int localL1CacheSupported;
  size_t sharedMemPerMultiprocessor;
  int regsPerMultiprocessor;
  int managedMemory;
  int isMultiGpuBoard;
  int multiGpuBoardGroupID;
  int hostNativeAtomicSupported;
  int singleToDoublePrecisionPerfRatio;
  int pageableMemoryAccess;
  int concurrentManagedAccess;
  int computePreemptionSupported;
  int canUseHostPointerForRegisteredMem;
  int cooperativeLaunch;
  int cooperativeMultiDeviceLaunch;
  size_t sharedMemPerBlockOptin;
  int pageableMemoryAccessUsesHostPageTables;
  int directManagedMemAccessFromHost;
  int maxBlocksPerMultiProcessor;
  int accessPolicyMaxWindowSize;
  size_t reservedSharedMemPerBlock;
};

/* "cuda/ccudart.pxd":805
 *     size_t reservedSharedMemPerBlock
 * 
 * cdef struct cudaIpcEventHandle_st:             # <<<<<<<<<<<<<<
 *     char reserved[64]
 * 
 */
struct __pyx_t_4cuda_7ccudart_cudaIpcEventHandle_st {
  char reserved[64];
};

/* "cuda/ccudart.pxd":808
 *     char reserved[64]
 * 
 * ctypedef cudaIpcEventHandle_st cudaIpcEventHandle_t             # <<<<<<<<<<<<<<
 * 
 * cdef struct cudaIpcMemHandle_st:
 */
typedef struct __pyx_t_4cuda_7ccudart_cudaIpcEventHandle_st __pyx_t_4cuda_7ccudart_cudaIpcEventHandle_t;

/* "cuda/ccudart.pxd":810
 * ctypedef cudaIpcEventHandle_st cudaIpcEventHandle_t
 * 
 * cdef struct cudaIpcMemHandle_st:             # <<<<<<<<<<<<<<
 *     char reserved[64]
 * 
 */
struct __pyx_t_4cuda_7ccudart_cudaIpcMemHandle_st {
  char reserved[64];
};

/* "cuda/ccudart.pxd":813
 *     char reserved[64]
 * 
 * ctypedef cudaIpcMemHandle_st cudaIpcMemHandle_t             # <<<<<<<<<<<<<<
 * 
 * cdef enum cudaExternalMemoryHandleType:
 */
typedef struct __pyx_t_4cuda_7ccudart_cudaIpcMemHandle_st __pyx_t_4cuda_7ccudart_cudaIpcMemHandle_t;

/* "cuda/ccudart.pxd":825
 *     cudaExternalMemoryHandleTypeNvSciBuf = 8
 * 
 * cdef struct _cudaExternalMemoryHandleDesc_handle_handle_win32_s:             # <<<<<<<<<<<<<<
 *     void* handle
 *     void* name
 */
struct __pyx_t_4cuda_7ccudart__cudaExternalMemoryHandleDesc_handle_handle_win32_s {
  void *handle;
  void *name;
};

/* "cuda/ccudart.pxd":829
 *     void* name
 * 
 * cdef union _cudaExternalMemoryHandleDesc_handle_u:             # <<<<<<<<<<<<<<
 *     int fd
 *     _cudaExternalMemoryHandleDesc_handle_handle_win32_s win32
 */
union __pyx_t_4cuda_7ccudart__cudaExternalMemoryHandleDesc_handle_u {
  int fd;
  struct __pyx_t_4cuda_7ccudart__cudaExternalMemoryHandleDesc_handle_handle_win32_s win32;
  void *nvSciBufObject;
};

/* "cuda/ccudart.pxd":834
 *     void* nvSciBufObject
 * 
 * cdef struct cudaExternalMemoryHandleDesc:             # <<<<<<<<<<<<<<
 *     cudaExternalMemoryHandleType type
 *     _cudaExternalMemoryHandleDesc_handle_u handle
 */
struct __pyx_t_4cuda_7ccudart_cudaExternalMemoryHandleDesc {
  enum __pyx_t_4cuda_7ccudart_cudaExternalMemoryHandleType type;
  union __pyx_t_4cuda_7ccudart__cudaExternalMemoryHandleDesc_handle_u handle;
  unsigned PY_LONG_LONG size;
  unsigned int flags;
};

/* "cuda/ccudart.pxd":840
 *     unsigned int flags
 * 
 * cdef struct cudaExternalMemoryBufferDesc:             # <<<<<<<<<<<<<<
 *     unsigned long long offset
 *     unsigned long long size
 */
struct __pyx_t_4cuda_7ccudart_cudaExternalMemoryBufferDesc {
  unsigned PY_LONG_LONG offset;
  unsigned PY_LONG_LONG size;
  unsigned int flags;
};

/* "cuda/ccudart.pxd":845
 *     unsigned int flags
 * 
 * cdef struct cudaExternalMemoryMipmappedArrayDesc:             # <<<<<<<<<<<<<<
 *     unsigned long long offset
 *     cudaChannelFormatDesc formatDesc
 */
struct __pyx_t_4cuda_7ccudart_cudaExternalMemoryMipmappedArrayDesc {
  unsigned PY_LONG_LONG offset;
  struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc formatDesc;
  struct __pyx_t_4cuda_7ccudart_cudaExtent extent;
  unsigned int flags;
  unsigned int numLevels;
};

/* "cuda/ccudart.pxd":864
 *     cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32 = 10
 * 
 * cdef struct _cudaExternalSemaphoreHandleDesc_handle_handle_win32_s:             # <<<<<<<<<<<<<<
 *     void* handle
 *     void* name
 */
struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreHandleDesc_handle_handle_win32_s {
  void *handle;
  void *name;
};

/* "cuda/ccudart.pxd":868
 *     void* name
 * 
 * cdef union _cudaExternalSemaphoreHandleDesc_handle_u:             # <<<<<<<<<<<<<<
 *     int fd
 *     _cudaExternalSemaphoreHandleDesc_handle_handle_win32_s win32
 */
union __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreHandleDesc_handle_u {
  int fd;
  struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreHandleDesc_handle_handle_win32_s win32;
  void *nvSciSyncObj;
};

/* "cuda/ccudart.pxd":873
 *     void* nvSciSyncObj
 * 
 * cdef struct cudaExternalSemaphoreHandleDesc:             # <<<<<<<<<<<<<<
 *     cudaExternalSemaphoreHandleType type
 *     _cudaExternalSemaphoreHandleDesc_handle_u handle
 */
struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreHandleDesc {
  enum __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreHandleType type;
  union __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreHandleDesc_handle_u handle;
  unsigned int flags;
};

/* "cuda/ccudart.pxd":878
 *     unsigned int flags
 * 
 * cdef struct _cudaExternalSemaphoreSignalParams_params_params_fence_s:             # <<<<<<<<<<<<<<
 *     unsigned long long value
 * 
 */
struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreSignalParams_params_params_fence_s {
  unsigned PY_LONG_LONG value;
};

/* "cuda/ccudart.pxd":881
 *     unsigned long long value
 * 
 * cdef union _cudaExternalSemaphoreSignalParams_params_params_nvSciSync_u:             # <<<<<<<<<<<<<<
 *     void* fence
 *     unsigned long long reserved
 */
union __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreSignalParams_params_params_nvSciSync_u {
  void *fence;
  unsigned PY_LONG_LONG reserved;
};

/* "cuda/ccudart.pxd":885
 *     unsigned long long reserved
 * 
 * cdef struct _cudaExternalSemaphoreSignalParams_params_params_keyedMutex_s:             # <<<<<<<<<<<<<<
 *     unsigned long long key
 * 
 */
struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreSignalParams_params_params_keyedMutex_s {
  unsigned PY_LONG_LONG key;
};

/* "cuda/ccudart.pxd":888
 *     unsigned long long key
 * 
 * cdef struct _cudaExternalSemaphoreSignalParams_params_s:             # <<<<<<<<<<<<<<
 *     _cudaExternalSemaphoreSignalParams_params_params_fence_s fence
 *     _cudaExternalSemaphoreSignalParams_params_params_nvSciSync_u nvSciSync
 */
struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreSignalParams_params_s {
  struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreSignalParams_params_params_fence_s fence;
  union __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreSignalParams_params_params_nvSciSync_u nvSciSync;
  struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreSignalParams_params_params_keyedMutex_s keyedMutex;
  unsigned int reserved[12];
};

/* "cuda/ccudart.pxd":894
 *     unsigned int reserved[12]
 * 
 * cdef struct cudaExternalSemaphoreSignalParams:             # <<<<<<<<<<<<<<
 *     _cudaExternalSemaphoreSignalParams_params_s params
 *     unsigned int flags
 */
struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreSignalParams {
  struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreSignalParams_params_s params;
  unsigned int flags;
  unsigned int reserved[16];
};

/* "cuda/ccudart.pxd":899
 *     unsigned int reserved[16]
 * 
 * cdef struct _cudaExternalSemaphoreWaitParams_params_params_fence_s:             # <<<<<<<<<<<<<<
 *     unsigned long long value
 * 
 */
struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreWaitParams_params_params_fence_s {
  unsigned PY_LONG_LONG value;
};

/* "cuda/ccudart.pxd":902
 *     unsigned long long value
 * 
 * cdef union _cudaExternalSemaphoreWaitParams_params_params_nvSciSync_u:             # <<<<<<<<<<<<<<
 *     void* fence
 *     unsigned long long reserved
 */
union __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreWaitParams_params_params_nvSciSync_u {
  void *fence;
  unsigned PY_LONG_LONG reserved;
};

/* "cuda/ccudart.pxd":906
 *     unsigned long long reserved
 * 
 * cdef struct _cudaExternalSemaphoreWaitParams_params_params_keyedMutex_s:             # <<<<<<<<<<<<<<
 *     unsigned long long key
 *     unsigned int timeoutMs
 */
struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreWaitParams_params_params_keyedMutex_s {
  unsigned PY_LONG_LONG key;
  unsigned int timeoutMs;
};

/* "cuda/ccudart.pxd":910
 *     unsigned int timeoutMs
 * 
 * cdef struct _cudaExternalSemaphoreWaitParams_params_s:             # <<<<<<<<<<<<<<
 *     _cudaExternalSemaphoreWaitParams_params_params_fence_s fence
 *     _cudaExternalSemaphoreWaitParams_params_params_nvSciSync_u nvSciSync
 */
struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreWaitParams_params_s {
  struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreWaitParams_params_params_fence_s fence;
  union __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreWaitParams_params_params_nvSciSync_u nvSciSync;
  struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreWaitParams_params_params_keyedMutex_s keyedMutex;
  unsigned int reserved[10];
};

/* "cuda/ccudart.pxd":916
 *     unsigned int reserved[10]
 * 
 * cdef struct cudaExternalSemaphoreWaitParams:             # <<<<<<<<<<<<<<
 *     _cudaExternalSemaphoreWaitParams_params_s params
 *     unsigned int flags
 */
struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreWaitParams {
  struct __pyx_t_4cuda_7ccudart__cudaExternalSemaphoreWaitParams_params_s params;
  unsigned int flags;
  unsigned int reserved[16];
};

/* "cuda/ccudart.pxd":921
 *     unsigned int reserved[16]
 * 
 * ctypedef cudaError cudaError_t             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef enum __pyx_t_4cuda_7ccudart_cudaError __pyx_t_4cuda_7ccudart_cudaError_t;

/* "cuda/ccudart.pxd":926
 *     cdef struct CUstream_st:
 *         pass
 * ctypedef CUstream_st* cudaStream_t             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUstream_st *__pyx_t_4cuda_7ccudart_cudaStream_t;

/* "cuda/ccudart.pxd":931
 *     cdef struct CUevent_st:
 *         pass
 * ctypedef CUevent_st* cudaEvent_t             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUevent_st *__pyx_t_4cuda_7ccudart_cudaEvent_t;

/* "cuda/ccudart.pxd":936
 *     cdef struct cudaGraphicsResource:
 *         pass
 * ctypedef cudaGraphicsResource* cudaGraphicsResource_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef cudaOutputMode cudaOutputMode_t
 */
typedef struct cudaGraphicsResource *__pyx_t_4cuda_7ccudart_cudaGraphicsResource_t;

/* "cuda/ccudart.pxd":938
 * ctypedef cudaGraphicsResource* cudaGraphicsResource_t
 * 
 * ctypedef cudaOutputMode cudaOutputMode_t             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef enum __pyx_t_4cuda_7ccudart_cudaOutputMode __pyx_t_4cuda_7ccudart_cudaOutputMode_t;

/* "cuda/ccudart.pxd":943
 *     cdef struct CUexternalMemory_st:
 *         pass
 * ctypedef CUexternalMemory_st* cudaExternalMemory_t             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUexternalMemory_st *__pyx_t_4cuda_7ccudart_cudaExternalMemory_t;

/* "cuda/ccudart.pxd":948
 *     cdef struct CUexternalSemaphore_st:
 *         pass
 * ctypedef CUexternalSemaphore_st* cudaExternalSemaphore_t             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUexternalSemaphore_st *__pyx_t_4cuda_7ccudart_cudaExternalSemaphore_t;

/* "cuda/ccudart.pxd":953
 *     cdef struct CUgraph_st:
 *         pass
 * ctypedef CUgraph_st* cudaGraph_t             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUgraph_st *__pyx_t_4cuda_7ccudart_cudaGraph_t;

/* "cuda/ccudart.pxd":958
 *     cdef struct CUgraphNode_st:
 *         pass
 * ctypedef CUgraphNode_st* cudaGraphNode_t             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUgraphNode_st *__pyx_t_4cuda_7ccudart_cudaGraphNode_t;

/* "cuda/ccudart.pxd":963
 *     cdef struct CUuserObject_st:
 *         pass
 * ctypedef CUuserObject_st* cudaUserObject_t             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUuserObject_st *__pyx_t_4cuda_7ccudart_cudaUserObject_t;

/* "cuda/ccudart.pxd":968
 *     cdef struct CUfunc_st:
 *         pass
 * ctypedef CUfunc_st* cudaFunction_t             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct CUfunc_st *__pyx_t_4cuda_7ccudart_cudaFunction_t;

/* "cuda/ccudart.pxd":973
 *     cdef struct CUmemPoolHandle_st:
 *         pass
 * ctypedef CUmemPoolHandle_st* cudaMemPool_t             # <<<<<<<<<<<<<<
 * 
 * cdef enum cudaCGScope:
 */
typedef struct CUmemPoolHandle_st *__pyx_t_4cuda_7ccudart_cudaMemPool_t;

/* "cuda/ccudart.pxd":980
 *     cudaCGScopeMultiGrid = 2
 * 
 * cdef struct cudaKernelNodeParams:             # <<<<<<<<<<<<<<
 *     void* func
 *     dim3 gridDim
 */
struct __pyx_t_4cuda_7ccudart_cudaKernelNodeParams {
  void *func;
  struct __pyx_t_4cuda_7ccudart_dim3 gridDim;
  struct __pyx_t_4cuda_7ccudart_dim3 blockDim;
  unsigned int sharedMemBytes;
  void **kernelParams;
  void **extra;
};

/* "cuda/ccudart.pxd":988
 *     void** extra
 * 
 * cdef struct cudaExternalSemaphoreSignalNodeParams:             # <<<<<<<<<<<<<<
 *     cudaExternalSemaphore_t* extSemArray
 *     const cudaExternalSemaphoreSignalParams* paramsArray
 */
struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreSignalNodeParams {
  __pyx_t_4cuda_7ccudart_cudaExternalSemaphore_t *extSemArray;
  struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreSignalParams const *paramsArray;
  unsigned int numExtSems;
};

/* "cuda/ccudart.pxd":993
 *     unsigned int numExtSems
 * 
 * cdef struct cudaExternalSemaphoreWaitNodeParams:             # <<<<<<<<<<<<<<
 *     cudaExternalSemaphore_t* extSemArray
 *     const cudaExternalSemaphoreWaitParams* paramsArray
 */
struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreWaitNodeParams {
  __pyx_t_4cuda_7ccudart_cudaExternalSemaphore_t *extSemArray;
  struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreWaitParams const *paramsArray;
  unsigned int numExtSems;
};

/* "cuda/ccudart.pxd":1016
 *     cdef struct CUgraphExec_st:
 *         pass
 * ctypedef CUgraphExec_st* cudaGraphExec_t             # <<<<<<<<<<<<<<
 * 
 * cdef enum cudaGraphExecUpdateResult:
 */
typedef struct CUgraphExec_st *__pyx_t_4cuda_7ccudart_cudaGraphExec_t;

/* "cuda/ccudart.pxd":1074
 *     cudaReadModeNormalizedFloat = 1
 * 
 * cdef struct cudaTextureDesc:             # <<<<<<<<<<<<<<
 *     cudaTextureAddressMode addressMode[3]
 *     cudaTextureFilterMode filterMode
 */
struct __pyx_t_4cuda_7ccudart_cudaTextureDesc {
  enum __pyx_t_4cuda_7ccudart_cudaTextureAddressMode addressMode[3];
  enum __pyx_t_4cuda_7ccudart_cudaTextureFilterMode filterMode;
  enum __pyx_t_4cuda_7ccudart_cudaTextureReadMode readMode;
  int sRGB;
  float borderColor[4];
  int normalizedCoords;
  unsigned int maxAnisotropy;
  enum __pyx_t_4cuda_7ccudart_cudaTextureFilterMode mipmapFilterMode;
  float mipmapLevelBias;
  float minMipmapLevelClamp;
  float maxMipmapLevelClamp;
  int disableTrilinearOptimization;
  int seamlessCubemap;
};

/* "cuda/ccudart.pxd":1121
 *     CUDA_C_64U = 27
 * 
 * ctypedef cudaDataType_t cudaDataType             # <<<<<<<<<<<<<<
 * 
 * cdef enum libraryPropertyType_t:
 */
typedef enum __pyx_t_4cuda_7ccudart_cudaDataType_t __pyx_t_4cuda_7ccudart_cudaDataType;

/* "cuda/ccudart.pxd":1128
 *     PATCH_LEVEL = 2
 * 
 * ctypedef libraryPropertyType_t libraryPropertyType             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceReset() nogil except ?cudaErrorCallRequiresNewerDriver
 */
typedef enum __pyx_t_4cuda_7ccudart_libraryPropertyType_t __pyx_t_4cuda_7ccudart_libraryPropertyType;

/* "cuda/ccudart.pxd":1234
 * cdef cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver
 * 
 * ctypedef void (*cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void* userData)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver
 */
typedef void (*__pyx_t_4cuda_7ccudart_cudaStreamCallback_t)(__pyx_t_4cuda_7ccudart_cudaStream_t, __pyx_t_4cuda_7ccudart_cudaError_t, void *);

/* "cuda/ccudart.pxd":1671
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLImageKHR             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef void *__pyx_t_4cuda_7ccudart_EGLImageKHR;

/* "cuda/ccudart.pxd":1676
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLStreamKHR             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned int EGLint
 */
typedef void *__pyx_t_4cuda_7ccudart_EGLStreamKHR;

/* "cuda/ccudart.pxd":1683
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLSyncKHR             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpDevice
 */
typedef void *__pyx_t_4cuda_7ccudart_EGLSyncKHR;

/* "cuda/ccudart.pxd":1721
 *     cudaEglFrameTypePitch = 1
 * 
 * ctypedef cudaEglFrameType_enum cudaEglFrameType             # <<<<<<<<<<<<<<
 * 
 * cdef enum cudaEglResourceLocationFlags_enum:
 */
typedef enum __pyx_t_4cuda_7ccudart_cudaEglFrameType_enum __pyx_t_4cuda_7ccudart_cudaEglFrameType;

/* "cuda/ccudart.pxd":1727
 *     cudaEglResourceLocationVidmem = 1
 * 
 * ctypedef cudaEglResourceLocationFlags_enum cudaEglResourceLocationFlags             # <<<<<<<<<<<<<<
 * 
 * cdef enum cudaEglColorFormat_enum:
 */
typedef enum __pyx_t_4cuda_7ccudart_cudaEglResourceLocationFlags_enum __pyx_t_4cuda_7ccudart_cudaEglResourceLocationFlags;

/* "cuda/ccudart.pxd":1841
 *     cudaEglColorFormatY12V12U12_444SemiPlanar_709_ER = 113
 * 
 * ctypedef cudaEglColorFormat_enum cudaEglColorFormat             # <<<<<<<<<<<<<<
 * 
 * cdef struct cudaEglPlaneDesc_st:
 */
typedef enum __pyx_t_4cuda_7ccudart_cudaEglColorFormat_enum __pyx_t_4cuda_7ccudart_cudaEglColorFormat;

/* "cuda/ccudart.pxd":1843
 * ctypedef cudaEglColorFormat_enum cudaEglColorFormat
 * 
 * cdef struct cudaEglPlaneDesc_st:             # <<<<<<<<<<<<<<
 *     unsigned int width
 *     unsigned int height
 */
struct __pyx_t_4cuda_7ccudart_cudaEglPlaneDesc_st {
  unsigned int width;
  unsigned int height;
  unsigned int depth;
  unsigned int pitch;
  unsigned int numChannels;
  struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc channelDesc;
  unsigned int reserved[4];
};

/* "cuda/ccudart.pxd":1852
 *     unsigned int reserved[4]
 * 
 * ctypedef cudaEglPlaneDesc_st cudaEglPlaneDesc             # <<<<<<<<<<<<<<
 * 
 * cdef union _cudaEglFrame_cudaEglFrame_cudaEglFrame_st_frame_u:
 */
typedef struct __pyx_t_4cuda_7ccudart_cudaEglPlaneDesc_st __pyx_t_4cuda_7ccudart_cudaEglPlaneDesc;

/* "cuda/ccudart.pxd":1854
 * ctypedef cudaEglPlaneDesc_st cudaEglPlaneDesc
 * 
 * cdef union _cudaEglFrame_cudaEglFrame_cudaEglFrame_st_frame_u:             # <<<<<<<<<<<<<<
 *     cudaArray_t pArray[3]
 *     cudaPitchedPtr pPitch[3]
 */
union __pyx_t_4cuda_7ccudart__cudaEglFrame_cudaEglFrame_cudaEglFrame_st_frame_u {
  __pyx_t_4cuda_7ccudart_cudaArray_t pArray[3];
  struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr pPitch[3];
};

/* "cuda/ccudart.pxd":1858
 *     cudaPitchedPtr pPitch[3]
 * 
 * cdef struct cudaEglFrame_st:             # <<<<<<<<<<<<<<
 *     _cudaEglFrame_cudaEglFrame_cudaEglFrame_st_frame_u frame
 *     cudaEglPlaneDesc planeDesc[3]
 */
struct __pyx_t_4cuda_7ccudart_cudaEglFrame_st {
  union __pyx_t_4cuda_7ccudart__cudaEglFrame_cudaEglFrame_cudaEglFrame_st_frame_u frame;
  __pyx_t_4cuda_7ccudart_cudaEglPlaneDesc planeDesc[3];
  unsigned int planeCount;
  __pyx_t_4cuda_7ccudart_cudaEglFrameType frameType;
  __pyx_t_4cuda_7ccudart_cudaEglColorFormat eglColorFormat;
};

/* "cuda/ccudart.pxd":1865
 *     cudaEglColorFormat eglColorFormat
 * 
 * ctypedef cudaEglFrame_st cudaEglFrame             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct __pyx_t_4cuda_7ccudart_cudaEglFrame_st __pyx_t_4cuda_7ccudart_cudaEglFrame;

/* "cuda/ccudart.pxd":1870
 *     cdef struct CUeglStreamConnection_st:
 *         pass
 * ctypedef CUeglStreamConnection_st* cudaEglStreamConnection             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsEGLRegisterImage(cudaGraphicsResource_t* pCudaResource, EGLImageKHR image, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver
 */
typedef struct CUeglStreamConnection_st *__pyx_t_4cuda_7ccudart_cudaEglStreamConnection;

/* "cuda/_lib/ccudart/utils.pxd":14
 * cimport cuda._cuda.ccuda as ccuda
 * 
 * cdef class cudaPythonGlobal:             # <<<<<<<<<<<<<<
 *     cdef bint _cudaPythonInit
 *     cdef int _numDevices
 */
struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal {
  PyObject_HEAD
  struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *__pyx_vtab;
  int _cudaPythonInit;
  int _numDevices;
  __pyx_t_4cuda_5ccuda_CUdevice *_driverDevice;
  __pyx_t_4cuda_5ccuda_CUcontext *_driverContext;
  bool *_deviceInit;
  struct __pyx_t_4cuda_7ccudart_cudaDeviceProp *_deviceProperties;
  __pyx_t_4cuda_7ccudart_cudaError_t _lastError;
  int CUDART_VERSION;
};



struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal {
  __pyx_t_4cuda_7ccudart_cudaError_t (*lazyInit)(struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *);
  __pyx_t_4cuda_7ccudart_cudaError_t (*lazyInitDevice)(struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *, int);
};
static struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *__pyx_vtabptr_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
      static PyCodeObject *__pyx_frame_code = NULL;\
      CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
      int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
      if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
#if PY_VERSION_HEX >= 0x030b00a2
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate) PyThreadState_EnterTracing(tstate)
  #define __Pyx_LeaveTracing(tstate) PyThreadState_LeaveTracing(tstate)
#elif PY_VERSION_HEX >= 0x030a00b1
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate)\
      do { tstate->tracing++; tstate->cframe->use_tracing = 0; } while (0)
  #define __Pyx_LeaveTracing(tstate)\
      do {\
          tstate->tracing--;\
          tstate->cframe->use_tracing = ((CYTHON_TRACE && tstate->c_tracefunc != NULL)\
                                 || tstate->c_profilefunc != NULL);\
      } while (0)
#else
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate)\
      do { tstate->tracing++; tstate->use_tracing = 0; } while (0)
  #define __Pyx_LeaveTracing(tstate)\
      do {\
          tstate->tracing--;\
          tstate->use_tracing = ((CYTHON_TRACE && tstate->c_tracefunc != NULL)\
                                         || tstate->c_profilefunc != NULL);\
      } while (0)
#endif
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 1, 1)) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 1)) {\
          __Pyx_EnterTracing(tstate);\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          __Pyx_LeaveTracing(tstate);\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_EnterTracing(tstate);
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      __Pyx_LeaveTracing(tstate);
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0)) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0)) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0)) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      __Pyx_EnterTracing(tstate);
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      __Pyx_LeaveTracing(tstate);
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void); /* proto */

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.stdint' */

/* Module declarations from 'cuda.ccuda' */

/* Module declarations from 'cuda._cuda.ccuda' */
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuDeviceGetNvSciSyncAttributes)(void *, __pyx_t_4cuda_5ccuda_CUdevice, int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuDeviceSetMemPool)(__pyx_t_4cuda_5ccuda_CUdevice, __pyx_t_4cuda_5ccuda_CUmemoryPool); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuDeviceGetMemPool)(__pyx_t_4cuda_5ccuda_CUmemoryPool *, __pyx_t_4cuda_5ccuda_CUdevice); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuDeviceGetDefaultMemPool)(__pyx_t_4cuda_5ccuda_CUmemoryPool *, __pyx_t_4cuda_5ccuda_CUdevice); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuFlushGPUDirectRDMAWrites)(__pyx_t_4cuda_5ccuda_CUflushGPUDirectRDMAWritesTarget, __pyx_t_4cuda_5ccuda_CUflushGPUDirectRDMAWritesScope); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuCtxSynchronize)(void); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuCtxSetLimit)(__pyx_t_4cuda_5ccuda_CUlimit, size_t); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuCtxGetLimit)(size_t *, __pyx_t_4cuda_5ccuda_CUlimit); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuCtxGetCacheConfig)(__pyx_t_4cuda_5ccuda_CUfunc_cache *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuCtxSetCacheConfig)(__pyx_t_4cuda_5ccuda_CUfunc_cache); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuCtxGetSharedMemConfig)(__pyx_t_4cuda_5ccuda_CUsharedconfig *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuCtxSetSharedMemConfig)(__pyx_t_4cuda_5ccuda_CUsharedconfig); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuCtxGetStreamPriorityRange)(int *, int *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuCtxResetPersistingL2Cache)(void); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemGetInfo_v2)(size_t *, size_t *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemAlloc_v2)(__pyx_t_4cuda_5ccuda_CUdeviceptr *, size_t); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemFree_v2)(__pyx_t_4cuda_5ccuda_CUdeviceptr); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemFreeHost)(void *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemHostAlloc)(void **, size_t, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemHostGetDevicePointer_v2)(__pyx_t_4cuda_5ccuda_CUdeviceptr *, void *, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemHostGetFlags)(unsigned int *, void *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemAllocManaged)(__pyx_t_4cuda_5ccuda_CUdeviceptr *, size_t, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuIpcGetEventHandle)(__pyx_t_4cuda_5ccuda_CUipcEventHandle *, __pyx_t_4cuda_5ccuda_CUevent); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuIpcOpenEventHandle)(__pyx_t_4cuda_5ccuda_CUevent *, __pyx_t_4cuda_5ccuda_CUipcEventHandle); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuIpcGetMemHandle)(__pyx_t_4cuda_5ccuda_CUipcMemHandle *, __pyx_t_4cuda_5ccuda_CUdeviceptr); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuIpcOpenMemHandle_v2)(__pyx_t_4cuda_5ccuda_CUdeviceptr *, __pyx_t_4cuda_5ccuda_CUipcMemHandle, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuIpcCloseMemHandle)(__pyx_t_4cuda_5ccuda_CUdeviceptr); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemHostRegister_v2)(void *, size_t, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemHostUnregister)(void *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemsetD8_v2)(__pyx_t_4cuda_5ccuda_CUdeviceptr, unsigned char, size_t); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemsetD2D8_v2)(__pyx_t_4cuda_5ccuda_CUdeviceptr, size_t, unsigned char, size_t, size_t); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemsetD8Async)(__pyx_t_4cuda_5ccuda_CUdeviceptr, unsigned char, size_t, __pyx_t_4cuda_5ccuda_CUstream); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemsetD2D8Async)(__pyx_t_4cuda_5ccuda_CUdeviceptr, size_t, unsigned char, size_t, size_t, __pyx_t_4cuda_5ccuda_CUstream); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuArrayGetPlane)(__pyx_t_4cuda_5ccuda_CUarray *, __pyx_t_4cuda_5ccuda_CUarray, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuArrayDestroy)(__pyx_t_4cuda_5ccuda_CUarray); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMipmappedArrayGetLevel)(__pyx_t_4cuda_5ccuda_CUarray *, __pyx_t_4cuda_5ccuda_CUmipmappedArray, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMipmappedArrayDestroy)(__pyx_t_4cuda_5ccuda_CUmipmappedArray); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemFreeAsync)(__pyx_t_4cuda_5ccuda_CUdeviceptr, __pyx_t_4cuda_5ccuda_CUstream); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemAllocAsync)(__pyx_t_4cuda_5ccuda_CUdeviceptr *, size_t, __pyx_t_4cuda_5ccuda_CUstream); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolTrimTo)(__pyx_t_4cuda_5ccuda_CUmemoryPool, size_t); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolSetAttribute)(__pyx_t_4cuda_5ccuda_CUmemoryPool, __pyx_t_4cuda_5ccuda_CUmemPool_attribute, void *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolGetAttribute)(__pyx_t_4cuda_5ccuda_CUmemoryPool, __pyx_t_4cuda_5ccuda_CUmemPool_attribute, void *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolGetAccess)(__pyx_t_4cuda_5ccuda_CUmemAccess_flags *, __pyx_t_4cuda_5ccuda_CUmemoryPool, __pyx_t_4cuda_5ccuda_CUmemLocation *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolCreate)(__pyx_t_4cuda_5ccuda_CUmemoryPool *, __pyx_t_4cuda_5ccuda_CUmemPoolProps const *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolDestroy)(__pyx_t_4cuda_5ccuda_CUmemoryPool); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemAllocFromPoolAsync)(__pyx_t_4cuda_5ccuda_CUdeviceptr *, size_t, __pyx_t_4cuda_5ccuda_CUmemoryPool, __pyx_t_4cuda_5ccuda_CUstream); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolExportToShareableHandle)(void *, __pyx_t_4cuda_5ccuda_CUmemoryPool, __pyx_t_4cuda_5ccuda_CUmemAllocationHandleType, unsigned PY_LONG_LONG); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolImportFromShareableHandle)(__pyx_t_4cuda_5ccuda_CUmemoryPool *, void *, __pyx_t_4cuda_5ccuda_CUmemAllocationHandleType, unsigned PY_LONG_LONG); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolExportPointer)(__pyx_t_4cuda_5ccuda_CUmemPoolPtrExportData *, __pyx_t_4cuda_5ccuda_CUdeviceptr); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolImportPointer)(__pyx_t_4cuda_5ccuda_CUdeviceptr *, __pyx_t_4cuda_5ccuda_CUmemoryPool, __pyx_t_4cuda_5ccuda_CUmemPoolPtrExportData *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuMemPrefetchAsync)(__pyx_t_4cuda_5ccuda_CUdeviceptr, size_t, __pyx_t_4cuda_5ccuda_CUdevice, __pyx_t_4cuda_5ccuda_CUstream); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuStreamCreate)(__pyx_t_4cuda_5ccuda_CUstream *, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuStreamCreateWithPriority)(__pyx_t_4cuda_5ccuda_CUstream *, unsigned int, int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuStreamGetPriority)(__pyx_t_4cuda_5ccuda_CUstream, int *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuStreamGetFlags)(__pyx_t_4cuda_5ccuda_CUstream, unsigned int *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuStreamWaitEvent)(__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUevent, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuStreamBeginCapture_v2)(__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUstreamCaptureMode); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuThreadExchangeStreamCaptureMode)(__pyx_t_4cuda_5ccuda_CUstreamCaptureMode *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuStreamEndCapture)(__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUgraph *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuStreamIsCapturing)(__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUstreamCaptureStatus *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuStreamUpdateCaptureDependencies)(__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUgraphNode *, size_t, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuStreamAttachMemAsync)(__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUdeviceptr, size_t, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuStreamQuery)(__pyx_t_4cuda_5ccuda_CUstream); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuStreamSynchronize)(__pyx_t_4cuda_5ccuda_CUstream); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuStreamDestroy_v2)(__pyx_t_4cuda_5ccuda_CUstream); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuStreamCopyAttributes)(__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUstream); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuStreamGetAttribute)(__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUstreamAttrID, __pyx_t_4cuda_5ccuda_CUstreamAttrValue *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuStreamSetAttribute)(__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUstreamAttrID, __pyx_t_4cuda_5ccuda_CUstreamAttrValue const *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuEventCreate)(__pyx_t_4cuda_5ccuda_CUevent *, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuEventRecord)(__pyx_t_4cuda_5ccuda_CUevent, __pyx_t_4cuda_5ccuda_CUstream); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuEventRecordWithFlags)(__pyx_t_4cuda_5ccuda_CUevent, __pyx_t_4cuda_5ccuda_CUstream, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuEventSynchronize)(__pyx_t_4cuda_5ccuda_CUevent); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuEventDestroy_v2)(__pyx_t_4cuda_5ccuda_CUevent); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuEventElapsedTime)(float *, __pyx_t_4cuda_5ccuda_CUevent, __pyx_t_4cuda_5ccuda_CUevent); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuDestroyExternalMemory)(__pyx_t_4cuda_5ccuda_CUexternalMemory); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuDestroyExternalSemaphore)(__pyx_t_4cuda_5ccuda_CUexternalSemaphore); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuFuncSetAttribute)(__pyx_t_4cuda_5ccuda_CUfunction, __pyx_t_4cuda_5ccuda_CUfunction_attribute, int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuFuncSetCacheConfig)(__pyx_t_4cuda_5ccuda_CUfunction, __pyx_t_4cuda_5ccuda_CUfunc_cache); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuFuncSetSharedMemConfig)(__pyx_t_4cuda_5ccuda_CUfunction, __pyx_t_4cuda_5ccuda_CUsharedconfig); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuLaunchHostFunc)(__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUhostFn, void *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphCreate)(__pyx_t_4cuda_5ccuda_CUgraph *, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddKernelNode)(__pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t, __pyx_t_4cuda_5ccuda_CUDA_KERNEL_NODE_PARAMS const *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphKernelNodeSetParams)(__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_KERNEL_NODE_PARAMS const *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphMemsetNodeGetParams)(__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_MEMSET_NODE_PARAMS *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphMemsetNodeSetParams)(__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_MEMSET_NODE_PARAMS const *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddHostNode)(__pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t, __pyx_t_4cuda_5ccuda_CUDA_HOST_NODE_PARAMS const *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphHostNodeGetParams)(__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_HOST_NODE_PARAMS *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphHostNodeSetParams)(__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_HOST_NODE_PARAMS const *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddChildGraphNode)(__pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t, __pyx_t_4cuda_5ccuda_CUgraph); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphChildGraphNodeGetGraph)(__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUgraph *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddEmptyNode)(__pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddEventRecordNode)(__pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t, __pyx_t_4cuda_5ccuda_CUevent); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphEventRecordNodeGetEvent)(__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUevent *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphEventRecordNodeSetEvent)(__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUevent); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddEventWaitNode)(__pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t, __pyx_t_4cuda_5ccuda_CUevent); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphEventWaitNodeGetEvent)(__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUevent *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphEventWaitNodeSetEvent)(__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUevent); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddExternalSemaphoresSignalNode)(__pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t, __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS const *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExternalSemaphoresSignalNodeGetParams)(__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExternalSemaphoresSignalNodeSetParams)(__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS const *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddExternalSemaphoresWaitNode)(__pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t, __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS const *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExternalSemaphoresWaitNodeGetParams)(__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExternalSemaphoresWaitNodeSetParams)(__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS const *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddMemFreeNode)(__pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t, __pyx_t_4cuda_5ccuda_CUdeviceptr); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuDeviceGraphMemTrim)(__pyx_t_4cuda_5ccuda_CUdevice); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuDeviceGetGraphMemAttribute)(__pyx_t_4cuda_5ccuda_CUdevice, __pyx_t_4cuda_5ccuda_CUgraphMem_attribute, void *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuDeviceSetGraphMemAttribute)(__pyx_t_4cuda_5ccuda_CUdevice, __pyx_t_4cuda_5ccuda_CUgraphMem_attribute, void *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphClone)(__pyx_t_4cuda_5ccuda_CUgraph *, __pyx_t_4cuda_5ccuda_CUgraph); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphNodeFindInClone)(__pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUgraph); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphNodeGetType)(__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUgraphNodeType *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphGetNodes)(__pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode *, size_t *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphGetRootNodes)(__pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode *, size_t *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphGetEdges)(__pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraphNode *, size_t *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphNodeGetDependencies)(__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUgraphNode *, size_t *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphNodeGetDependentNodes)(__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUgraphNode *, size_t *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddDependencies)(__pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphRemoveDependencies)(__pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphDestroyNode)(__pyx_t_4cuda_5ccuda_CUgraphNode); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphInstantiate_v2)(__pyx_t_4cuda_5ccuda_CUgraphExec *, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode *, char *, size_t); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphInstantiateWithFlags)(__pyx_t_4cuda_5ccuda_CUgraphExec *, __pyx_t_4cuda_5ccuda_CUgraph, unsigned PY_LONG_LONG); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecKernelNodeSetParams)(__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_KERNEL_NODE_PARAMS const *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecHostNodeSetParams)(__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_HOST_NODE_PARAMS const *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecChildGraphNodeSetParams)(__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUgraph); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecEventRecordNodeSetEvent)(__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUevent); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecEventWaitNodeSetEvent)(__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUevent); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecExternalSemaphoresSignalNodeSetParams)(__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS const *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecExternalSemaphoresWaitNodeSetParams)(__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS const *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphNodeSetEnabled)(__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUgraphNode, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphNodeGetEnabled)(__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUgraphNode, unsigned int *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphUpload)(__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUstream); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphLaunch)(__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUstream); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecDestroy)(__pyx_t_4cuda_5ccuda_CUgraphExec); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphDestroy)(__pyx_t_4cuda_5ccuda_CUgraph); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecUpdate)(__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraphExecUpdateResult *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphKernelNodeCopyAttributes)(__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUgraphNode); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphKernelNodeGetAttribute)(__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUkernelNodeAttrID, __pyx_t_4cuda_5ccuda_CUkernelNodeAttrValue *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphKernelNodeSetAttribute)(__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUkernelNodeAttrID, __pyx_t_4cuda_5ccuda_CUkernelNodeAttrValue const *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphDebugDotPrint)(__pyx_t_4cuda_5ccuda_CUgraph, char const *, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuUserObjectCreate)(__pyx_t_4cuda_5ccuda_CUuserObject *, void *, __pyx_t_4cuda_5ccuda_CUhostFn, unsigned int, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuUserObjectRetain)(__pyx_t_4cuda_5ccuda_CUuserObject, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuUserObjectRelease)(__pyx_t_4cuda_5ccuda_CUuserObject, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphRetainUserObject)(__pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUuserObject, unsigned int, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphReleaseUserObject)(__pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUuserObject, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuOccupancyMaxActiveBlocksPerMultiprocessor)(int *, __pyx_t_4cuda_5ccuda_CUfunction, int, size_t); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags)(int *, __pyx_t_4cuda_5ccuda_CUfunction, int, size_t, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuOccupancyAvailableDynamicSMemPerBlock)(size_t *, __pyx_t_4cuda_5ccuda_CUfunction, int, int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuTexObjectDestroy)(__pyx_t_4cuda_5ccuda_CUtexObject); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuSurfObjectDestroy)(__pyx_t_4cuda_5ccuda_CUsurfObject); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsUnregisterResource)(__pyx_t_4cuda_5ccuda_CUgraphicsResource); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsSubResourceGetMappedArray)(__pyx_t_4cuda_5ccuda_CUarray *, __pyx_t_4cuda_5ccuda_CUgraphicsResource, unsigned int, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsResourceGetMappedMipmappedArray)(__pyx_t_4cuda_5ccuda_CUmipmappedArray *, __pyx_t_4cuda_5ccuda_CUgraphicsResource); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsResourceGetMappedPointer_v2)(__pyx_t_4cuda_5ccuda_CUdeviceptr *, size_t *, __pyx_t_4cuda_5ccuda_CUgraphicsResource); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsResourceSetMapFlags_v2)(__pyx_t_4cuda_5ccuda_CUgraphicsResource, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsMapResources)(unsigned int, __pyx_t_4cuda_5ccuda_CUgraphicsResource *, __pyx_t_4cuda_5ccuda_CUstream); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsUnmapResources)(unsigned int, __pyx_t_4cuda_5ccuda_CUgraphicsResource *, __pyx_t_4cuda_5ccuda_CUstream); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGetExportTable)(void const **, __pyx_t_4cuda_5ccuda_CUuuid const *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuProfilerStart)(void); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuProfilerStop)(void); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuVDPAUGetDevice)(__pyx_t_4cuda_5ccuda_CUdevice *, __pyx_t_4cuda_5ccuda_VdpDevice, __pyx_t_4cuda_5ccuda_VdpGetProcAddress *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsVDPAURegisterVideoSurface)(__pyx_t_4cuda_5ccuda_CUgraphicsResource *, __pyx_t_4cuda_5ccuda_VdpVideoSurface, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsVDPAURegisterOutputSurface)(__pyx_t_4cuda_5ccuda_CUgraphicsResource *, __pyx_t_4cuda_5ccuda_VdpOutputSurface, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsEGLRegisterImage)(__pyx_t_4cuda_5ccuda_CUgraphicsResource *, __pyx_t_4cuda_5ccuda_EGLImageKHR, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamConsumerConnect)(__pyx_t_4cuda_5ccuda_CUeglStreamConnection *, __pyx_t_4cuda_5ccuda_EGLStreamKHR); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamConsumerConnectWithFlags)(__pyx_t_4cuda_5ccuda_CUeglStreamConnection *, __pyx_t_4cuda_5ccuda_EGLStreamKHR, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamConsumerDisconnect)(__pyx_t_4cuda_5ccuda_CUeglStreamConnection *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamConsumerAcquireFrame)(__pyx_t_4cuda_5ccuda_CUeglStreamConnection *, __pyx_t_4cuda_5ccuda_CUgraphicsResource *, __pyx_t_4cuda_5ccuda_CUstream *, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamConsumerReleaseFrame)(__pyx_t_4cuda_5ccuda_CUeglStreamConnection *, __pyx_t_4cuda_5ccuda_CUgraphicsResource, __pyx_t_4cuda_5ccuda_CUstream *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamProducerConnect)(__pyx_t_4cuda_5ccuda_CUeglStreamConnection *, __pyx_t_4cuda_5ccuda_EGLStreamKHR, __pyx_t_4cuda_5ccuda_EGLint, __pyx_t_4cuda_5ccuda_EGLint); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamProducerDisconnect)(__pyx_t_4cuda_5ccuda_CUeglStreamConnection *); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuEventCreateFromEGLSync)(__pyx_t_4cuda_5ccuda_CUevent *, __pyx_t_4cuda_5ccuda_EGLSyncKHR, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsGLRegisterBuffer)(__pyx_t_4cuda_5ccuda_CUgraphicsResource *, __pyx_t_4cuda_5ccuda_GLuint, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsGLRegisterImage)(__pyx_t_4cuda_5ccuda_CUgraphicsResource *, __pyx_t_4cuda_5ccuda_GLuint, __pyx_t_4cuda_5ccuda_GLenum, unsigned int); /*proto*/
static __pyx_t_4cuda_5ccuda_CUresult (*__pyx_f_4cuda_5_cuda_5ccuda__cuGLGetDevices_v2)(unsigned int *, __pyx_t_4cuda_5ccuda_CUdevice *, unsigned int, __pyx_t_4cuda_5ccuda_CUGLDeviceList); /*proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'cuda._lib.ccudart.ccudart' */
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy)(void *, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamCreate)(__pyx_t_4cuda_7ccudart_cudaStream_t *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventCreate)(__pyx_t_4cuda_7ccudart_cudaEvent_t *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventQuery)(__pyx_t_4cuda_7ccudart_cudaEvent_t); /*proto*/
static struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCreateChannelDesc)(int, int, int, int, enum __pyx_t_4cuda_7ccudart_cudaChannelFormatKind); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDriverGetVersion)(int *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaRuntimeGetVersion)(int *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetTexture1DLinearMaxWidth)(size_t *, struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc const *, int); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocHost)(void **, size_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocPitch)(void **, size_t *, size_t, size_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocMipmappedArray)(__pyx_t_4cuda_7ccudart_cudaMipmappedArray_t *, struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc const *, struct __pyx_t_4cuda_7ccudart_cudaExtent, unsigned int, unsigned int); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2D)(void *, size_t, void const *, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DAsync)(void *, size_t, void const *, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind, __pyx_t_4cuda_7ccudart_cudaStream_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyAsync)(void *, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind, __pyx_t_4cuda_7ccudart_cudaStream_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemcpyNode)(__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t, struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms const *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemcpyNode1D)(__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t, void *, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemcpyNodeSetParams1D)(__pyx_t_4cuda_7ccudart_cudaGraphNode_t, void *, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecMemcpyNodeSetParams)(__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms const *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecMemcpyNodeSetParams1D)(__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t, void *, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDriverEntryPoint)(char const *, void **, unsigned PY_LONG_LONG); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemsetNode)(__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t, struct __pyx_t_4cuda_7ccudart_cudaMemsetParams const *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecMemsetNodeSetParams)(__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaMemsetParams const *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemcpyNodeSetParams)(__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms const *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemcpyNodeGetParams)(__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFuncGetAttributes)(struct __pyx_t_4cuda_7ccudart_cudaFuncAttributes *, void const *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocArray)(__pyx_t_4cuda_7ccudart_cudaArray_t *, struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc const *, size_t, size_t, unsigned int); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMalloc3D)(struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr *, struct __pyx_t_4cuda_7ccudart_cudaExtent); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMalloc3DArray)(__pyx_t_4cuda_7ccudart_cudaArray_t *, struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc const *, struct __pyx_t_4cuda_7ccudart_cudaExtent, unsigned int); /*proto*/
static char const *(*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetErrorString)(__pyx_t_4cuda_7ccudart_cudaError_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamAddCallback)(__pyx_t_4cuda_7ccudart_cudaStream_t, __pyx_t_4cuda_7ccudart_cudaStreamCallback_t, void *, unsigned int); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetCaptureInfo)(__pyx_t_4cuda_7ccudart_cudaStream_t, enum __pyx_t_4cuda_7ccudart_cudaStreamCaptureStatus *, unsigned PY_LONG_LONG *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetCaptureInfo_v2)(__pyx_t_4cuda_7ccudart_cudaStream_t, enum __pyx_t_4cuda_7ccudart_cudaStreamCaptureStatus *, unsigned PY_LONG_LONG *, __pyx_t_4cuda_7ccudart_cudaGraph_t *, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const **, size_t *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaImportExternalSemaphore)(__pyx_t_4cuda_7ccudart_cudaExternalSemaphore_t *, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreHandleDesc const *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSignalExternalSemaphoresAsync)(__pyx_t_4cuda_7ccudart_cudaExternalSemaphore_t const *, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreSignalParams const *, unsigned int, __pyx_t_4cuda_7ccudart_cudaStream_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaWaitExternalSemaphoresAsync)(__pyx_t_4cuda_7ccudart_cudaExternalSemaphore_t const *, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreWaitParams const *, unsigned int, __pyx_t_4cuda_7ccudart_cudaStream_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetInfo)(struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc *, struct __pyx_t_4cuda_7ccudart_cudaExtent *, unsigned int *, __pyx_t_4cuda_7ccudart_cudaArray_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DToArray)(__pyx_t_4cuda_7ccudart_cudaArray_t, size_t, size_t, void const *, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DFromArray)(void *, size_t, __pyx_t_4cuda_7ccudart_cudaArray_const_t, size_t, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DArrayToArray)(__pyx_t_4cuda_7ccudart_cudaArray_t, size_t, size_t, __pyx_t_4cuda_7ccudart_cudaArray_const_t, size_t, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DToArrayAsync)(__pyx_t_4cuda_7ccudart_cudaArray_t, size_t, size_t, void const *, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind, __pyx_t_4cuda_7ccudart_cudaStream_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DFromArrayAsync)(void *, size_t, __pyx_t_4cuda_7ccudart_cudaArray_const_t, size_t, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind, __pyx_t_4cuda_7ccudart_cudaStream_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset3D)(struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr, int, struct __pyx_t_4cuda_7ccudart_cudaExtent); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset3DAsync)(struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr, int, struct __pyx_t_4cuda_7ccudart_cudaExtent, __pyx_t_4cuda_7ccudart_cudaStream_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyToArray)(__pyx_t_4cuda_7ccudart_cudaArray_t, size_t, size_t, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyFromArray)(void *, __pyx_t_4cuda_7ccudart_cudaArray_const_t, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyToArrayAsync)(__pyx_t_4cuda_7ccudart_cudaArray_t, size_t, size_t, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind, __pyx_t_4cuda_7ccudart_cudaStream_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyFromArrayAsync)(void *, __pyx_t_4cuda_7ccudart_cudaArray_const_t, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind, __pyx_t_4cuda_7ccudart_cudaStream_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaPointerGetAttributes)(struct __pyx_t_4cuda_7ccudart_cudaPointerAttributes *, void const *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDeviceFlags)(unsigned int *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3D)(struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms const *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3DAsync)(struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms const *, __pyx_t_4cuda_7ccudart_cudaStream_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolSetAccess)(__pyx_t_4cuda_7ccudart_cudaMemPool_t, struct __pyx_t_4cuda_7ccudart_cudaMemAccessDesc const *, size_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceReset)(void); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaThreadExit)(void); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetLastError)(void); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaPeekAtLastError)(void); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDevice)(int *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSetDevice)(int); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDeviceProperties)(struct __pyx_t_4cuda_7ccudart_cudaDeviceProp *, int); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaChooseDevice)(int *, struct __pyx_t_4cuda_7ccudart_cudaDeviceProp const *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyArrayToArray)(__pyx_t_4cuda_7ccudart_cudaArray_t, size_t, size_t, __pyx_t_4cuda_7ccudart_cudaArray_const_t, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetChannelDesc)(struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc *, __pyx_t_4cuda_7ccudart_cudaArray_const_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCreateTextureObject)(__pyx_t_4cuda_7ccudart_cudaTextureObject_t *, struct __pyx_t_4cuda_7ccudart_cudaResourceDesc const *, struct __pyx_t_4cuda_7ccudart_cudaTextureDesc const *, struct __pyx_t_4cuda_7ccudart_cudaResourceViewDesc const *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetTextureObjectTextureDesc)(struct __pyx_t_4cuda_7ccudart_cudaTextureDesc *, __pyx_t_4cuda_7ccudart_cudaTextureObject_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetTextureObjectResourceViewDesc)(struct __pyx_t_4cuda_7ccudart_cudaResourceViewDesc *, __pyx_t_4cuda_7ccudart_cudaTextureObject_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3DPeer)(struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DPeerParms const *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3DPeerAsync)(struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DPeerParms const *, __pyx_t_4cuda_7ccudart_cudaStream_t); /*proto*/
static struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__make_cudaPitchedPtr)(void *, size_t, size_t, size_t); /*proto*/
static struct __pyx_t_4cuda_7ccudart_cudaPos (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__make_cudaPos)(size_t, size_t, size_t); /*proto*/
static struct __pyx_t_4cuda_7ccudart_cudaExtent (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__make_cudaExtent)(size_t, size_t, size_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSetDoubleForDevice)(double *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSetDoubleForHost)(double *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSetDeviceFlags)(unsigned int); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemAllocNode)(__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t, struct __pyx_t_4cuda_7ccudart_cudaMemAllocNodeParams *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemAllocNodeGetParams)(__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaMemAllocNodeParams *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemFreeNodeGetParams)(__pyx_t_4cuda_7ccudart_cudaGraphNode_t, void *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemAdvise)(void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemoryAdvise, int); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemRangeGetAttribute)(void *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemRangeAttribute, void const *, size_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemRangeGetAttributes)(void **, size_t *, enum __pyx_t_4cuda_7ccudart_cudaMemRangeAttribute *, size_t, void const *, size_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDeviceCount)(int *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetAttribute)(int *, enum __pyx_t_4cuda_7ccudart_cudaDeviceAttr, int); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetByPCIBusId)(int *, char const *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetPCIBusId)(char *, int, int); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetP2PAttribute)(int *, enum __pyx_t_4cuda_7ccudart_cudaDeviceP2PAttr, int, int); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetSparseProperties)(struct __pyx_t_4cuda_7ccudart_cudaArraySparseProperties *, __pyx_t_4cuda_7ccudart_cudaArray_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMipmappedArrayGetSparseProperties)(struct __pyx_t_4cuda_7ccudart_cudaArraySparseProperties *, __pyx_t_4cuda_7ccudart_cudaMipmappedArray_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceCanAccessPeer)(int *, int, int); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyPeer)(void *, int, void const *, int, size_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyPeerAsync)(void *, int, void const *, int, size_t, __pyx_t_4cuda_7ccudart_cudaStream_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceEnablePeerAccess)(int, unsigned int); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceDisablePeerAccess)(int); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaExternalMemoryGetMappedMipmappedArray)(__pyx_t_4cuda_7ccudart_cudaMipmappedArray_t *, __pyx_t_4cuda_7ccudart_cudaExternalMemory_t, struct __pyx_t_4cuda_7ccudart_cudaExternalMemoryMipmappedArrayDesc const *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetSurfaceObjectResourceDesc)(struct __pyx_t_4cuda_7ccudart_cudaResourceDesc *, __pyx_t_4cuda_7ccudart_cudaSurfaceObject_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphKernelNodeGetParams)(__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaKernelNodeParams *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaExternalMemoryGetMappedBuffer)(void **, __pyx_t_4cuda_7ccudart_cudaExternalMemory_t, struct __pyx_t_4cuda_7ccudart_cudaExternalMemoryBufferDesc const *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaImportExternalMemory)(__pyx_t_4cuda_7ccudart_cudaExternalMemory_t *, struct __pyx_t_4cuda_7ccudart_cudaExternalMemoryHandleDesc const *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCreateSurfaceObject)(__pyx_t_4cuda_7ccudart_cudaSurfaceObject_t *, struct __pyx_t_4cuda_7ccudart_cudaResourceDesc const *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetTextureObjectResourceDesc)(struct __pyx_t_4cuda_7ccudart_cudaResourceDesc *, __pyx_t_4cuda_7ccudart_cudaTextureObject_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaProfilerInitialize)(char const *, char const *, __pyx_t_4cuda_7ccudart_cudaOutputMode_t); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamProducerPresentFrame)(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_cudaEglFrame, __pyx_t_4cuda_7ccudart_cudaStream_t *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamProducerReturnFrame)(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_cudaEglFrame *, __pyx_t_4cuda_7ccudart_cudaStream_t *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsResourceGetMappedEglFrame)(__pyx_t_4cuda_7ccudart_cudaEglFrame *, __pyx_t_4cuda_7ccudart_cudaGraphicsResource_t, unsigned int, unsigned int); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaVDPAUSetVDPAUDevice)(int, __pyx_t_4cuda_7ccudart_VdpDevice, __pyx_t_4cuda_7ccudart_VdpGetProcAddress *); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetMemoryRequirements)(struct __pyx_t_4cuda_7ccudart_cudaArrayMemoryRequirements *, __pyx_t_4cuda_7ccudart_cudaArray_t, int); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMipmappedArrayGetMemoryRequirements)(struct __pyx_t_4cuda_7ccudart_cudaArrayMemoryRequirements *, __pyx_t_4cuda_7ccudart_cudaMipmappedArray_t, int); /*proto*/

/* Module declarations from 'cuda._lib.ccudart.utils' */
static PyTypeObject *__pyx_ptype_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal = 0;
static struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *(*__pyx_f_4cuda_4_lib_7ccudart_5utils_globalGetInstance)(void); /*proto*/
static __pyx_t_4cuda_7ccudart_cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError)(__pyx_t_4cuda_7ccudart_cudaError_t); /*proto*/

/* Module declarations from 'cuda.ccudart' */
static struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *__pyx_v_4cuda_7ccudart_m_global = 0;
#define __Pyx_MODULE_NAME "cuda.ccudart"
extern int __pyx_module_is_main_cuda__ccudart;
int __pyx_module_is_main_cuda__ccudart = 0;

/* Implementation of 'cuda.ccudart' */
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_test;
/* Late includes */

/* "cuda/ccudart.pyx":17
 * cdef cudaPythonGlobal m_global = globalGetInstance()
 * 
 * cdef cudaError_t cudaDeviceReset() nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceReset()
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceReset(void) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceReset", __pyx_f[0], 17, 1, __PYX_ERR(0, 17, __pyx_L1_error));

  /* "cuda/ccudart.pyx":18
 * 
 * cdef cudaError_t cudaDeviceReset() nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaDeviceReset()             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceSynchronize() nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceReset(); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 18, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":17
 * cdef cudaPythonGlobal m_global = globalGetInstance()
 * 
 * cdef cudaError_t cudaDeviceReset() nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceReset()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceReset", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":20
 *     return _cudaDeviceReset()
 * 
 * cdef cudaError_t cudaDeviceSynchronize() nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceSynchronize(void) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceSynchronize", __pyx_f[0], 20, 1, __PYX_ERR(0, 20, __pyx_L1_error));

  /* "cuda/ccudart.pyx":22
 * cdef cudaError_t cudaDeviceSynchronize() nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":23
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSynchronize()
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":24
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuCtxSynchronize()
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":23
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSynchronize()
 */
  }

  /* "cuda/ccudart.pyx":25
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSynchronize()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuCtxSynchronize(); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 25, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":26
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSynchronize()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":27
 *     err = <cudaError_t>ccuda._cuCtxSynchronize()
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":26
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSynchronize()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":28
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceSetLimit(cudaLimit limit, size_t value) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":20
 *     return _cudaDeviceReset()
 * 
 * cdef cudaError_t cudaDeviceSynchronize() nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceSynchronize", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":30
 *     return err
 * 
 * cdef cudaError_t cudaDeviceSetLimit(cudaLimit limit, size_t value) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceSetLimit(enum __pyx_t_4cuda_7ccudart_cudaLimit __pyx_v_limit, size_t __pyx_v_value) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceSetLimit", __pyx_f[0], 30, 1, __PYX_ERR(0, 30, __pyx_L1_error));

  /* "cuda/ccudart.pyx":32
 * cdef cudaError_t cudaDeviceSetLimit(cudaLimit limit, size_t value) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":33
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetLimit(<ccuda.CUlimit>limit, value)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":34
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuCtxSetLimit(<ccuda.CUlimit>limit, value)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":33
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetLimit(<ccuda.CUlimit>limit, value)
 */
  }

  /* "cuda/ccudart.pyx":35
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetLimit(<ccuda.CUlimit>limit, value)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuCtxSetLimit(((__pyx_t_4cuda_5ccuda_CUlimit)__pyx_v_limit), __pyx_v_value); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 35, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":36
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetLimit(<ccuda.CUlimit>limit, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":37
 *     err = <cudaError_t>ccuda._cuCtxSetLimit(<ccuda.CUlimit>limit, value)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":36
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetLimit(<ccuda.CUlimit>limit, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":38
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetLimit(size_t* pValue, cudaLimit limit) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":30
 *     return err
 * 
 * cdef cudaError_t cudaDeviceSetLimit(cudaLimit limit, size_t value) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceSetLimit", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":40
 *     return err
 * 
 * cdef cudaError_t cudaDeviceGetLimit(size_t* pValue, cudaLimit limit) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetLimit(size_t *__pyx_v_pValue, enum __pyx_t_4cuda_7ccudart_cudaLimit __pyx_v_limit) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceGetLimit", __pyx_f[0], 40, 1, __PYX_ERR(0, 40, __pyx_L1_error));

  /* "cuda/ccudart.pyx":42
 * cdef cudaError_t cudaDeviceGetLimit(size_t* pValue, cudaLimit limit) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":43
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetLimit(pValue, <ccuda.CUlimit>limit)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":44
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuCtxGetLimit(pValue, <ccuda.CUlimit>limit)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":43
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetLimit(pValue, <ccuda.CUlimit>limit)
 */
  }

  /* "cuda/ccudart.pyx":45
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetLimit(pValue, <ccuda.CUlimit>limit)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuCtxGetLimit(__pyx_v_pValue, ((__pyx_t_4cuda_5ccuda_CUlimit)__pyx_v_limit)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 45, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":46
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetLimit(pValue, <ccuda.CUlimit>limit)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":47
 *     err = <cudaError_t>ccuda._cuCtxGetLimit(pValue, <ccuda.CUlimit>limit)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":46
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetLimit(pValue, <ccuda.CUlimit>limit)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":48
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetTexture1DLinearMaxWidth(size_t* maxWidthInElements, const cudaChannelFormatDesc* fmtDesc, int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":40
 *     return err
 * 
 * cdef cudaError_t cudaDeviceGetLimit(size_t* pValue, cudaLimit limit) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetLimit", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":50
 *     return err
 * 
 * cdef cudaError_t cudaDeviceGetTexture1DLinearMaxWidth(size_t* maxWidthInElements, const cudaChannelFormatDesc* fmtDesc, int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetTexture1DLinearMaxWidth(maxWidthInElements, fmtDesc, device)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetTexture1DLinearMaxWidth(size_t *__pyx_v_maxWidthInElements, struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc const *__pyx_v_fmtDesc, int __pyx_v_device) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceGetTexture1DLinearMaxWidth", __pyx_f[0], 50, 1, __PYX_ERR(0, 50, __pyx_L1_error));

  /* "cuda/ccudart.pyx":51
 * 
 * cdef cudaError_t cudaDeviceGetTexture1DLinearMaxWidth(size_t* maxWidthInElements, const cudaChannelFormatDesc* fmtDesc, int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaDeviceGetTexture1DLinearMaxWidth(maxWidthInElements, fmtDesc, device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache* pCacheConfig) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetTexture1DLinearMaxWidth(__pyx_v_maxWidthInElements, __pyx_v_fmtDesc, __pyx_v_device); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 51, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":50
 *     return err
 * 
 * cdef cudaError_t cudaDeviceGetTexture1DLinearMaxWidth(size_t* maxWidthInElements, const cudaChannelFormatDesc* fmtDesc, int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetTexture1DLinearMaxWidth(maxWidthInElements, fmtDesc, device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetTexture1DLinearMaxWidth", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":53
 *     return _cudaDeviceGetTexture1DLinearMaxWidth(maxWidthInElements, fmtDesc, device)
 * 
 * cdef cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache* pCacheConfig) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetCacheConfig(enum __pyx_t_4cuda_7ccudart_cudaFuncCache *__pyx_v_pCacheConfig) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceGetCacheConfig", __pyx_f[0], 53, 1, __PYX_ERR(0, 53, __pyx_L1_error));

  /* "cuda/ccudart.pyx":55
 * cdef cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache* pCacheConfig) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":56
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetCacheConfig(<ccuda.CUfunc_cache*>pCacheConfig)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":57
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuCtxGetCacheConfig(<ccuda.CUfunc_cache*>pCacheConfig)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":56
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetCacheConfig(<ccuda.CUfunc_cache*>pCacheConfig)
 */
  }

  /* "cuda/ccudart.pyx":58
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetCacheConfig(<ccuda.CUfunc_cache*>pCacheConfig)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuCtxGetCacheConfig(((__pyx_t_4cuda_5ccuda_CUfunc_cache *)__pyx_v_pCacheConfig)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 58, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":59
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetCacheConfig(<ccuda.CUfunc_cache*>pCacheConfig)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":60
 *     err = <cudaError_t>ccuda._cuCtxGetCacheConfig(<ccuda.CUfunc_cache*>pCacheConfig)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":59
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetCacheConfig(<ccuda.CUfunc_cache*>pCacheConfig)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":61
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetStreamPriorityRange(int* leastPriority, int* greatestPriority) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":53
 *     return _cudaDeviceGetTexture1DLinearMaxWidth(maxWidthInElements, fmtDesc, device)
 * 
 * cdef cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache* pCacheConfig) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetCacheConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":63
 *     return err
 * 
 * cdef cudaError_t cudaDeviceGetStreamPriorityRange(int* leastPriority, int* greatestPriority) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetStreamPriorityRange(int *__pyx_v_leastPriority, int *__pyx_v_greatestPriority) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceGetStreamPriorityRange", __pyx_f[0], 63, 1, __PYX_ERR(0, 63, __pyx_L1_error));

  /* "cuda/ccudart.pyx":65
 * cdef cudaError_t cudaDeviceGetStreamPriorityRange(int* leastPriority, int* greatestPriority) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":66
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetStreamPriorityRange(leastPriority, greatestPriority)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":67
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuCtxGetStreamPriorityRange(leastPriority, greatestPriority)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":66
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetStreamPriorityRange(leastPriority, greatestPriority)
 */
  }

  /* "cuda/ccudart.pyx":68
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetStreamPriorityRange(leastPriority, greatestPriority)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuCtxGetStreamPriorityRange(__pyx_v_leastPriority, __pyx_v_greatestPriority); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 68, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":69
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetStreamPriorityRange(leastPriority, greatestPriority)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":70
 *     err = <cudaError_t>ccuda._cuCtxGetStreamPriorityRange(leastPriority, greatestPriority)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":69
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetStreamPriorityRange(leastPriority, greatestPriority)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":71
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":63
 *     return err
 * 
 * cdef cudaError_t cudaDeviceGetStreamPriorityRange(int* leastPriority, int* greatestPriority) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetStreamPriorityRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":73
 *     return err
 * 
 * cdef cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceSetCacheConfig(enum __pyx_t_4cuda_7ccudart_cudaFuncCache __pyx_v_cacheConfig) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceSetCacheConfig", __pyx_f[0], 73, 1, __PYX_ERR(0, 73, __pyx_L1_error));

  /* "cuda/ccudart.pyx":75
 * cdef cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":76
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetCacheConfig(<ccuda.CUfunc_cache>cacheConfig)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":77
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuCtxSetCacheConfig(<ccuda.CUfunc_cache>cacheConfig)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":76
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetCacheConfig(<ccuda.CUfunc_cache>cacheConfig)
 */
  }

  /* "cuda/ccudart.pyx":78
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetCacheConfig(<ccuda.CUfunc_cache>cacheConfig)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuCtxSetCacheConfig(((__pyx_t_4cuda_5ccuda_CUfunc_cache)__pyx_v_cacheConfig)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 78, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":79
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetCacheConfig(<ccuda.CUfunc_cache>cacheConfig)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":80
 *     err = <cudaError_t>ccuda._cuCtxSetCacheConfig(<ccuda.CUfunc_cache>cacheConfig)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":79
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetCacheConfig(<ccuda.CUfunc_cache>cacheConfig)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":81
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig* pConfig) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":73
 *     return err
 * 
 * cdef cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceSetCacheConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":83
 *     return err
 * 
 * cdef cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig* pConfig) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetSharedMemConfig(enum __pyx_t_4cuda_7ccudart_cudaSharedMemConfig *__pyx_v_pConfig) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceGetSharedMemConfig", __pyx_f[0], 83, 1, __PYX_ERR(0, 83, __pyx_L1_error));

  /* "cuda/ccudart.pyx":85
 * cdef cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig* pConfig) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":86
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetSharedMemConfig(<ccuda.CUsharedconfig*>pConfig)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":87
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuCtxGetSharedMemConfig(<ccuda.CUsharedconfig*>pConfig)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":86
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetSharedMemConfig(<ccuda.CUsharedconfig*>pConfig)
 */
  }

  /* "cuda/ccudart.pyx":88
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetSharedMemConfig(<ccuda.CUsharedconfig*>pConfig)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuCtxGetSharedMemConfig(((__pyx_t_4cuda_5ccuda_CUsharedconfig *)__pyx_v_pConfig)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 88, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":89
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetSharedMemConfig(<ccuda.CUsharedconfig*>pConfig)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":90
 *     err = <cudaError_t>ccuda._cuCtxGetSharedMemConfig(<ccuda.CUsharedconfig*>pConfig)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":89
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetSharedMemConfig(<ccuda.CUsharedconfig*>pConfig)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":91
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":83
 *     return err
 * 
 * cdef cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig* pConfig) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetSharedMemConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":93
 *     return err
 * 
 * cdef cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceSetSharedMemConfig(enum __pyx_t_4cuda_7ccudart_cudaSharedMemConfig __pyx_v_config) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceSetSharedMemConfig", __pyx_f[0], 93, 1, __PYX_ERR(0, 93, __pyx_L1_error));

  /* "cuda/ccudart.pyx":95
 * cdef cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":96
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetSharedMemConfig(<ccuda.CUsharedconfig>config)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":97
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuCtxSetSharedMemConfig(<ccuda.CUsharedconfig>config)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":96
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetSharedMemConfig(<ccuda.CUsharedconfig>config)
 */
  }

  /* "cuda/ccudart.pyx":98
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetSharedMemConfig(<ccuda.CUsharedconfig>config)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuCtxSetSharedMemConfig(((__pyx_t_4cuda_5ccuda_CUsharedconfig)__pyx_v_config)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 98, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":99
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetSharedMemConfig(<ccuda.CUsharedconfig>config)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":100
 *     err = <cudaError_t>ccuda._cuCtxSetSharedMemConfig(<ccuda.CUsharedconfig>config)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":99
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetSharedMemConfig(<ccuda.CUsharedconfig>config)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":101
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetByPCIBusId(int* device, const char* pciBusId) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":93
 *     return err
 * 
 * cdef cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceSetSharedMemConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":103
 *     return err
 * 
 * cdef cudaError_t cudaDeviceGetByPCIBusId(int* device, const char* pciBusId) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetByPCIBusId(device, pciBusId)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetByPCIBusId(int *__pyx_v_device, char const *__pyx_v_pciBusId) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceGetByPCIBusId", __pyx_f[0], 103, 1, __PYX_ERR(0, 103, __pyx_L1_error));

  /* "cuda/ccudart.pyx":104
 * 
 * cdef cudaError_t cudaDeviceGetByPCIBusId(int* device, const char* pciBusId) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaDeviceGetByPCIBusId(device, pciBusId)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetPCIBusId(char* pciBusId, int length, int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetByPCIBusId(__pyx_v_device, __pyx_v_pciBusId); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 104, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":103
 *     return err
 * 
 * cdef cudaError_t cudaDeviceGetByPCIBusId(int* device, const char* pciBusId) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetByPCIBusId(device, pciBusId)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetByPCIBusId", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":106
 *     return _cudaDeviceGetByPCIBusId(device, pciBusId)
 * 
 * cdef cudaError_t cudaDeviceGetPCIBusId(char* pciBusId, int length, int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetPCIBusId(pciBusId, length, device)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetPCIBusId(char *__pyx_v_pciBusId, int __pyx_v_length, int __pyx_v_device) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceGetPCIBusId", __pyx_f[0], 106, 1, __PYX_ERR(0, 106, __pyx_L1_error));

  /* "cuda/ccudart.pyx":107
 * 
 * cdef cudaError_t cudaDeviceGetPCIBusId(char* pciBusId, int length, int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaDeviceGetPCIBusId(pciBusId, length, device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t* handle, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetPCIBusId(__pyx_v_pciBusId, __pyx_v_length, __pyx_v_device); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 107, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":106
 *     return _cudaDeviceGetByPCIBusId(device, pciBusId)
 * 
 * cdef cudaError_t cudaDeviceGetPCIBusId(char* pciBusId, int length, int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetPCIBusId(pciBusId, length, device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetPCIBusId", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":109
 *     return _cudaDeviceGetPCIBusId(pciBusId, length, device)
 * 
 * cdef cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t* handle, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaIpcGetEventHandle(__pyx_t_4cuda_7ccudart_cudaIpcEventHandle_t *__pyx_v_handle, __pyx_t_4cuda_7ccudart_cudaEvent_t __pyx_v_event) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaIpcGetEventHandle", __pyx_f[0], 109, 1, __PYX_ERR(0, 109, __pyx_L1_error));

  /* "cuda/ccudart.pyx":111
 * cdef cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t* handle, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":112
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcGetEventHandle(<ccuda.CUipcEventHandle*>handle, <ccuda.CUevent>event)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":113
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuIpcGetEventHandle(<ccuda.CUipcEventHandle*>handle, <ccuda.CUevent>event)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":112
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcGetEventHandle(<ccuda.CUipcEventHandle*>handle, <ccuda.CUevent>event)
 */
  }

  /* "cuda/ccudart.pyx":114
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcGetEventHandle(<ccuda.CUipcEventHandle*>handle, <ccuda.CUevent>event)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuIpcGetEventHandle(((__pyx_t_4cuda_5ccuda_CUipcEventHandle *)__pyx_v_handle), ((__pyx_t_4cuda_5ccuda_CUevent)__pyx_v_event)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 114, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":115
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcGetEventHandle(<ccuda.CUipcEventHandle*>handle, <ccuda.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":116
 *     err = <cudaError_t>ccuda._cuIpcGetEventHandle(<ccuda.CUipcEventHandle*>handle, <ccuda.CUevent>event)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":115
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcGetEventHandle(<ccuda.CUipcEventHandle*>handle, <ccuda.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":117
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaIpcOpenEventHandle(cudaEvent_t* event, cudaIpcEventHandle_t handle) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":109
 *     return _cudaDeviceGetPCIBusId(pciBusId, length, device)
 * 
 * cdef cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t* handle, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaIpcGetEventHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":119
 *     return err
 * 
 * cdef cudaError_t cudaIpcOpenEventHandle(cudaEvent_t* event, cudaIpcEventHandle_t handle) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaIpcOpenEventHandle(__pyx_t_4cuda_7ccudart_cudaEvent_t *__pyx_v_event, __pyx_t_4cuda_7ccudart_cudaIpcEventHandle_t __pyx_v_handle) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_5ccuda_CUipcEventHandle __pyx_v__driver_handle;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaIpcOpenEventHandle", __pyx_f[0], 119, 1, __PYX_ERR(0, 119, __pyx_L1_error));

  /* "cuda/ccudart.pyx":121
 * cdef cudaError_t cudaIpcOpenEventHandle(cudaEvent_t* event, cudaIpcEventHandle_t handle) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     cdef ccuda.CUipcEventHandle _driver_handle
 *     memcpy(&_driver_handle, &handle, sizeof(_driver_handle))
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":123
 *     err = m_global.lazyInit()
 *     cdef ccuda.CUipcEventHandle _driver_handle
 *     memcpy(&_driver_handle, &handle, sizeof(_driver_handle))             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  (void)(memcpy((&__pyx_v__driver_handle), (&__pyx_v_handle), (sizeof(__pyx_v__driver_handle))));

  /* "cuda/ccudart.pyx":124
 *     cdef ccuda.CUipcEventHandle _driver_handle
 *     memcpy(&_driver_handle, &handle, sizeof(_driver_handle))
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcOpenEventHandle(<ccuda.CUevent*>event, _driver_handle)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":125
 *     memcpy(&_driver_handle, &handle, sizeof(_driver_handle))
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuIpcOpenEventHandle(<ccuda.CUevent*>event, _driver_handle)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":124
 *     cdef ccuda.CUipcEventHandle _driver_handle
 *     memcpy(&_driver_handle, &handle, sizeof(_driver_handle))
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcOpenEventHandle(<ccuda.CUevent*>event, _driver_handle)
 */
  }

  /* "cuda/ccudart.pyx":126
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcOpenEventHandle(<ccuda.CUevent*>event, _driver_handle)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuIpcOpenEventHandle(((__pyx_t_4cuda_5ccuda_CUevent *)__pyx_v_event), __pyx_v__driver_handle); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 126, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":127
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcOpenEventHandle(<ccuda.CUevent*>event, _driver_handle)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":128
 *     err = <cudaError_t>ccuda._cuIpcOpenEventHandle(<ccuda.CUevent*>event, _driver_handle)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":127
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcOpenEventHandle(<ccuda.CUevent*>event, _driver_handle)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":129
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t* handle, void* devPtr) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":119
 *     return err
 * 
 * cdef cudaError_t cudaIpcOpenEventHandle(cudaEvent_t* event, cudaIpcEventHandle_t handle) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaIpcOpenEventHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":131
 *     return err
 * 
 * cdef cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t* handle, void* devPtr) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaIpcGetMemHandle(__pyx_t_4cuda_7ccudart_cudaIpcMemHandle_t *__pyx_v_handle, void *__pyx_v_devPtr) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaIpcGetMemHandle", __pyx_f[0], 131, 1, __PYX_ERR(0, 131, __pyx_L1_error));

  /* "cuda/ccudart.pyx":133
 * cdef cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t* handle, void* devPtr) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":134
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcGetMemHandle(<ccuda.CUipcMemHandle*>handle, <ccuda.CUdeviceptr>devPtr)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":135
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuIpcGetMemHandle(<ccuda.CUipcMemHandle*>handle, <ccuda.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":134
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcGetMemHandle(<ccuda.CUipcMemHandle*>handle, <ccuda.CUdeviceptr>devPtr)
 */
  }

  /* "cuda/ccudart.pyx":136
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcGetMemHandle(<ccuda.CUipcMemHandle*>handle, <ccuda.CUdeviceptr>devPtr)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuIpcGetMemHandle(((__pyx_t_4cuda_5ccuda_CUipcMemHandle *)__pyx_v_handle), ((__pyx_t_4cuda_5ccuda_CUdeviceptr)__pyx_v_devPtr)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 136, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":137
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcGetMemHandle(<ccuda.CUipcMemHandle*>handle, <ccuda.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":138
 *     err = <cudaError_t>ccuda._cuIpcGetMemHandle(<ccuda.CUipcMemHandle*>handle, <ccuda.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":137
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcGetMemHandle(<ccuda.CUipcMemHandle*>handle, <ccuda.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":139
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaIpcOpenMemHandle(void** devPtr, cudaIpcMemHandle_t handle, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":131
 *     return err
 * 
 * cdef cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t* handle, void* devPtr) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaIpcGetMemHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":141
 *     return err
 * 
 * cdef cudaError_t cudaIpcOpenMemHandle(void** devPtr, cudaIpcMemHandle_t handle, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaIpcOpenMemHandle(void **__pyx_v_devPtr, __pyx_t_4cuda_7ccudart_cudaIpcMemHandle_t __pyx_v_handle, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_5ccuda_CUipcMemHandle __pyx_v__driver_handle;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaIpcOpenMemHandle", __pyx_f[0], 141, 1, __PYX_ERR(0, 141, __pyx_L1_error));

  /* "cuda/ccudart.pyx":143
 * cdef cudaError_t cudaIpcOpenMemHandle(void** devPtr, cudaIpcMemHandle_t handle, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     cdef ccuda.CUipcMemHandle _driver_handle
 *     memcpy(&_driver_handle, &handle, sizeof(_driver_handle))
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":145
 *     err = m_global.lazyInit()
 *     cdef ccuda.CUipcMemHandle _driver_handle
 *     memcpy(&_driver_handle, &handle, sizeof(_driver_handle))             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  (void)(memcpy((&__pyx_v__driver_handle), (&__pyx_v_handle), (sizeof(__pyx_v__driver_handle))));

  /* "cuda/ccudart.pyx":146
 *     cdef ccuda.CUipcMemHandle _driver_handle
 *     memcpy(&_driver_handle, &handle, sizeof(_driver_handle))
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcOpenMemHandle_v2(<ccuda.CUdeviceptr*>devPtr, _driver_handle, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":147
 *     memcpy(&_driver_handle, &handle, sizeof(_driver_handle))
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuIpcOpenMemHandle_v2(<ccuda.CUdeviceptr*>devPtr, _driver_handle, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":146
 *     cdef ccuda.CUipcMemHandle _driver_handle
 *     memcpy(&_driver_handle, &handle, sizeof(_driver_handle))
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcOpenMemHandle_v2(<ccuda.CUdeviceptr*>devPtr, _driver_handle, flags)
 */
  }

  /* "cuda/ccudart.pyx":148
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcOpenMemHandle_v2(<ccuda.CUdeviceptr*>devPtr, _driver_handle, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuIpcOpenMemHandle_v2(((__pyx_t_4cuda_5ccuda_CUdeviceptr *)__pyx_v_devPtr), __pyx_v__driver_handle, __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 148, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":149
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcOpenMemHandle_v2(<ccuda.CUdeviceptr*>devPtr, _driver_handle, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":150
 *     err = <cudaError_t>ccuda._cuIpcOpenMemHandle_v2(<ccuda.CUdeviceptr*>devPtr, _driver_handle, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":149
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcOpenMemHandle_v2(<ccuda.CUdeviceptr*>devPtr, _driver_handle, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":151
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaIpcCloseMemHandle(void* devPtr) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":141
 *     return err
 * 
 * cdef cudaError_t cudaIpcOpenMemHandle(void** devPtr, cudaIpcMemHandle_t handle, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaIpcOpenMemHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":153
 *     return err
 * 
 * cdef cudaError_t cudaIpcCloseMemHandle(void* devPtr) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaIpcCloseMemHandle(void *__pyx_v_devPtr) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaIpcCloseMemHandle", __pyx_f[0], 153, 1, __PYX_ERR(0, 153, __pyx_L1_error));

  /* "cuda/ccudart.pyx":155
 * cdef cudaError_t cudaIpcCloseMemHandle(void* devPtr) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":156
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcCloseMemHandle(<ccuda.CUdeviceptr>devPtr)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":157
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuIpcCloseMemHandle(<ccuda.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":156
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcCloseMemHandle(<ccuda.CUdeviceptr>devPtr)
 */
  }

  /* "cuda/ccudart.pyx":158
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcCloseMemHandle(<ccuda.CUdeviceptr>devPtr)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuIpcCloseMemHandle(((__pyx_t_4cuda_5ccuda_CUdeviceptr)__pyx_v_devPtr)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 158, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":159
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcCloseMemHandle(<ccuda.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":160
 *     err = <cudaError_t>ccuda._cuIpcCloseMemHandle(<ccuda.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":159
 *         return err
 *     err = <cudaError_t>ccuda._cuIpcCloseMemHandle(<ccuda.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":161
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":153
 *     return err
 * 
 * cdef cudaError_t cudaIpcCloseMemHandle(void* devPtr) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaIpcCloseMemHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":163
 *     return err
 * 
 * cdef cudaError_t cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceFlushGPUDirectRDMAWrites(enum __pyx_t_4cuda_7ccudart_cudaFlushGPUDirectRDMAWritesTarget __pyx_v_target, enum __pyx_t_4cuda_7ccudart_cudaFlushGPUDirectRDMAWritesScope __pyx_v_scope) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceFlushGPUDirectRDMAWrites", __pyx_f[0], 163, 1, __PYX_ERR(0, 163, __pyx_L1_error));

  /* "cuda/ccudart.pyx":165
 * cdef cudaError_t cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":166
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuFlushGPUDirectRDMAWrites(<ccuda.CUflushGPUDirectRDMAWritesTarget>target, <ccuda.CUflushGPUDirectRDMAWritesScope>scope)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":167
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuFlushGPUDirectRDMAWrites(<ccuda.CUflushGPUDirectRDMAWritesTarget>target, <ccuda.CUflushGPUDirectRDMAWritesScope>scope)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":166
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuFlushGPUDirectRDMAWrites(<ccuda.CUflushGPUDirectRDMAWritesTarget>target, <ccuda.CUflushGPUDirectRDMAWritesScope>scope)
 */
  }

  /* "cuda/ccudart.pyx":168
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuFlushGPUDirectRDMAWrites(<ccuda.CUflushGPUDirectRDMAWritesTarget>target, <ccuda.CUflushGPUDirectRDMAWritesScope>scope)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuFlushGPUDirectRDMAWrites(((__pyx_t_4cuda_5ccuda_CUflushGPUDirectRDMAWritesTarget)__pyx_v_target), ((__pyx_t_4cuda_5ccuda_CUflushGPUDirectRDMAWritesScope)__pyx_v_scope)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 168, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":169
 *         return err
 *     err = <cudaError_t>ccuda._cuFlushGPUDirectRDMAWrites(<ccuda.CUflushGPUDirectRDMAWritesTarget>target, <ccuda.CUflushGPUDirectRDMAWritesScope>scope)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":170
 *     err = <cudaError_t>ccuda._cuFlushGPUDirectRDMAWrites(<ccuda.CUflushGPUDirectRDMAWritesTarget>target, <ccuda.CUflushGPUDirectRDMAWritesScope>scope)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":169
 *         return err
 *     err = <cudaError_t>ccuda._cuFlushGPUDirectRDMAWrites(<ccuda.CUflushGPUDirectRDMAWritesTarget>target, <ccuda.CUflushGPUDirectRDMAWritesScope>scope)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":171
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaThreadExit() nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":163
 *     return err
 * 
 * cdef cudaError_t cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceFlushGPUDirectRDMAWrites", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":173
 *     return err
 * 
 * cdef cudaError_t cudaThreadExit() nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaThreadExit()
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaThreadExit(void) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaThreadExit", __pyx_f[0], 173, 1, __PYX_ERR(0, 173, __pyx_L1_error));

  /* "cuda/ccudart.pyx":174
 * 
 * cdef cudaError_t cudaThreadExit() nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaThreadExit()             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaThreadSynchronize() nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaThreadExit(); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 174, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":173
 *     return err
 * 
 * cdef cudaError_t cudaThreadExit() nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaThreadExit()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaThreadExit", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":176
 *     return _cudaThreadExit()
 * 
 * cdef cudaError_t cudaThreadSynchronize() nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaThreadSynchronize(void) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaThreadSynchronize", __pyx_f[0], 176, 1, __PYX_ERR(0, 176, __pyx_L1_error));

  /* "cuda/ccudart.pyx":178
 * cdef cudaError_t cudaThreadSynchronize() nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":179
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSynchronize()
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":180
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuCtxSynchronize()
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":179
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSynchronize()
 */
  }

  /* "cuda/ccudart.pyx":181
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSynchronize()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuCtxSynchronize(); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 181, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":182
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSynchronize()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":183
 *     err = <cudaError_t>ccuda._cuCtxSynchronize()
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":182
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSynchronize()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":184
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaThreadSetLimit(cudaLimit limit, size_t value) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":176
 *     return _cudaThreadExit()
 * 
 * cdef cudaError_t cudaThreadSynchronize() nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaThreadSynchronize", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":186
 *     return err
 * 
 * cdef cudaError_t cudaThreadSetLimit(cudaLimit limit, size_t value) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaThreadSetLimit(enum __pyx_t_4cuda_7ccudart_cudaLimit __pyx_v_limit, size_t __pyx_v_value) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaThreadSetLimit", __pyx_f[0], 186, 1, __PYX_ERR(0, 186, __pyx_L1_error));

  /* "cuda/ccudart.pyx":188
 * cdef cudaError_t cudaThreadSetLimit(cudaLimit limit, size_t value) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":189
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetLimit(<ccuda.CUlimit>limit, value)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":190
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuCtxSetLimit(<ccuda.CUlimit>limit, value)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":189
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetLimit(<ccuda.CUlimit>limit, value)
 */
  }

  /* "cuda/ccudart.pyx":191
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetLimit(<ccuda.CUlimit>limit, value)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuCtxSetLimit(((__pyx_t_4cuda_5ccuda_CUlimit)__pyx_v_limit), __pyx_v_value); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 191, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":192
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetLimit(<ccuda.CUlimit>limit, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":193
 *     err = <cudaError_t>ccuda._cuCtxSetLimit(<ccuda.CUlimit>limit, value)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":192
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetLimit(<ccuda.CUlimit>limit, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":194
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaThreadGetLimit(size_t* pValue, cudaLimit limit) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":186
 *     return err
 * 
 * cdef cudaError_t cudaThreadSetLimit(cudaLimit limit, size_t value) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaThreadSetLimit", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":196
 *     return err
 * 
 * cdef cudaError_t cudaThreadGetLimit(size_t* pValue, cudaLimit limit) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaThreadGetLimit(size_t *__pyx_v_pValue, enum __pyx_t_4cuda_7ccudart_cudaLimit __pyx_v_limit) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaThreadGetLimit", __pyx_f[0], 196, 1, __PYX_ERR(0, 196, __pyx_L1_error));

  /* "cuda/ccudart.pyx":198
 * cdef cudaError_t cudaThreadGetLimit(size_t* pValue, cudaLimit limit) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":199
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetLimit(pValue, <ccuda.CUlimit>limit)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":200
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuCtxGetLimit(pValue, <ccuda.CUlimit>limit)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":199
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetLimit(pValue, <ccuda.CUlimit>limit)
 */
  }

  /* "cuda/ccudart.pyx":201
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetLimit(pValue, <ccuda.CUlimit>limit)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuCtxGetLimit(__pyx_v_pValue, ((__pyx_t_4cuda_5ccuda_CUlimit)__pyx_v_limit)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 201, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":202
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetLimit(pValue, <ccuda.CUlimit>limit)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":203
 *     err = <cudaError_t>ccuda._cuCtxGetLimit(pValue, <ccuda.CUlimit>limit)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":202
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetLimit(pValue, <ccuda.CUlimit>limit)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":204
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaThreadGetCacheConfig(cudaFuncCache* pCacheConfig) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":196
 *     return err
 * 
 * cdef cudaError_t cudaThreadGetLimit(size_t* pValue, cudaLimit limit) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaThreadGetLimit", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":206
 *     return err
 * 
 * cdef cudaError_t cudaThreadGetCacheConfig(cudaFuncCache* pCacheConfig) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaThreadGetCacheConfig(enum __pyx_t_4cuda_7ccudart_cudaFuncCache *__pyx_v_pCacheConfig) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaThreadGetCacheConfig", __pyx_f[0], 206, 1, __PYX_ERR(0, 206, __pyx_L1_error));

  /* "cuda/ccudart.pyx":208
 * cdef cudaError_t cudaThreadGetCacheConfig(cudaFuncCache* pCacheConfig) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":209
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetCacheConfig(<ccuda.CUfunc_cache*>pCacheConfig)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":210
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuCtxGetCacheConfig(<ccuda.CUfunc_cache*>pCacheConfig)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":209
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetCacheConfig(<ccuda.CUfunc_cache*>pCacheConfig)
 */
  }

  /* "cuda/ccudart.pyx":211
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetCacheConfig(<ccuda.CUfunc_cache*>pCacheConfig)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuCtxGetCacheConfig(((__pyx_t_4cuda_5ccuda_CUfunc_cache *)__pyx_v_pCacheConfig)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 211, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":212
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetCacheConfig(<ccuda.CUfunc_cache*>pCacheConfig)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":213
 *     err = <cudaError_t>ccuda._cuCtxGetCacheConfig(<ccuda.CUfunc_cache*>pCacheConfig)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":212
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxGetCacheConfig(<ccuda.CUfunc_cache*>pCacheConfig)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":214
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaThreadSetCacheConfig(cudaFuncCache cacheConfig) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":206
 *     return err
 * 
 * cdef cudaError_t cudaThreadGetCacheConfig(cudaFuncCache* pCacheConfig) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaThreadGetCacheConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":216
 *     return err
 * 
 * cdef cudaError_t cudaThreadSetCacheConfig(cudaFuncCache cacheConfig) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaThreadSetCacheConfig(enum __pyx_t_4cuda_7ccudart_cudaFuncCache __pyx_v_cacheConfig) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaThreadSetCacheConfig", __pyx_f[0], 216, 1, __PYX_ERR(0, 216, __pyx_L1_error));

  /* "cuda/ccudart.pyx":218
 * cdef cudaError_t cudaThreadSetCacheConfig(cudaFuncCache cacheConfig) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":219
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetCacheConfig(<ccuda.CUfunc_cache>cacheConfig)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":220
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuCtxSetCacheConfig(<ccuda.CUfunc_cache>cacheConfig)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":219
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetCacheConfig(<ccuda.CUfunc_cache>cacheConfig)
 */
  }

  /* "cuda/ccudart.pyx":221
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetCacheConfig(<ccuda.CUfunc_cache>cacheConfig)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuCtxSetCacheConfig(((__pyx_t_4cuda_5ccuda_CUfunc_cache)__pyx_v_cacheConfig)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 221, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":222
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetCacheConfig(<ccuda.CUfunc_cache>cacheConfig)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":223
 *     err = <cudaError_t>ccuda._cuCtxSetCacheConfig(<ccuda.CUfunc_cache>cacheConfig)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":222
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxSetCacheConfig(<ccuda.CUfunc_cache>cacheConfig)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":224
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetLastError() nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":216
 *     return err
 * 
 * cdef cudaError_t cudaThreadSetCacheConfig(cudaFuncCache cacheConfig) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaThreadSetCacheConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":226
 *     return err
 * 
 * cdef cudaError_t cudaGetLastError() nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetLastError()
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGetLastError(void) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGetLastError", __pyx_f[0], 226, 1, __PYX_ERR(0, 226, __pyx_L1_error));

  /* "cuda/ccudart.pyx":227
 * 
 * cdef cudaError_t cudaGetLastError() nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGetLastError()             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaPeekAtLastError() nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetLastError(); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 227, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":226
 *     return err
 * 
 * cdef cudaError_t cudaGetLastError() nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetLastError()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGetLastError", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":229
 *     return _cudaGetLastError()
 * 
 * cdef cudaError_t cudaPeekAtLastError() nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaPeekAtLastError()
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaPeekAtLastError(void) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaPeekAtLastError", __pyx_f[0], 229, 1, __PYX_ERR(0, 229, __pyx_L1_error));

  /* "cuda/ccudart.pyx":230
 * 
 * cdef cudaError_t cudaPeekAtLastError() nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaPeekAtLastError()             # <<<<<<<<<<<<<<
 * 
 * cdef const char* cudaGetErrorName(cudaError_t error) nogil except ?NULL:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaPeekAtLastError(); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 230, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":229
 *     return _cudaGetLastError()
 * 
 * cdef cudaError_t cudaPeekAtLastError() nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaPeekAtLastError()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaPeekAtLastError", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":232
 *     return _cudaPeekAtLastError()
 * 
 * cdef const char* cudaGetErrorName(cudaError_t error) nogil except ?NULL:             # <<<<<<<<<<<<<<
 *     cdef const char* pStr = "unrecognized error code"
 *     if error == cudaSuccess:
 */

static char const *__pyx_f_4cuda_7ccudart_cudaGetErrorName(__pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_error) {
  char const *__pyx_v_pStr;
  char const *__pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGetErrorName", __pyx_f[0], 232, 1, __PYX_ERR(0, 232, __pyx_L1_error));

  /* "cuda/ccudart.pyx":233
 * 
 * cdef const char* cudaGetErrorName(cudaError_t error) nogil except ?NULL:
 *     cdef const char* pStr = "unrecognized error code"             # <<<<<<<<<<<<<<
 *     if error == cudaSuccess:
 *         return "cudaSuccess"
 */
  __pyx_v_pStr = ((char const *)"unrecognized error code");

  /* "cuda/ccudart.pyx":234
 * cdef const char* cudaGetErrorName(cudaError_t error) nogil except ?NULL:
 *     cdef const char* pStr = "unrecognized error code"
 *     if error == cudaSuccess:             # <<<<<<<<<<<<<<
 *         return "cudaSuccess"
 *     if error == cudaErrorInvalidValue:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":235
 *     cdef const char* pStr = "unrecognized error code"
 *     if error == cudaSuccess:
 *         return "cudaSuccess"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidValue:
 *         return "cudaErrorInvalidValue"
 */
    __pyx_r = ((char const *)"cudaSuccess");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":234
 * cdef const char* cudaGetErrorName(cudaError_t error) nogil except ?NULL:
 *     cdef const char* pStr = "unrecognized error code"
 *     if error == cudaSuccess:             # <<<<<<<<<<<<<<
 *         return "cudaSuccess"
 *     if error == cudaErrorInvalidValue:
 */
  }

  /* "cuda/ccudart.pyx":236
 *     if error == cudaSuccess:
 *         return "cudaSuccess"
 *     if error == cudaErrorInvalidValue:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidValue"
 *     if error == cudaErrorMemoryAllocation:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidValue) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":237
 *         return "cudaSuccess"
 *     if error == cudaErrorInvalidValue:
 *         return "cudaErrorInvalidValue"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMemoryAllocation:
 *         return "cudaErrorMemoryAllocation"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidValue");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":236
 *     if error == cudaSuccess:
 *         return "cudaSuccess"
 *     if error == cudaErrorInvalidValue:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidValue"
 *     if error == cudaErrorMemoryAllocation:
 */
  }

  /* "cuda/ccudart.pyx":238
 *     if error == cudaErrorInvalidValue:
 *         return "cudaErrorInvalidValue"
 *     if error == cudaErrorMemoryAllocation:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMemoryAllocation"
 *     if error == cudaErrorInitializationError:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorMemoryAllocation) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":239
 *         return "cudaErrorInvalidValue"
 *     if error == cudaErrorMemoryAllocation:
 *         return "cudaErrorMemoryAllocation"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInitializationError:
 *         return "cudaErrorInitializationError"
 */
    __pyx_r = ((char const *)"cudaErrorMemoryAllocation");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":238
 *     if error == cudaErrorInvalidValue:
 *         return "cudaErrorInvalidValue"
 *     if error == cudaErrorMemoryAllocation:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMemoryAllocation"
 *     if error == cudaErrorInitializationError:
 */
  }

  /* "cuda/ccudart.pyx":240
 *     if error == cudaErrorMemoryAllocation:
 *         return "cudaErrorMemoryAllocation"
 *     if error == cudaErrorInitializationError:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInitializationError"
 *     if error == cudaErrorCudartUnloading:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInitializationError) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":241
 *         return "cudaErrorMemoryAllocation"
 *     if error == cudaErrorInitializationError:
 *         return "cudaErrorInitializationError"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorCudartUnloading:
 *         return "cudaErrorCudartUnloading"
 */
    __pyx_r = ((char const *)"cudaErrorInitializationError");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":240
 *     if error == cudaErrorMemoryAllocation:
 *         return "cudaErrorMemoryAllocation"
 *     if error == cudaErrorInitializationError:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInitializationError"
 *     if error == cudaErrorCudartUnloading:
 */
  }

  /* "cuda/ccudart.pyx":242
 *     if error == cudaErrorInitializationError:
 *         return "cudaErrorInitializationError"
 *     if error == cudaErrorCudartUnloading:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCudartUnloading"
 *     if error == cudaErrorProfilerDisabled:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorCudartUnloading) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":243
 *         return "cudaErrorInitializationError"
 *     if error == cudaErrorCudartUnloading:
 *         return "cudaErrorCudartUnloading"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorProfilerDisabled:
 *         return "cudaErrorProfilerDisabled"
 */
    __pyx_r = ((char const *)"cudaErrorCudartUnloading");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":242
 *     if error == cudaErrorInitializationError:
 *         return "cudaErrorInitializationError"
 *     if error == cudaErrorCudartUnloading:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCudartUnloading"
 *     if error == cudaErrorProfilerDisabled:
 */
  }

  /* "cuda/ccudart.pyx":244
 *     if error == cudaErrorCudartUnloading:
 *         return "cudaErrorCudartUnloading"
 *     if error == cudaErrorProfilerDisabled:             # <<<<<<<<<<<<<<
 *         return "cudaErrorProfilerDisabled"
 *     if error == cudaErrorProfilerNotInitialized:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorProfilerDisabled) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":245
 *         return "cudaErrorCudartUnloading"
 *     if error == cudaErrorProfilerDisabled:
 *         return "cudaErrorProfilerDisabled"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorProfilerNotInitialized:
 *         return "cudaErrorProfilerNotInitialized"
 */
    __pyx_r = ((char const *)"cudaErrorProfilerDisabled");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":244
 *     if error == cudaErrorCudartUnloading:
 *         return "cudaErrorCudartUnloading"
 *     if error == cudaErrorProfilerDisabled:             # <<<<<<<<<<<<<<
 *         return "cudaErrorProfilerDisabled"
 *     if error == cudaErrorProfilerNotInitialized:
 */
  }

  /* "cuda/ccudart.pyx":246
 *     if error == cudaErrorProfilerDisabled:
 *         return "cudaErrorProfilerDisabled"
 *     if error == cudaErrorProfilerNotInitialized:             # <<<<<<<<<<<<<<
 *         return "cudaErrorProfilerNotInitialized"
 *     if error == cudaErrorProfilerAlreadyStarted:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorProfilerNotInitialized) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":247
 *         return "cudaErrorProfilerDisabled"
 *     if error == cudaErrorProfilerNotInitialized:
 *         return "cudaErrorProfilerNotInitialized"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorProfilerAlreadyStarted:
 *         return "cudaErrorProfilerAlreadyStarted"
 */
    __pyx_r = ((char const *)"cudaErrorProfilerNotInitialized");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":246
 *     if error == cudaErrorProfilerDisabled:
 *         return "cudaErrorProfilerDisabled"
 *     if error == cudaErrorProfilerNotInitialized:             # <<<<<<<<<<<<<<
 *         return "cudaErrorProfilerNotInitialized"
 *     if error == cudaErrorProfilerAlreadyStarted:
 */
  }

  /* "cuda/ccudart.pyx":248
 *     if error == cudaErrorProfilerNotInitialized:
 *         return "cudaErrorProfilerNotInitialized"
 *     if error == cudaErrorProfilerAlreadyStarted:             # <<<<<<<<<<<<<<
 *         return "cudaErrorProfilerAlreadyStarted"
 *     if error == cudaErrorProfilerAlreadyStopped:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorProfilerAlreadyStarted) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":249
 *         return "cudaErrorProfilerNotInitialized"
 *     if error == cudaErrorProfilerAlreadyStarted:
 *         return "cudaErrorProfilerAlreadyStarted"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorProfilerAlreadyStopped:
 *         return "cudaErrorProfilerAlreadyStopped"
 */
    __pyx_r = ((char const *)"cudaErrorProfilerAlreadyStarted");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":248
 *     if error == cudaErrorProfilerNotInitialized:
 *         return "cudaErrorProfilerNotInitialized"
 *     if error == cudaErrorProfilerAlreadyStarted:             # <<<<<<<<<<<<<<
 *         return "cudaErrorProfilerAlreadyStarted"
 *     if error == cudaErrorProfilerAlreadyStopped:
 */
  }

  /* "cuda/ccudart.pyx":250
 *     if error == cudaErrorProfilerAlreadyStarted:
 *         return "cudaErrorProfilerAlreadyStarted"
 *     if error == cudaErrorProfilerAlreadyStopped:             # <<<<<<<<<<<<<<
 *         return "cudaErrorProfilerAlreadyStopped"
 *     if error == cudaErrorInvalidConfiguration:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorProfilerAlreadyStopped) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":251
 *         return "cudaErrorProfilerAlreadyStarted"
 *     if error == cudaErrorProfilerAlreadyStopped:
 *         return "cudaErrorProfilerAlreadyStopped"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidConfiguration:
 *         return "cudaErrorInvalidConfiguration"
 */
    __pyx_r = ((char const *)"cudaErrorProfilerAlreadyStopped");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":250
 *     if error == cudaErrorProfilerAlreadyStarted:
 *         return "cudaErrorProfilerAlreadyStarted"
 *     if error == cudaErrorProfilerAlreadyStopped:             # <<<<<<<<<<<<<<
 *         return "cudaErrorProfilerAlreadyStopped"
 *     if error == cudaErrorInvalidConfiguration:
 */
  }

  /* "cuda/ccudart.pyx":252
 *     if error == cudaErrorProfilerAlreadyStopped:
 *         return "cudaErrorProfilerAlreadyStopped"
 *     if error == cudaErrorInvalidConfiguration:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidConfiguration"
 *     if error == cudaErrorInvalidPitchValue:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidConfiguration) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":253
 *         return "cudaErrorProfilerAlreadyStopped"
 *     if error == cudaErrorInvalidConfiguration:
 *         return "cudaErrorInvalidConfiguration"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidPitchValue:
 *         return "cudaErrorInvalidPitchValue"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidConfiguration");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":252
 *     if error == cudaErrorProfilerAlreadyStopped:
 *         return "cudaErrorProfilerAlreadyStopped"
 *     if error == cudaErrorInvalidConfiguration:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidConfiguration"
 *     if error == cudaErrorInvalidPitchValue:
 */
  }

  /* "cuda/ccudart.pyx":254
 *     if error == cudaErrorInvalidConfiguration:
 *         return "cudaErrorInvalidConfiguration"
 *     if error == cudaErrorInvalidPitchValue:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidPitchValue"
 *     if error == cudaErrorInvalidSymbol:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidPitchValue) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":255
 *         return "cudaErrorInvalidConfiguration"
 *     if error == cudaErrorInvalidPitchValue:
 *         return "cudaErrorInvalidPitchValue"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidSymbol:
 *         return "cudaErrorInvalidSymbol"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidPitchValue");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":254
 *     if error == cudaErrorInvalidConfiguration:
 *         return "cudaErrorInvalidConfiguration"
 *     if error == cudaErrorInvalidPitchValue:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidPitchValue"
 *     if error == cudaErrorInvalidSymbol:
 */
  }

  /* "cuda/ccudart.pyx":256
 *     if error == cudaErrorInvalidPitchValue:
 *         return "cudaErrorInvalidPitchValue"
 *     if error == cudaErrorInvalidSymbol:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidSymbol"
 *     if error == cudaErrorInvalidHostPointer:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidSymbol) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":257
 *         return "cudaErrorInvalidPitchValue"
 *     if error == cudaErrorInvalidSymbol:
 *         return "cudaErrorInvalidSymbol"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidHostPointer:
 *         return "cudaErrorInvalidHostPointer"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidSymbol");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":256
 *     if error == cudaErrorInvalidPitchValue:
 *         return "cudaErrorInvalidPitchValue"
 *     if error == cudaErrorInvalidSymbol:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidSymbol"
 *     if error == cudaErrorInvalidHostPointer:
 */
  }

  /* "cuda/ccudart.pyx":258
 *     if error == cudaErrorInvalidSymbol:
 *         return "cudaErrorInvalidSymbol"
 *     if error == cudaErrorInvalidHostPointer:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidHostPointer"
 *     if error == cudaErrorInvalidDevicePointer:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidHostPointer) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":259
 *         return "cudaErrorInvalidSymbol"
 *     if error == cudaErrorInvalidHostPointer:
 *         return "cudaErrorInvalidHostPointer"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidDevicePointer:
 *         return "cudaErrorInvalidDevicePointer"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidHostPointer");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":258
 *     if error == cudaErrorInvalidSymbol:
 *         return "cudaErrorInvalidSymbol"
 *     if error == cudaErrorInvalidHostPointer:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidHostPointer"
 *     if error == cudaErrorInvalidDevicePointer:
 */
  }

  /* "cuda/ccudart.pyx":260
 *     if error == cudaErrorInvalidHostPointer:
 *         return "cudaErrorInvalidHostPointer"
 *     if error == cudaErrorInvalidDevicePointer:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidDevicePointer"
 *     if error == cudaErrorInvalidTexture:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidDevicePointer) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":261
 *         return "cudaErrorInvalidHostPointer"
 *     if error == cudaErrorInvalidDevicePointer:
 *         return "cudaErrorInvalidDevicePointer"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidTexture:
 *         return "cudaErrorInvalidTexture"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidDevicePointer");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":260
 *     if error == cudaErrorInvalidHostPointer:
 *         return "cudaErrorInvalidHostPointer"
 *     if error == cudaErrorInvalidDevicePointer:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidDevicePointer"
 *     if error == cudaErrorInvalidTexture:
 */
  }

  /* "cuda/ccudart.pyx":262
 *     if error == cudaErrorInvalidDevicePointer:
 *         return "cudaErrorInvalidDevicePointer"
 *     if error == cudaErrorInvalidTexture:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidTexture"
 *     if error == cudaErrorInvalidTextureBinding:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidTexture) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":263
 *         return "cudaErrorInvalidDevicePointer"
 *     if error == cudaErrorInvalidTexture:
 *         return "cudaErrorInvalidTexture"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidTextureBinding:
 *         return "cudaErrorInvalidTextureBinding"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidTexture");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":262
 *     if error == cudaErrorInvalidDevicePointer:
 *         return "cudaErrorInvalidDevicePointer"
 *     if error == cudaErrorInvalidTexture:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidTexture"
 *     if error == cudaErrorInvalidTextureBinding:
 */
  }

  /* "cuda/ccudart.pyx":264
 *     if error == cudaErrorInvalidTexture:
 *         return "cudaErrorInvalidTexture"
 *     if error == cudaErrorInvalidTextureBinding:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidTextureBinding"
 *     if error == cudaErrorInvalidChannelDescriptor:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidTextureBinding) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":265
 *         return "cudaErrorInvalidTexture"
 *     if error == cudaErrorInvalidTextureBinding:
 *         return "cudaErrorInvalidTextureBinding"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidChannelDescriptor:
 *         return "cudaErrorInvalidChannelDescriptor"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidTextureBinding");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":264
 *     if error == cudaErrorInvalidTexture:
 *         return "cudaErrorInvalidTexture"
 *     if error == cudaErrorInvalidTextureBinding:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidTextureBinding"
 *     if error == cudaErrorInvalidChannelDescriptor:
 */
  }

  /* "cuda/ccudart.pyx":266
 *     if error == cudaErrorInvalidTextureBinding:
 *         return "cudaErrorInvalidTextureBinding"
 *     if error == cudaErrorInvalidChannelDescriptor:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidChannelDescriptor"
 *     if error == cudaErrorInvalidMemcpyDirection:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidChannelDescriptor) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":267
 *         return "cudaErrorInvalidTextureBinding"
 *     if error == cudaErrorInvalidChannelDescriptor:
 *         return "cudaErrorInvalidChannelDescriptor"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidMemcpyDirection:
 *         return "cudaErrorInvalidMemcpyDirection"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidChannelDescriptor");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":266
 *     if error == cudaErrorInvalidTextureBinding:
 *         return "cudaErrorInvalidTextureBinding"
 *     if error == cudaErrorInvalidChannelDescriptor:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidChannelDescriptor"
 *     if error == cudaErrorInvalidMemcpyDirection:
 */
  }

  /* "cuda/ccudart.pyx":268
 *     if error == cudaErrorInvalidChannelDescriptor:
 *         return "cudaErrorInvalidChannelDescriptor"
 *     if error == cudaErrorInvalidMemcpyDirection:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidMemcpyDirection"
 *     if error == cudaErrorAddressOfConstant:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidMemcpyDirection) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":269
 *         return "cudaErrorInvalidChannelDescriptor"
 *     if error == cudaErrorInvalidMemcpyDirection:
 *         return "cudaErrorInvalidMemcpyDirection"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorAddressOfConstant:
 *         return "cudaErrorAddressOfConstant"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidMemcpyDirection");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":268
 *     if error == cudaErrorInvalidChannelDescriptor:
 *         return "cudaErrorInvalidChannelDescriptor"
 *     if error == cudaErrorInvalidMemcpyDirection:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidMemcpyDirection"
 *     if error == cudaErrorAddressOfConstant:
 */
  }

  /* "cuda/ccudart.pyx":270
 *     if error == cudaErrorInvalidMemcpyDirection:
 *         return "cudaErrorInvalidMemcpyDirection"
 *     if error == cudaErrorAddressOfConstant:             # <<<<<<<<<<<<<<
 *         return "cudaErrorAddressOfConstant"
 *     if error == cudaErrorTextureFetchFailed:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorAddressOfConstant) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":271
 *         return "cudaErrorInvalidMemcpyDirection"
 *     if error == cudaErrorAddressOfConstant:
 *         return "cudaErrorAddressOfConstant"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorTextureFetchFailed:
 *         return "cudaErrorTextureFetchFailed"
 */
    __pyx_r = ((char const *)"cudaErrorAddressOfConstant");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":270
 *     if error == cudaErrorInvalidMemcpyDirection:
 *         return "cudaErrorInvalidMemcpyDirection"
 *     if error == cudaErrorAddressOfConstant:             # <<<<<<<<<<<<<<
 *         return "cudaErrorAddressOfConstant"
 *     if error == cudaErrorTextureFetchFailed:
 */
  }

  /* "cuda/ccudart.pyx":272
 *     if error == cudaErrorAddressOfConstant:
 *         return "cudaErrorAddressOfConstant"
 *     if error == cudaErrorTextureFetchFailed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorTextureFetchFailed"
 *     if error == cudaErrorTextureNotBound:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorTextureFetchFailed) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":273
 *         return "cudaErrorAddressOfConstant"
 *     if error == cudaErrorTextureFetchFailed:
 *         return "cudaErrorTextureFetchFailed"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorTextureNotBound:
 *         return "cudaErrorTextureNotBound"
 */
    __pyx_r = ((char const *)"cudaErrorTextureFetchFailed");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":272
 *     if error == cudaErrorAddressOfConstant:
 *         return "cudaErrorAddressOfConstant"
 *     if error == cudaErrorTextureFetchFailed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorTextureFetchFailed"
 *     if error == cudaErrorTextureNotBound:
 */
  }

  /* "cuda/ccudart.pyx":274
 *     if error == cudaErrorTextureFetchFailed:
 *         return "cudaErrorTextureFetchFailed"
 *     if error == cudaErrorTextureNotBound:             # <<<<<<<<<<<<<<
 *         return "cudaErrorTextureNotBound"
 *     if error == cudaErrorSynchronizationError:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorTextureNotBound) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":275
 *         return "cudaErrorTextureFetchFailed"
 *     if error == cudaErrorTextureNotBound:
 *         return "cudaErrorTextureNotBound"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorSynchronizationError:
 *         return "cudaErrorSynchronizationError"
 */
    __pyx_r = ((char const *)"cudaErrorTextureNotBound");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":274
 *     if error == cudaErrorTextureFetchFailed:
 *         return "cudaErrorTextureFetchFailed"
 *     if error == cudaErrorTextureNotBound:             # <<<<<<<<<<<<<<
 *         return "cudaErrorTextureNotBound"
 *     if error == cudaErrorSynchronizationError:
 */
  }

  /* "cuda/ccudart.pyx":276
 *     if error == cudaErrorTextureNotBound:
 *         return "cudaErrorTextureNotBound"
 *     if error == cudaErrorSynchronizationError:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSynchronizationError"
 *     if error == cudaErrorInvalidFilterSetting:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorSynchronizationError) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":277
 *         return "cudaErrorTextureNotBound"
 *     if error == cudaErrorSynchronizationError:
 *         return "cudaErrorSynchronizationError"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidFilterSetting:
 *         return "cudaErrorInvalidFilterSetting"
 */
    __pyx_r = ((char const *)"cudaErrorSynchronizationError");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":276
 *     if error == cudaErrorTextureNotBound:
 *         return "cudaErrorTextureNotBound"
 *     if error == cudaErrorSynchronizationError:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSynchronizationError"
 *     if error == cudaErrorInvalidFilterSetting:
 */
  }

  /* "cuda/ccudart.pyx":278
 *     if error == cudaErrorSynchronizationError:
 *         return "cudaErrorSynchronizationError"
 *     if error == cudaErrorInvalidFilterSetting:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidFilterSetting"
 *     if error == cudaErrorInvalidNormSetting:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidFilterSetting) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":279
 *         return "cudaErrorSynchronizationError"
 *     if error == cudaErrorInvalidFilterSetting:
 *         return "cudaErrorInvalidFilterSetting"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidNormSetting:
 *         return "cudaErrorInvalidNormSetting"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidFilterSetting");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":278
 *     if error == cudaErrorSynchronizationError:
 *         return "cudaErrorSynchronizationError"
 *     if error == cudaErrorInvalidFilterSetting:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidFilterSetting"
 *     if error == cudaErrorInvalidNormSetting:
 */
  }

  /* "cuda/ccudart.pyx":280
 *     if error == cudaErrorInvalidFilterSetting:
 *         return "cudaErrorInvalidFilterSetting"
 *     if error == cudaErrorInvalidNormSetting:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidNormSetting"
 *     if error == cudaErrorMixedDeviceExecution:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidNormSetting) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":281
 *         return "cudaErrorInvalidFilterSetting"
 *     if error == cudaErrorInvalidNormSetting:
 *         return "cudaErrorInvalidNormSetting"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMixedDeviceExecution:
 *         return "cudaErrorMixedDeviceExecution"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidNormSetting");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":280
 *     if error == cudaErrorInvalidFilterSetting:
 *         return "cudaErrorInvalidFilterSetting"
 *     if error == cudaErrorInvalidNormSetting:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidNormSetting"
 *     if error == cudaErrorMixedDeviceExecution:
 */
  }

  /* "cuda/ccudart.pyx":282
 *     if error == cudaErrorInvalidNormSetting:
 *         return "cudaErrorInvalidNormSetting"
 *     if error == cudaErrorMixedDeviceExecution:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMixedDeviceExecution"
 *     if error == cudaErrorNotYetImplemented:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorMixedDeviceExecution) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":283
 *         return "cudaErrorInvalidNormSetting"
 *     if error == cudaErrorMixedDeviceExecution:
 *         return "cudaErrorMixedDeviceExecution"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorNotYetImplemented:
 *         return "cudaErrorNotYetImplemented"
 */
    __pyx_r = ((char const *)"cudaErrorMixedDeviceExecution");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":282
 *     if error == cudaErrorInvalidNormSetting:
 *         return "cudaErrorInvalidNormSetting"
 *     if error == cudaErrorMixedDeviceExecution:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMixedDeviceExecution"
 *     if error == cudaErrorNotYetImplemented:
 */
  }

  /* "cuda/ccudart.pyx":284
 *     if error == cudaErrorMixedDeviceExecution:
 *         return "cudaErrorMixedDeviceExecution"
 *     if error == cudaErrorNotYetImplemented:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotYetImplemented"
 *     if error == cudaErrorMemoryValueTooLarge:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorNotYetImplemented) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":285
 *         return "cudaErrorMixedDeviceExecution"
 *     if error == cudaErrorNotYetImplemented:
 *         return "cudaErrorNotYetImplemented"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMemoryValueTooLarge:
 *         return "cudaErrorMemoryValueTooLarge"
 */
    __pyx_r = ((char const *)"cudaErrorNotYetImplemented");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":284
 *     if error == cudaErrorMixedDeviceExecution:
 *         return "cudaErrorMixedDeviceExecution"
 *     if error == cudaErrorNotYetImplemented:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotYetImplemented"
 *     if error == cudaErrorMemoryValueTooLarge:
 */
  }

  /* "cuda/ccudart.pyx":286
 *     if error == cudaErrorNotYetImplemented:
 *         return "cudaErrorNotYetImplemented"
 *     if error == cudaErrorMemoryValueTooLarge:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMemoryValueTooLarge"
 *     if error == cudaErrorStubLibrary:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorMemoryValueTooLarge) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":287
 *         return "cudaErrorNotYetImplemented"
 *     if error == cudaErrorMemoryValueTooLarge:
 *         return "cudaErrorMemoryValueTooLarge"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorStubLibrary:
 *         return "cudaErrorStubLibrary"
 */
    __pyx_r = ((char const *)"cudaErrorMemoryValueTooLarge");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":286
 *     if error == cudaErrorNotYetImplemented:
 *         return "cudaErrorNotYetImplemented"
 *     if error == cudaErrorMemoryValueTooLarge:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMemoryValueTooLarge"
 *     if error == cudaErrorStubLibrary:
 */
  }

  /* "cuda/ccudart.pyx":288
 *     if error == cudaErrorMemoryValueTooLarge:
 *         return "cudaErrorMemoryValueTooLarge"
 *     if error == cudaErrorStubLibrary:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStubLibrary"
 *     if error == cudaErrorInsufficientDriver:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorStubLibrary) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":289
 *         return "cudaErrorMemoryValueTooLarge"
 *     if error == cudaErrorStubLibrary:
 *         return "cudaErrorStubLibrary"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInsufficientDriver:
 *         return "cudaErrorInsufficientDriver"
 */
    __pyx_r = ((char const *)"cudaErrorStubLibrary");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":288
 *     if error == cudaErrorMemoryValueTooLarge:
 *         return "cudaErrorMemoryValueTooLarge"
 *     if error == cudaErrorStubLibrary:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStubLibrary"
 *     if error == cudaErrorInsufficientDriver:
 */
  }

  /* "cuda/ccudart.pyx":290
 *     if error == cudaErrorStubLibrary:
 *         return "cudaErrorStubLibrary"
 *     if error == cudaErrorInsufficientDriver:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInsufficientDriver"
 *     if error == cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInsufficientDriver) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":291
 *         return "cudaErrorStubLibrary"
 *     if error == cudaErrorInsufficientDriver:
 *         return "cudaErrorInsufficientDriver"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorCallRequiresNewerDriver:
 *         return "cudaErrorCallRequiresNewerDriver"
 */
    __pyx_r = ((char const *)"cudaErrorInsufficientDriver");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":290
 *     if error == cudaErrorStubLibrary:
 *         return "cudaErrorStubLibrary"
 *     if error == cudaErrorInsufficientDriver:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInsufficientDriver"
 *     if error == cudaErrorCallRequiresNewerDriver:
 */
  }

  /* "cuda/ccudart.pyx":292
 *     if error == cudaErrorInsufficientDriver:
 *         return "cudaErrorInsufficientDriver"
 *     if error == cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCallRequiresNewerDriver"
 *     if error == cudaErrorInvalidSurface:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":293
 *         return "cudaErrorInsufficientDriver"
 *     if error == cudaErrorCallRequiresNewerDriver:
 *         return "cudaErrorCallRequiresNewerDriver"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidSurface:
 *         return "cudaErrorInvalidSurface"
 */
    __pyx_r = ((char const *)"cudaErrorCallRequiresNewerDriver");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":292
 *     if error == cudaErrorInsufficientDriver:
 *         return "cudaErrorInsufficientDriver"
 *     if error == cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCallRequiresNewerDriver"
 *     if error == cudaErrorInvalidSurface:
 */
  }

  /* "cuda/ccudart.pyx":294
 *     if error == cudaErrorCallRequiresNewerDriver:
 *         return "cudaErrorCallRequiresNewerDriver"
 *     if error == cudaErrorInvalidSurface:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidSurface"
 *     if error == cudaErrorDuplicateVariableName:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidSurface) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":295
 *         return "cudaErrorCallRequiresNewerDriver"
 *     if error == cudaErrorInvalidSurface:
 *         return "cudaErrorInvalidSurface"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorDuplicateVariableName:
 *         return "cudaErrorDuplicateVariableName"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidSurface");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":294
 *     if error == cudaErrorCallRequiresNewerDriver:
 *         return "cudaErrorCallRequiresNewerDriver"
 *     if error == cudaErrorInvalidSurface:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidSurface"
 *     if error == cudaErrorDuplicateVariableName:
 */
  }

  /* "cuda/ccudart.pyx":296
 *     if error == cudaErrorInvalidSurface:
 *         return "cudaErrorInvalidSurface"
 *     if error == cudaErrorDuplicateVariableName:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDuplicateVariableName"
 *     if error == cudaErrorDuplicateTextureName:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorDuplicateVariableName) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":297
 *         return "cudaErrorInvalidSurface"
 *     if error == cudaErrorDuplicateVariableName:
 *         return "cudaErrorDuplicateVariableName"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorDuplicateTextureName:
 *         return "cudaErrorDuplicateTextureName"
 */
    __pyx_r = ((char const *)"cudaErrorDuplicateVariableName");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":296
 *     if error == cudaErrorInvalidSurface:
 *         return "cudaErrorInvalidSurface"
 *     if error == cudaErrorDuplicateVariableName:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDuplicateVariableName"
 *     if error == cudaErrorDuplicateTextureName:
 */
  }

  /* "cuda/ccudart.pyx":298
 *     if error == cudaErrorDuplicateVariableName:
 *         return "cudaErrorDuplicateVariableName"
 *     if error == cudaErrorDuplicateTextureName:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDuplicateTextureName"
 *     if error == cudaErrorDuplicateSurfaceName:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorDuplicateTextureName) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":299
 *         return "cudaErrorDuplicateVariableName"
 *     if error == cudaErrorDuplicateTextureName:
 *         return "cudaErrorDuplicateTextureName"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorDuplicateSurfaceName:
 *         return "cudaErrorDuplicateSurfaceName"
 */
    __pyx_r = ((char const *)"cudaErrorDuplicateTextureName");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":298
 *     if error == cudaErrorDuplicateVariableName:
 *         return "cudaErrorDuplicateVariableName"
 *     if error == cudaErrorDuplicateTextureName:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDuplicateTextureName"
 *     if error == cudaErrorDuplicateSurfaceName:
 */
  }

  /* "cuda/ccudart.pyx":300
 *     if error == cudaErrorDuplicateTextureName:
 *         return "cudaErrorDuplicateTextureName"
 *     if error == cudaErrorDuplicateSurfaceName:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDuplicateSurfaceName"
 *     if error == cudaErrorDevicesUnavailable:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorDuplicateSurfaceName) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":301
 *         return "cudaErrorDuplicateTextureName"
 *     if error == cudaErrorDuplicateSurfaceName:
 *         return "cudaErrorDuplicateSurfaceName"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorDevicesUnavailable:
 *         return "cudaErrorDevicesUnavailable"
 */
    __pyx_r = ((char const *)"cudaErrorDuplicateSurfaceName");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":300
 *     if error == cudaErrorDuplicateTextureName:
 *         return "cudaErrorDuplicateTextureName"
 *     if error == cudaErrorDuplicateSurfaceName:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDuplicateSurfaceName"
 *     if error == cudaErrorDevicesUnavailable:
 */
  }

  /* "cuda/ccudart.pyx":302
 *     if error == cudaErrorDuplicateSurfaceName:
 *         return "cudaErrorDuplicateSurfaceName"
 *     if error == cudaErrorDevicesUnavailable:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDevicesUnavailable"
 *     if error == cudaErrorIncompatibleDriverContext:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorDevicesUnavailable) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":303
 *         return "cudaErrorDuplicateSurfaceName"
 *     if error == cudaErrorDevicesUnavailable:
 *         return "cudaErrorDevicesUnavailable"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorIncompatibleDriverContext:
 *         return "cudaErrorIncompatibleDriverContext"
 */
    __pyx_r = ((char const *)"cudaErrorDevicesUnavailable");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":302
 *     if error == cudaErrorDuplicateSurfaceName:
 *         return "cudaErrorDuplicateSurfaceName"
 *     if error == cudaErrorDevicesUnavailable:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDevicesUnavailable"
 *     if error == cudaErrorIncompatibleDriverContext:
 */
  }

  /* "cuda/ccudart.pyx":304
 *     if error == cudaErrorDevicesUnavailable:
 *         return "cudaErrorDevicesUnavailable"
 *     if error == cudaErrorIncompatibleDriverContext:             # <<<<<<<<<<<<<<
 *         return "cudaErrorIncompatibleDriverContext"
 *     if error == cudaErrorMissingConfiguration:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorIncompatibleDriverContext) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":305
 *         return "cudaErrorDevicesUnavailable"
 *     if error == cudaErrorIncompatibleDriverContext:
 *         return "cudaErrorIncompatibleDriverContext"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMissingConfiguration:
 *         return "cudaErrorMissingConfiguration"
 */
    __pyx_r = ((char const *)"cudaErrorIncompatibleDriverContext");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":304
 *     if error == cudaErrorDevicesUnavailable:
 *         return "cudaErrorDevicesUnavailable"
 *     if error == cudaErrorIncompatibleDriverContext:             # <<<<<<<<<<<<<<
 *         return "cudaErrorIncompatibleDriverContext"
 *     if error == cudaErrorMissingConfiguration:
 */
  }

  /* "cuda/ccudart.pyx":306
 *     if error == cudaErrorIncompatibleDriverContext:
 *         return "cudaErrorIncompatibleDriverContext"
 *     if error == cudaErrorMissingConfiguration:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMissingConfiguration"
 *     if error == cudaErrorPriorLaunchFailure:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorMissingConfiguration) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":307
 *         return "cudaErrorIncompatibleDriverContext"
 *     if error == cudaErrorMissingConfiguration:
 *         return "cudaErrorMissingConfiguration"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorPriorLaunchFailure:
 *         return "cudaErrorPriorLaunchFailure"
 */
    __pyx_r = ((char const *)"cudaErrorMissingConfiguration");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":306
 *     if error == cudaErrorIncompatibleDriverContext:
 *         return "cudaErrorIncompatibleDriverContext"
 *     if error == cudaErrorMissingConfiguration:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMissingConfiguration"
 *     if error == cudaErrorPriorLaunchFailure:
 */
  }

  /* "cuda/ccudart.pyx":308
 *     if error == cudaErrorMissingConfiguration:
 *         return "cudaErrorMissingConfiguration"
 *     if error == cudaErrorPriorLaunchFailure:             # <<<<<<<<<<<<<<
 *         return "cudaErrorPriorLaunchFailure"
 *     if error == cudaErrorLaunchMaxDepthExceeded:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorPriorLaunchFailure) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":309
 *         return "cudaErrorMissingConfiguration"
 *     if error == cudaErrorPriorLaunchFailure:
 *         return "cudaErrorPriorLaunchFailure"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorLaunchMaxDepthExceeded:
 *         return "cudaErrorLaunchMaxDepthExceeded"
 */
    __pyx_r = ((char const *)"cudaErrorPriorLaunchFailure");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":308
 *     if error == cudaErrorMissingConfiguration:
 *         return "cudaErrorMissingConfiguration"
 *     if error == cudaErrorPriorLaunchFailure:             # <<<<<<<<<<<<<<
 *         return "cudaErrorPriorLaunchFailure"
 *     if error == cudaErrorLaunchMaxDepthExceeded:
 */
  }

  /* "cuda/ccudart.pyx":310
 *     if error == cudaErrorPriorLaunchFailure:
 *         return "cudaErrorPriorLaunchFailure"
 *     if error == cudaErrorLaunchMaxDepthExceeded:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchMaxDepthExceeded"
 *     if error == cudaErrorLaunchFileScopedTex:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorLaunchMaxDepthExceeded) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":311
 *         return "cudaErrorPriorLaunchFailure"
 *     if error == cudaErrorLaunchMaxDepthExceeded:
 *         return "cudaErrorLaunchMaxDepthExceeded"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorLaunchFileScopedTex:
 *         return "cudaErrorLaunchFileScopedTex"
 */
    __pyx_r = ((char const *)"cudaErrorLaunchMaxDepthExceeded");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":310
 *     if error == cudaErrorPriorLaunchFailure:
 *         return "cudaErrorPriorLaunchFailure"
 *     if error == cudaErrorLaunchMaxDepthExceeded:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchMaxDepthExceeded"
 *     if error == cudaErrorLaunchFileScopedTex:
 */
  }

  /* "cuda/ccudart.pyx":312
 *     if error == cudaErrorLaunchMaxDepthExceeded:
 *         return "cudaErrorLaunchMaxDepthExceeded"
 *     if error == cudaErrorLaunchFileScopedTex:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchFileScopedTex"
 *     if error == cudaErrorLaunchFileScopedSurf:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorLaunchFileScopedTex) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":313
 *         return "cudaErrorLaunchMaxDepthExceeded"
 *     if error == cudaErrorLaunchFileScopedTex:
 *         return "cudaErrorLaunchFileScopedTex"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorLaunchFileScopedSurf:
 *         return "cudaErrorLaunchFileScopedSurf"
 */
    __pyx_r = ((char const *)"cudaErrorLaunchFileScopedTex");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":312
 *     if error == cudaErrorLaunchMaxDepthExceeded:
 *         return "cudaErrorLaunchMaxDepthExceeded"
 *     if error == cudaErrorLaunchFileScopedTex:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchFileScopedTex"
 *     if error == cudaErrorLaunchFileScopedSurf:
 */
  }

  /* "cuda/ccudart.pyx":314
 *     if error == cudaErrorLaunchFileScopedTex:
 *         return "cudaErrorLaunchFileScopedTex"
 *     if error == cudaErrorLaunchFileScopedSurf:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchFileScopedSurf"
 *     if error == cudaErrorSyncDepthExceeded:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorLaunchFileScopedSurf) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":315
 *         return "cudaErrorLaunchFileScopedTex"
 *     if error == cudaErrorLaunchFileScopedSurf:
 *         return "cudaErrorLaunchFileScopedSurf"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorSyncDepthExceeded:
 *         return "cudaErrorSyncDepthExceeded"
 */
    __pyx_r = ((char const *)"cudaErrorLaunchFileScopedSurf");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":314
 *     if error == cudaErrorLaunchFileScopedTex:
 *         return "cudaErrorLaunchFileScopedTex"
 *     if error == cudaErrorLaunchFileScopedSurf:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchFileScopedSurf"
 *     if error == cudaErrorSyncDepthExceeded:
 */
  }

  /* "cuda/ccudart.pyx":316
 *     if error == cudaErrorLaunchFileScopedSurf:
 *         return "cudaErrorLaunchFileScopedSurf"
 *     if error == cudaErrorSyncDepthExceeded:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSyncDepthExceeded"
 *     if error == cudaErrorLaunchPendingCountExceeded:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorSyncDepthExceeded) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":317
 *         return "cudaErrorLaunchFileScopedSurf"
 *     if error == cudaErrorSyncDepthExceeded:
 *         return "cudaErrorSyncDepthExceeded"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorLaunchPendingCountExceeded:
 *         return "cudaErrorLaunchPendingCountExceeded"
 */
    __pyx_r = ((char const *)"cudaErrorSyncDepthExceeded");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":316
 *     if error == cudaErrorLaunchFileScopedSurf:
 *         return "cudaErrorLaunchFileScopedSurf"
 *     if error == cudaErrorSyncDepthExceeded:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSyncDepthExceeded"
 *     if error == cudaErrorLaunchPendingCountExceeded:
 */
  }

  /* "cuda/ccudart.pyx":318
 *     if error == cudaErrorSyncDepthExceeded:
 *         return "cudaErrorSyncDepthExceeded"
 *     if error == cudaErrorLaunchPendingCountExceeded:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchPendingCountExceeded"
 *     if error == cudaErrorInvalidDeviceFunction:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorLaunchPendingCountExceeded) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":319
 *         return "cudaErrorSyncDepthExceeded"
 *     if error == cudaErrorLaunchPendingCountExceeded:
 *         return "cudaErrorLaunchPendingCountExceeded"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidDeviceFunction:
 *         return "cudaErrorInvalidDeviceFunction"
 */
    __pyx_r = ((char const *)"cudaErrorLaunchPendingCountExceeded");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":318
 *     if error == cudaErrorSyncDepthExceeded:
 *         return "cudaErrorSyncDepthExceeded"
 *     if error == cudaErrorLaunchPendingCountExceeded:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchPendingCountExceeded"
 *     if error == cudaErrorInvalidDeviceFunction:
 */
  }

  /* "cuda/ccudart.pyx":320
 *     if error == cudaErrorLaunchPendingCountExceeded:
 *         return "cudaErrorLaunchPendingCountExceeded"
 *     if error == cudaErrorInvalidDeviceFunction:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidDeviceFunction"
 *     if error == cudaErrorNoDevice:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidDeviceFunction) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":321
 *         return "cudaErrorLaunchPendingCountExceeded"
 *     if error == cudaErrorInvalidDeviceFunction:
 *         return "cudaErrorInvalidDeviceFunction"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorNoDevice:
 *         return "cudaErrorNoDevice"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidDeviceFunction");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":320
 *     if error == cudaErrorLaunchPendingCountExceeded:
 *         return "cudaErrorLaunchPendingCountExceeded"
 *     if error == cudaErrorInvalidDeviceFunction:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidDeviceFunction"
 *     if error == cudaErrorNoDevice:
 */
  }

  /* "cuda/ccudart.pyx":322
 *     if error == cudaErrorInvalidDeviceFunction:
 *         return "cudaErrorInvalidDeviceFunction"
 *     if error == cudaErrorNoDevice:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNoDevice"
 *     if error == cudaErrorInvalidDevice:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorNoDevice) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":323
 *         return "cudaErrorInvalidDeviceFunction"
 *     if error == cudaErrorNoDevice:
 *         return "cudaErrorNoDevice"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidDevice:
 *         return "cudaErrorInvalidDevice"
 */
    __pyx_r = ((char const *)"cudaErrorNoDevice");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":322
 *     if error == cudaErrorInvalidDeviceFunction:
 *         return "cudaErrorInvalidDeviceFunction"
 *     if error == cudaErrorNoDevice:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNoDevice"
 *     if error == cudaErrorInvalidDevice:
 */
  }

  /* "cuda/ccudart.pyx":324
 *     if error == cudaErrorNoDevice:
 *         return "cudaErrorNoDevice"
 *     if error == cudaErrorInvalidDevice:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidDevice"
 *     if error == cudaErrorDeviceNotLicensed:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidDevice) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":325
 *         return "cudaErrorNoDevice"
 *     if error == cudaErrorInvalidDevice:
 *         return "cudaErrorInvalidDevice"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorDeviceNotLicensed:
 *         return "cudaErrorDeviceNotLicensed"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidDevice");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":324
 *     if error == cudaErrorNoDevice:
 *         return "cudaErrorNoDevice"
 *     if error == cudaErrorInvalidDevice:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidDevice"
 *     if error == cudaErrorDeviceNotLicensed:
 */
  }

  /* "cuda/ccudart.pyx":326
 *     if error == cudaErrorInvalidDevice:
 *         return "cudaErrorInvalidDevice"
 *     if error == cudaErrorDeviceNotLicensed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDeviceNotLicensed"
 *     if error == cudaErrorSoftwareValidityNotEstablished:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorDeviceNotLicensed) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":327
 *         return "cudaErrorInvalidDevice"
 *     if error == cudaErrorDeviceNotLicensed:
 *         return "cudaErrorDeviceNotLicensed"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorSoftwareValidityNotEstablished:
 *         return "cudaErrorSoftwareValidityNotEstablished"
 */
    __pyx_r = ((char const *)"cudaErrorDeviceNotLicensed");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":326
 *     if error == cudaErrorInvalidDevice:
 *         return "cudaErrorInvalidDevice"
 *     if error == cudaErrorDeviceNotLicensed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDeviceNotLicensed"
 *     if error == cudaErrorSoftwareValidityNotEstablished:
 */
  }

  /* "cuda/ccudart.pyx":328
 *     if error == cudaErrorDeviceNotLicensed:
 *         return "cudaErrorDeviceNotLicensed"
 *     if error == cudaErrorSoftwareValidityNotEstablished:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSoftwareValidityNotEstablished"
 *     if error == cudaErrorStartupFailure:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorSoftwareValidityNotEstablished) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":329
 *         return "cudaErrorDeviceNotLicensed"
 *     if error == cudaErrorSoftwareValidityNotEstablished:
 *         return "cudaErrorSoftwareValidityNotEstablished"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorStartupFailure:
 *         return "cudaErrorStartupFailure"
 */
    __pyx_r = ((char const *)"cudaErrorSoftwareValidityNotEstablished");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":328
 *     if error == cudaErrorDeviceNotLicensed:
 *         return "cudaErrorDeviceNotLicensed"
 *     if error == cudaErrorSoftwareValidityNotEstablished:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSoftwareValidityNotEstablished"
 *     if error == cudaErrorStartupFailure:
 */
  }

  /* "cuda/ccudart.pyx":330
 *     if error == cudaErrorSoftwareValidityNotEstablished:
 *         return "cudaErrorSoftwareValidityNotEstablished"
 *     if error == cudaErrorStartupFailure:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStartupFailure"
 *     if error == cudaErrorInvalidKernelImage:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorStartupFailure) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":331
 *         return "cudaErrorSoftwareValidityNotEstablished"
 *     if error == cudaErrorStartupFailure:
 *         return "cudaErrorStartupFailure"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidKernelImage:
 *         return "cudaErrorInvalidKernelImage"
 */
    __pyx_r = ((char const *)"cudaErrorStartupFailure");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":330
 *     if error == cudaErrorSoftwareValidityNotEstablished:
 *         return "cudaErrorSoftwareValidityNotEstablished"
 *     if error == cudaErrorStartupFailure:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStartupFailure"
 *     if error == cudaErrorInvalidKernelImage:
 */
  }

  /* "cuda/ccudart.pyx":332
 *     if error == cudaErrorStartupFailure:
 *         return "cudaErrorStartupFailure"
 *     if error == cudaErrorInvalidKernelImage:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidKernelImage"
 *     if error == cudaErrorDeviceUninitialized:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidKernelImage) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":333
 *         return "cudaErrorStartupFailure"
 *     if error == cudaErrorInvalidKernelImage:
 *         return "cudaErrorInvalidKernelImage"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorDeviceUninitialized:
 *         return "cudaErrorDeviceUninitialized"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidKernelImage");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":332
 *     if error == cudaErrorStartupFailure:
 *         return "cudaErrorStartupFailure"
 *     if error == cudaErrorInvalidKernelImage:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidKernelImage"
 *     if error == cudaErrorDeviceUninitialized:
 */
  }

  /* "cuda/ccudart.pyx":334
 *     if error == cudaErrorInvalidKernelImage:
 *         return "cudaErrorInvalidKernelImage"
 *     if error == cudaErrorDeviceUninitialized:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDeviceUninitialized"
 *     if error == cudaErrorMapBufferObjectFailed:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorDeviceUninitialized) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":335
 *         return "cudaErrorInvalidKernelImage"
 *     if error == cudaErrorDeviceUninitialized:
 *         return "cudaErrorDeviceUninitialized"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMapBufferObjectFailed:
 *         return "cudaErrorMapBufferObjectFailed"
 */
    __pyx_r = ((char const *)"cudaErrorDeviceUninitialized");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":334
 *     if error == cudaErrorInvalidKernelImage:
 *         return "cudaErrorInvalidKernelImage"
 *     if error == cudaErrorDeviceUninitialized:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDeviceUninitialized"
 *     if error == cudaErrorMapBufferObjectFailed:
 */
  }

  /* "cuda/ccudart.pyx":336
 *     if error == cudaErrorDeviceUninitialized:
 *         return "cudaErrorDeviceUninitialized"
 *     if error == cudaErrorMapBufferObjectFailed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMapBufferObjectFailed"
 *     if error == cudaErrorUnmapBufferObjectFailed:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorMapBufferObjectFailed) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":337
 *         return "cudaErrorDeviceUninitialized"
 *     if error == cudaErrorMapBufferObjectFailed:
 *         return "cudaErrorMapBufferObjectFailed"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorUnmapBufferObjectFailed:
 *         return "cudaErrorUnmapBufferObjectFailed"
 */
    __pyx_r = ((char const *)"cudaErrorMapBufferObjectFailed");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":336
 *     if error == cudaErrorDeviceUninitialized:
 *         return "cudaErrorDeviceUninitialized"
 *     if error == cudaErrorMapBufferObjectFailed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMapBufferObjectFailed"
 *     if error == cudaErrorUnmapBufferObjectFailed:
 */
  }

  /* "cuda/ccudart.pyx":338
 *     if error == cudaErrorMapBufferObjectFailed:
 *         return "cudaErrorMapBufferObjectFailed"
 *     if error == cudaErrorUnmapBufferObjectFailed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnmapBufferObjectFailed"
 *     if error == cudaErrorArrayIsMapped:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorUnmapBufferObjectFailed) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":339
 *         return "cudaErrorMapBufferObjectFailed"
 *     if error == cudaErrorUnmapBufferObjectFailed:
 *         return "cudaErrorUnmapBufferObjectFailed"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorArrayIsMapped:
 *         return "cudaErrorArrayIsMapped"
 */
    __pyx_r = ((char const *)"cudaErrorUnmapBufferObjectFailed");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":338
 *     if error == cudaErrorMapBufferObjectFailed:
 *         return "cudaErrorMapBufferObjectFailed"
 *     if error == cudaErrorUnmapBufferObjectFailed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnmapBufferObjectFailed"
 *     if error == cudaErrorArrayIsMapped:
 */
  }

  /* "cuda/ccudart.pyx":340
 *     if error == cudaErrorUnmapBufferObjectFailed:
 *         return "cudaErrorUnmapBufferObjectFailed"
 *     if error == cudaErrorArrayIsMapped:             # <<<<<<<<<<<<<<
 *         return "cudaErrorArrayIsMapped"
 *     if error == cudaErrorAlreadyMapped:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorArrayIsMapped) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":341
 *         return "cudaErrorUnmapBufferObjectFailed"
 *     if error == cudaErrorArrayIsMapped:
 *         return "cudaErrorArrayIsMapped"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorAlreadyMapped:
 *         return "cudaErrorAlreadyMapped"
 */
    __pyx_r = ((char const *)"cudaErrorArrayIsMapped");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":340
 *     if error == cudaErrorUnmapBufferObjectFailed:
 *         return "cudaErrorUnmapBufferObjectFailed"
 *     if error == cudaErrorArrayIsMapped:             # <<<<<<<<<<<<<<
 *         return "cudaErrorArrayIsMapped"
 *     if error == cudaErrorAlreadyMapped:
 */
  }

  /* "cuda/ccudart.pyx":342
 *     if error == cudaErrorArrayIsMapped:
 *         return "cudaErrorArrayIsMapped"
 *     if error == cudaErrorAlreadyMapped:             # <<<<<<<<<<<<<<
 *         return "cudaErrorAlreadyMapped"
 *     if error == cudaErrorNoKernelImageForDevice:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorAlreadyMapped) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":343
 *         return "cudaErrorArrayIsMapped"
 *     if error == cudaErrorAlreadyMapped:
 *         return "cudaErrorAlreadyMapped"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorNoKernelImageForDevice:
 *         return "cudaErrorNoKernelImageForDevice"
 */
    __pyx_r = ((char const *)"cudaErrorAlreadyMapped");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":342
 *     if error == cudaErrorArrayIsMapped:
 *         return "cudaErrorArrayIsMapped"
 *     if error == cudaErrorAlreadyMapped:             # <<<<<<<<<<<<<<
 *         return "cudaErrorAlreadyMapped"
 *     if error == cudaErrorNoKernelImageForDevice:
 */
  }

  /* "cuda/ccudart.pyx":344
 *     if error == cudaErrorAlreadyMapped:
 *         return "cudaErrorAlreadyMapped"
 *     if error == cudaErrorNoKernelImageForDevice:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNoKernelImageForDevice"
 *     if error == cudaErrorAlreadyAcquired:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorNoKernelImageForDevice) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":345
 *         return "cudaErrorAlreadyMapped"
 *     if error == cudaErrorNoKernelImageForDevice:
 *         return "cudaErrorNoKernelImageForDevice"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorAlreadyAcquired:
 *         return "cudaErrorAlreadyAcquired"
 */
    __pyx_r = ((char const *)"cudaErrorNoKernelImageForDevice");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":344
 *     if error == cudaErrorAlreadyMapped:
 *         return "cudaErrorAlreadyMapped"
 *     if error == cudaErrorNoKernelImageForDevice:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNoKernelImageForDevice"
 *     if error == cudaErrorAlreadyAcquired:
 */
  }

  /* "cuda/ccudart.pyx":346
 *     if error == cudaErrorNoKernelImageForDevice:
 *         return "cudaErrorNoKernelImageForDevice"
 *     if error == cudaErrorAlreadyAcquired:             # <<<<<<<<<<<<<<
 *         return "cudaErrorAlreadyAcquired"
 *     if error == cudaErrorNotMapped:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorAlreadyAcquired) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":347
 *         return "cudaErrorNoKernelImageForDevice"
 *     if error == cudaErrorAlreadyAcquired:
 *         return "cudaErrorAlreadyAcquired"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorNotMapped:
 *         return "cudaErrorNotMapped"
 */
    __pyx_r = ((char const *)"cudaErrorAlreadyAcquired");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":346
 *     if error == cudaErrorNoKernelImageForDevice:
 *         return "cudaErrorNoKernelImageForDevice"
 *     if error == cudaErrorAlreadyAcquired:             # <<<<<<<<<<<<<<
 *         return "cudaErrorAlreadyAcquired"
 *     if error == cudaErrorNotMapped:
 */
  }

  /* "cuda/ccudart.pyx":348
 *     if error == cudaErrorAlreadyAcquired:
 *         return "cudaErrorAlreadyAcquired"
 *     if error == cudaErrorNotMapped:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotMapped"
 *     if error == cudaErrorNotMappedAsArray:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorNotMapped) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":349
 *         return "cudaErrorAlreadyAcquired"
 *     if error == cudaErrorNotMapped:
 *         return "cudaErrorNotMapped"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorNotMappedAsArray:
 *         return "cudaErrorNotMappedAsArray"
 */
    __pyx_r = ((char const *)"cudaErrorNotMapped");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":348
 *     if error == cudaErrorAlreadyAcquired:
 *         return "cudaErrorAlreadyAcquired"
 *     if error == cudaErrorNotMapped:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotMapped"
 *     if error == cudaErrorNotMappedAsArray:
 */
  }

  /* "cuda/ccudart.pyx":350
 *     if error == cudaErrorNotMapped:
 *         return "cudaErrorNotMapped"
 *     if error == cudaErrorNotMappedAsArray:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotMappedAsArray"
 *     if error == cudaErrorNotMappedAsPointer:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorNotMappedAsArray) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":351
 *         return "cudaErrorNotMapped"
 *     if error == cudaErrorNotMappedAsArray:
 *         return "cudaErrorNotMappedAsArray"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorNotMappedAsPointer:
 *         return "cudaErrorNotMappedAsPointer"
 */
    __pyx_r = ((char const *)"cudaErrorNotMappedAsArray");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":350
 *     if error == cudaErrorNotMapped:
 *         return "cudaErrorNotMapped"
 *     if error == cudaErrorNotMappedAsArray:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotMappedAsArray"
 *     if error == cudaErrorNotMappedAsPointer:
 */
  }

  /* "cuda/ccudart.pyx":352
 *     if error == cudaErrorNotMappedAsArray:
 *         return "cudaErrorNotMappedAsArray"
 *     if error == cudaErrorNotMappedAsPointer:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotMappedAsPointer"
 *     if error == cudaErrorECCUncorrectable:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorNotMappedAsPointer) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":353
 *         return "cudaErrorNotMappedAsArray"
 *     if error == cudaErrorNotMappedAsPointer:
 *         return "cudaErrorNotMappedAsPointer"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorECCUncorrectable:
 *         return "cudaErrorECCUncorrectable"
 */
    __pyx_r = ((char const *)"cudaErrorNotMappedAsPointer");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":352
 *     if error == cudaErrorNotMappedAsArray:
 *         return "cudaErrorNotMappedAsArray"
 *     if error == cudaErrorNotMappedAsPointer:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotMappedAsPointer"
 *     if error == cudaErrorECCUncorrectable:
 */
  }

  /* "cuda/ccudart.pyx":354
 *     if error == cudaErrorNotMappedAsPointer:
 *         return "cudaErrorNotMappedAsPointer"
 *     if error == cudaErrorECCUncorrectable:             # <<<<<<<<<<<<<<
 *         return "cudaErrorECCUncorrectable"
 *     if error == cudaErrorUnsupportedLimit:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorECCUncorrectable) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":355
 *         return "cudaErrorNotMappedAsPointer"
 *     if error == cudaErrorECCUncorrectable:
 *         return "cudaErrorECCUncorrectable"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorUnsupportedLimit:
 *         return "cudaErrorUnsupportedLimit"
 */
    __pyx_r = ((char const *)"cudaErrorECCUncorrectable");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":354
 *     if error == cudaErrorNotMappedAsPointer:
 *         return "cudaErrorNotMappedAsPointer"
 *     if error == cudaErrorECCUncorrectable:             # <<<<<<<<<<<<<<
 *         return "cudaErrorECCUncorrectable"
 *     if error == cudaErrorUnsupportedLimit:
 */
  }

  /* "cuda/ccudart.pyx":356
 *     if error == cudaErrorECCUncorrectable:
 *         return "cudaErrorECCUncorrectable"
 *     if error == cudaErrorUnsupportedLimit:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnsupportedLimit"
 *     if error == cudaErrorDeviceAlreadyInUse:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorUnsupportedLimit) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":357
 *         return "cudaErrorECCUncorrectable"
 *     if error == cudaErrorUnsupportedLimit:
 *         return "cudaErrorUnsupportedLimit"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorDeviceAlreadyInUse:
 *         return "cudaErrorDeviceAlreadyInUse"
 */
    __pyx_r = ((char const *)"cudaErrorUnsupportedLimit");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":356
 *     if error == cudaErrorECCUncorrectable:
 *         return "cudaErrorECCUncorrectable"
 *     if error == cudaErrorUnsupportedLimit:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnsupportedLimit"
 *     if error == cudaErrorDeviceAlreadyInUse:
 */
  }

  /* "cuda/ccudart.pyx":358
 *     if error == cudaErrorUnsupportedLimit:
 *         return "cudaErrorUnsupportedLimit"
 *     if error == cudaErrorDeviceAlreadyInUse:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDeviceAlreadyInUse"
 *     if error == cudaErrorPeerAccessUnsupported:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorDeviceAlreadyInUse) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":359
 *         return "cudaErrorUnsupportedLimit"
 *     if error == cudaErrorDeviceAlreadyInUse:
 *         return "cudaErrorDeviceAlreadyInUse"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorPeerAccessUnsupported:
 *         return "cudaErrorPeerAccessUnsupported"
 */
    __pyx_r = ((char const *)"cudaErrorDeviceAlreadyInUse");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":358
 *     if error == cudaErrorUnsupportedLimit:
 *         return "cudaErrorUnsupportedLimit"
 *     if error == cudaErrorDeviceAlreadyInUse:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDeviceAlreadyInUse"
 *     if error == cudaErrorPeerAccessUnsupported:
 */
  }

  /* "cuda/ccudart.pyx":360
 *     if error == cudaErrorDeviceAlreadyInUse:
 *         return "cudaErrorDeviceAlreadyInUse"
 *     if error == cudaErrorPeerAccessUnsupported:             # <<<<<<<<<<<<<<
 *         return "cudaErrorPeerAccessUnsupported"
 *     if error == cudaErrorInvalidPtx:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorPeerAccessUnsupported) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":361
 *         return "cudaErrorDeviceAlreadyInUse"
 *     if error == cudaErrorPeerAccessUnsupported:
 *         return "cudaErrorPeerAccessUnsupported"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidPtx:
 *         return "cudaErrorInvalidPtx"
 */
    __pyx_r = ((char const *)"cudaErrorPeerAccessUnsupported");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":360
 *     if error == cudaErrorDeviceAlreadyInUse:
 *         return "cudaErrorDeviceAlreadyInUse"
 *     if error == cudaErrorPeerAccessUnsupported:             # <<<<<<<<<<<<<<
 *         return "cudaErrorPeerAccessUnsupported"
 *     if error == cudaErrorInvalidPtx:
 */
  }

  /* "cuda/ccudart.pyx":362
 *     if error == cudaErrorPeerAccessUnsupported:
 *         return "cudaErrorPeerAccessUnsupported"
 *     if error == cudaErrorInvalidPtx:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidPtx"
 *     if error == cudaErrorInvalidGraphicsContext:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidPtx) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":363
 *         return "cudaErrorPeerAccessUnsupported"
 *     if error == cudaErrorInvalidPtx:
 *         return "cudaErrorInvalidPtx"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidGraphicsContext:
 *         return "cudaErrorInvalidGraphicsContext"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidPtx");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":362
 *     if error == cudaErrorPeerAccessUnsupported:
 *         return "cudaErrorPeerAccessUnsupported"
 *     if error == cudaErrorInvalidPtx:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidPtx"
 *     if error == cudaErrorInvalidGraphicsContext:
 */
  }

  /* "cuda/ccudart.pyx":364
 *     if error == cudaErrorInvalidPtx:
 *         return "cudaErrorInvalidPtx"
 *     if error == cudaErrorInvalidGraphicsContext:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidGraphicsContext"
 *     if error == cudaErrorNvlinkUncorrectable:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidGraphicsContext) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":365
 *         return "cudaErrorInvalidPtx"
 *     if error == cudaErrorInvalidGraphicsContext:
 *         return "cudaErrorInvalidGraphicsContext"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorNvlinkUncorrectable:
 *         return "cudaErrorNvlinkUncorrectable"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidGraphicsContext");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":364
 *     if error == cudaErrorInvalidPtx:
 *         return "cudaErrorInvalidPtx"
 *     if error == cudaErrorInvalidGraphicsContext:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidGraphicsContext"
 *     if error == cudaErrorNvlinkUncorrectable:
 */
  }

  /* "cuda/ccudart.pyx":366
 *     if error == cudaErrorInvalidGraphicsContext:
 *         return "cudaErrorInvalidGraphicsContext"
 *     if error == cudaErrorNvlinkUncorrectable:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNvlinkUncorrectable"
 *     if error == cudaErrorJitCompilerNotFound:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorNvlinkUncorrectable) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":367
 *         return "cudaErrorInvalidGraphicsContext"
 *     if error == cudaErrorNvlinkUncorrectable:
 *         return "cudaErrorNvlinkUncorrectable"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorJitCompilerNotFound:
 *         return "cudaErrorJitCompilerNotFound"
 */
    __pyx_r = ((char const *)"cudaErrorNvlinkUncorrectable");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":366
 *     if error == cudaErrorInvalidGraphicsContext:
 *         return "cudaErrorInvalidGraphicsContext"
 *     if error == cudaErrorNvlinkUncorrectable:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNvlinkUncorrectable"
 *     if error == cudaErrorJitCompilerNotFound:
 */
  }

  /* "cuda/ccudart.pyx":368
 *     if error == cudaErrorNvlinkUncorrectable:
 *         return "cudaErrorNvlinkUncorrectable"
 *     if error == cudaErrorJitCompilerNotFound:             # <<<<<<<<<<<<<<
 *         return "cudaErrorJitCompilerNotFound"
 *     if error == cudaErrorUnsupportedPtxVersion:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorJitCompilerNotFound) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":369
 *         return "cudaErrorNvlinkUncorrectable"
 *     if error == cudaErrorJitCompilerNotFound:
 *         return "cudaErrorJitCompilerNotFound"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorUnsupportedPtxVersion:
 *         return "cudaErrorUnsupportedPtxVersion"
 */
    __pyx_r = ((char const *)"cudaErrorJitCompilerNotFound");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":368
 *     if error == cudaErrorNvlinkUncorrectable:
 *         return "cudaErrorNvlinkUncorrectable"
 *     if error == cudaErrorJitCompilerNotFound:             # <<<<<<<<<<<<<<
 *         return "cudaErrorJitCompilerNotFound"
 *     if error == cudaErrorUnsupportedPtxVersion:
 */
  }

  /* "cuda/ccudart.pyx":370
 *     if error == cudaErrorJitCompilerNotFound:
 *         return "cudaErrorJitCompilerNotFound"
 *     if error == cudaErrorUnsupportedPtxVersion:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnsupportedPtxVersion"
 *     if error == cudaErrorJitCompilationDisabled:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorUnsupportedPtxVersion) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":371
 *         return "cudaErrorJitCompilerNotFound"
 *     if error == cudaErrorUnsupportedPtxVersion:
 *         return "cudaErrorUnsupportedPtxVersion"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorJitCompilationDisabled:
 *         return "cudaErrorJitCompilationDisabled"
 */
    __pyx_r = ((char const *)"cudaErrorUnsupportedPtxVersion");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":370
 *     if error == cudaErrorJitCompilerNotFound:
 *         return "cudaErrorJitCompilerNotFound"
 *     if error == cudaErrorUnsupportedPtxVersion:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnsupportedPtxVersion"
 *     if error == cudaErrorJitCompilationDisabled:
 */
  }

  /* "cuda/ccudart.pyx":372
 *     if error == cudaErrorUnsupportedPtxVersion:
 *         return "cudaErrorUnsupportedPtxVersion"
 *     if error == cudaErrorJitCompilationDisabled:             # <<<<<<<<<<<<<<
 *         return "cudaErrorJitCompilationDisabled"
 *     if error == cudaErrorUnsupportedExecAffinity:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorJitCompilationDisabled) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":373
 *         return "cudaErrorUnsupportedPtxVersion"
 *     if error == cudaErrorJitCompilationDisabled:
 *         return "cudaErrorJitCompilationDisabled"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorUnsupportedExecAffinity:
 *         return "cudaErrorUnsupportedExecAffinity"
 */
    __pyx_r = ((char const *)"cudaErrorJitCompilationDisabled");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":372
 *     if error == cudaErrorUnsupportedPtxVersion:
 *         return "cudaErrorUnsupportedPtxVersion"
 *     if error == cudaErrorJitCompilationDisabled:             # <<<<<<<<<<<<<<
 *         return "cudaErrorJitCompilationDisabled"
 *     if error == cudaErrorUnsupportedExecAffinity:
 */
  }

  /* "cuda/ccudart.pyx":374
 *     if error == cudaErrorJitCompilationDisabled:
 *         return "cudaErrorJitCompilationDisabled"
 *     if error == cudaErrorUnsupportedExecAffinity:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnsupportedExecAffinity"
 *     if error == cudaErrorInvalidSource:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorUnsupportedExecAffinity) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":375
 *         return "cudaErrorJitCompilationDisabled"
 *     if error == cudaErrorUnsupportedExecAffinity:
 *         return "cudaErrorUnsupportedExecAffinity"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidSource:
 *         return "cudaErrorInvalidSource"
 */
    __pyx_r = ((char const *)"cudaErrorUnsupportedExecAffinity");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":374
 *     if error == cudaErrorJitCompilationDisabled:
 *         return "cudaErrorJitCompilationDisabled"
 *     if error == cudaErrorUnsupportedExecAffinity:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnsupportedExecAffinity"
 *     if error == cudaErrorInvalidSource:
 */
  }

  /* "cuda/ccudart.pyx":376
 *     if error == cudaErrorUnsupportedExecAffinity:
 *         return "cudaErrorUnsupportedExecAffinity"
 *     if error == cudaErrorInvalidSource:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidSource"
 *     if error == cudaErrorFileNotFound:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidSource) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":377
 *         return "cudaErrorUnsupportedExecAffinity"
 *     if error == cudaErrorInvalidSource:
 *         return "cudaErrorInvalidSource"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorFileNotFound:
 *         return "cudaErrorFileNotFound"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidSource");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":376
 *     if error == cudaErrorUnsupportedExecAffinity:
 *         return "cudaErrorUnsupportedExecAffinity"
 *     if error == cudaErrorInvalidSource:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidSource"
 *     if error == cudaErrorFileNotFound:
 */
  }

  /* "cuda/ccudart.pyx":378
 *     if error == cudaErrorInvalidSource:
 *         return "cudaErrorInvalidSource"
 *     if error == cudaErrorFileNotFound:             # <<<<<<<<<<<<<<
 *         return "cudaErrorFileNotFound"
 *     if error == cudaErrorSharedObjectSymbolNotFound:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorFileNotFound) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":379
 *         return "cudaErrorInvalidSource"
 *     if error == cudaErrorFileNotFound:
 *         return "cudaErrorFileNotFound"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorSharedObjectSymbolNotFound:
 *         return "cudaErrorSharedObjectSymbolNotFound"
 */
    __pyx_r = ((char const *)"cudaErrorFileNotFound");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":378
 *     if error == cudaErrorInvalidSource:
 *         return "cudaErrorInvalidSource"
 *     if error == cudaErrorFileNotFound:             # <<<<<<<<<<<<<<
 *         return "cudaErrorFileNotFound"
 *     if error == cudaErrorSharedObjectSymbolNotFound:
 */
  }

  /* "cuda/ccudart.pyx":380
 *     if error == cudaErrorFileNotFound:
 *         return "cudaErrorFileNotFound"
 *     if error == cudaErrorSharedObjectSymbolNotFound:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSharedObjectSymbolNotFound"
 *     if error == cudaErrorSharedObjectInitFailed:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorSharedObjectSymbolNotFound) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":381
 *         return "cudaErrorFileNotFound"
 *     if error == cudaErrorSharedObjectSymbolNotFound:
 *         return "cudaErrorSharedObjectSymbolNotFound"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorSharedObjectInitFailed:
 *         return "cudaErrorSharedObjectInitFailed"
 */
    __pyx_r = ((char const *)"cudaErrorSharedObjectSymbolNotFound");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":380
 *     if error == cudaErrorFileNotFound:
 *         return "cudaErrorFileNotFound"
 *     if error == cudaErrorSharedObjectSymbolNotFound:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSharedObjectSymbolNotFound"
 *     if error == cudaErrorSharedObjectInitFailed:
 */
  }

  /* "cuda/ccudart.pyx":382
 *     if error == cudaErrorSharedObjectSymbolNotFound:
 *         return "cudaErrorSharedObjectSymbolNotFound"
 *     if error == cudaErrorSharedObjectInitFailed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSharedObjectInitFailed"
 *     if error == cudaErrorOperatingSystem:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorSharedObjectInitFailed) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":383
 *         return "cudaErrorSharedObjectSymbolNotFound"
 *     if error == cudaErrorSharedObjectInitFailed:
 *         return "cudaErrorSharedObjectInitFailed"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorOperatingSystem:
 *         return "cudaErrorOperatingSystem"
 */
    __pyx_r = ((char const *)"cudaErrorSharedObjectInitFailed");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":382
 *     if error == cudaErrorSharedObjectSymbolNotFound:
 *         return "cudaErrorSharedObjectSymbolNotFound"
 *     if error == cudaErrorSharedObjectInitFailed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSharedObjectInitFailed"
 *     if error == cudaErrorOperatingSystem:
 */
  }

  /* "cuda/ccudart.pyx":384
 *     if error == cudaErrorSharedObjectInitFailed:
 *         return "cudaErrorSharedObjectInitFailed"
 *     if error == cudaErrorOperatingSystem:             # <<<<<<<<<<<<<<
 *         return "cudaErrorOperatingSystem"
 *     if error == cudaErrorInvalidResourceHandle:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorOperatingSystem) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":385
 *         return "cudaErrorSharedObjectInitFailed"
 *     if error == cudaErrorOperatingSystem:
 *         return "cudaErrorOperatingSystem"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidResourceHandle:
 *         return "cudaErrorInvalidResourceHandle"
 */
    __pyx_r = ((char const *)"cudaErrorOperatingSystem");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":384
 *     if error == cudaErrorSharedObjectInitFailed:
 *         return "cudaErrorSharedObjectInitFailed"
 *     if error == cudaErrorOperatingSystem:             # <<<<<<<<<<<<<<
 *         return "cudaErrorOperatingSystem"
 *     if error == cudaErrorInvalidResourceHandle:
 */
  }

  /* "cuda/ccudart.pyx":386
 *     if error == cudaErrorOperatingSystem:
 *         return "cudaErrorOperatingSystem"
 *     if error == cudaErrorInvalidResourceHandle:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidResourceHandle"
 *     if error == cudaErrorIllegalState:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidResourceHandle) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":387
 *         return "cudaErrorOperatingSystem"
 *     if error == cudaErrorInvalidResourceHandle:
 *         return "cudaErrorInvalidResourceHandle"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorIllegalState:
 *         return "cudaErrorIllegalState"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidResourceHandle");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":386
 *     if error == cudaErrorOperatingSystem:
 *         return "cudaErrorOperatingSystem"
 *     if error == cudaErrorInvalidResourceHandle:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidResourceHandle"
 *     if error == cudaErrorIllegalState:
 */
  }

  /* "cuda/ccudart.pyx":388
 *     if error == cudaErrorInvalidResourceHandle:
 *         return "cudaErrorInvalidResourceHandle"
 *     if error == cudaErrorIllegalState:             # <<<<<<<<<<<<<<
 *         return "cudaErrorIllegalState"
 *     if error == cudaErrorSymbolNotFound:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorIllegalState) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":389
 *         return "cudaErrorInvalidResourceHandle"
 *     if error == cudaErrorIllegalState:
 *         return "cudaErrorIllegalState"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorSymbolNotFound:
 *         return "cudaErrorSymbolNotFound"
 */
    __pyx_r = ((char const *)"cudaErrorIllegalState");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":388
 *     if error == cudaErrorInvalidResourceHandle:
 *         return "cudaErrorInvalidResourceHandle"
 *     if error == cudaErrorIllegalState:             # <<<<<<<<<<<<<<
 *         return "cudaErrorIllegalState"
 *     if error == cudaErrorSymbolNotFound:
 */
  }

  /* "cuda/ccudart.pyx":390
 *     if error == cudaErrorIllegalState:
 *         return "cudaErrorIllegalState"
 *     if error == cudaErrorSymbolNotFound:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSymbolNotFound"
 *     if error == cudaErrorNotReady:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorSymbolNotFound) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":391
 *         return "cudaErrorIllegalState"
 *     if error == cudaErrorSymbolNotFound:
 *         return "cudaErrorSymbolNotFound"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorNotReady:
 *         return "cudaErrorNotReady"
 */
    __pyx_r = ((char const *)"cudaErrorSymbolNotFound");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":390
 *     if error == cudaErrorIllegalState:
 *         return "cudaErrorIllegalState"
 *     if error == cudaErrorSymbolNotFound:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSymbolNotFound"
 *     if error == cudaErrorNotReady:
 */
  }

  /* "cuda/ccudart.pyx":392
 *     if error == cudaErrorSymbolNotFound:
 *         return "cudaErrorSymbolNotFound"
 *     if error == cudaErrorNotReady:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotReady"
 *     if error == cudaErrorIllegalAddress:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorNotReady) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":393
 *         return "cudaErrorSymbolNotFound"
 *     if error == cudaErrorNotReady:
 *         return "cudaErrorNotReady"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorIllegalAddress:
 *         return "cudaErrorIllegalAddress"
 */
    __pyx_r = ((char const *)"cudaErrorNotReady");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":392
 *     if error == cudaErrorSymbolNotFound:
 *         return "cudaErrorSymbolNotFound"
 *     if error == cudaErrorNotReady:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotReady"
 *     if error == cudaErrorIllegalAddress:
 */
  }

  /* "cuda/ccudart.pyx":394
 *     if error == cudaErrorNotReady:
 *         return "cudaErrorNotReady"
 *     if error == cudaErrorIllegalAddress:             # <<<<<<<<<<<<<<
 *         return "cudaErrorIllegalAddress"
 *     if error == cudaErrorLaunchOutOfResources:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorIllegalAddress) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":395
 *         return "cudaErrorNotReady"
 *     if error == cudaErrorIllegalAddress:
 *         return "cudaErrorIllegalAddress"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorLaunchOutOfResources:
 *         return "cudaErrorLaunchOutOfResources"
 */
    __pyx_r = ((char const *)"cudaErrorIllegalAddress");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":394
 *     if error == cudaErrorNotReady:
 *         return "cudaErrorNotReady"
 *     if error == cudaErrorIllegalAddress:             # <<<<<<<<<<<<<<
 *         return "cudaErrorIllegalAddress"
 *     if error == cudaErrorLaunchOutOfResources:
 */
  }

  /* "cuda/ccudart.pyx":396
 *     if error == cudaErrorIllegalAddress:
 *         return "cudaErrorIllegalAddress"
 *     if error == cudaErrorLaunchOutOfResources:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchOutOfResources"
 *     if error == cudaErrorLaunchTimeout:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorLaunchOutOfResources) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":397
 *         return "cudaErrorIllegalAddress"
 *     if error == cudaErrorLaunchOutOfResources:
 *         return "cudaErrorLaunchOutOfResources"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorLaunchTimeout:
 *         return "cudaErrorLaunchTimeout"
 */
    __pyx_r = ((char const *)"cudaErrorLaunchOutOfResources");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":396
 *     if error == cudaErrorIllegalAddress:
 *         return "cudaErrorIllegalAddress"
 *     if error == cudaErrorLaunchOutOfResources:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchOutOfResources"
 *     if error == cudaErrorLaunchTimeout:
 */
  }

  /* "cuda/ccudart.pyx":398
 *     if error == cudaErrorLaunchOutOfResources:
 *         return "cudaErrorLaunchOutOfResources"
 *     if error == cudaErrorLaunchTimeout:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchTimeout"
 *     if error == cudaErrorLaunchIncompatibleTexturing:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorLaunchTimeout) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":399
 *         return "cudaErrorLaunchOutOfResources"
 *     if error == cudaErrorLaunchTimeout:
 *         return "cudaErrorLaunchTimeout"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorLaunchIncompatibleTexturing:
 *         return "cudaErrorLaunchIncompatibleTexturing"
 */
    __pyx_r = ((char const *)"cudaErrorLaunchTimeout");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":398
 *     if error == cudaErrorLaunchOutOfResources:
 *         return "cudaErrorLaunchOutOfResources"
 *     if error == cudaErrorLaunchTimeout:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchTimeout"
 *     if error == cudaErrorLaunchIncompatibleTexturing:
 */
  }

  /* "cuda/ccudart.pyx":400
 *     if error == cudaErrorLaunchTimeout:
 *         return "cudaErrorLaunchTimeout"
 *     if error == cudaErrorLaunchIncompatibleTexturing:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchIncompatibleTexturing"
 *     if error == cudaErrorPeerAccessAlreadyEnabled:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorLaunchIncompatibleTexturing) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":401
 *         return "cudaErrorLaunchTimeout"
 *     if error == cudaErrorLaunchIncompatibleTexturing:
 *         return "cudaErrorLaunchIncompatibleTexturing"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorPeerAccessAlreadyEnabled:
 *         return "cudaErrorPeerAccessAlreadyEnabled"
 */
    __pyx_r = ((char const *)"cudaErrorLaunchIncompatibleTexturing");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":400
 *     if error == cudaErrorLaunchTimeout:
 *         return "cudaErrorLaunchTimeout"
 *     if error == cudaErrorLaunchIncompatibleTexturing:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchIncompatibleTexturing"
 *     if error == cudaErrorPeerAccessAlreadyEnabled:
 */
  }

  /* "cuda/ccudart.pyx":402
 *     if error == cudaErrorLaunchIncompatibleTexturing:
 *         return "cudaErrorLaunchIncompatibleTexturing"
 *     if error == cudaErrorPeerAccessAlreadyEnabled:             # <<<<<<<<<<<<<<
 *         return "cudaErrorPeerAccessAlreadyEnabled"
 *     if error == cudaErrorPeerAccessNotEnabled:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorPeerAccessAlreadyEnabled) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":403
 *         return "cudaErrorLaunchIncompatibleTexturing"
 *     if error == cudaErrorPeerAccessAlreadyEnabled:
 *         return "cudaErrorPeerAccessAlreadyEnabled"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorPeerAccessNotEnabled:
 *         return "cudaErrorPeerAccessNotEnabled"
 */
    __pyx_r = ((char const *)"cudaErrorPeerAccessAlreadyEnabled");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":402
 *     if error == cudaErrorLaunchIncompatibleTexturing:
 *         return "cudaErrorLaunchIncompatibleTexturing"
 *     if error == cudaErrorPeerAccessAlreadyEnabled:             # <<<<<<<<<<<<<<
 *         return "cudaErrorPeerAccessAlreadyEnabled"
 *     if error == cudaErrorPeerAccessNotEnabled:
 */
  }

  /* "cuda/ccudart.pyx":404
 *     if error == cudaErrorPeerAccessAlreadyEnabled:
 *         return "cudaErrorPeerAccessAlreadyEnabled"
 *     if error == cudaErrorPeerAccessNotEnabled:             # <<<<<<<<<<<<<<
 *         return "cudaErrorPeerAccessNotEnabled"
 *     if error == cudaErrorSetOnActiveProcess:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorPeerAccessNotEnabled) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":405
 *         return "cudaErrorPeerAccessAlreadyEnabled"
 *     if error == cudaErrorPeerAccessNotEnabled:
 *         return "cudaErrorPeerAccessNotEnabled"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorSetOnActiveProcess:
 *         return "cudaErrorSetOnActiveProcess"
 */
    __pyx_r = ((char const *)"cudaErrorPeerAccessNotEnabled");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":404
 *     if error == cudaErrorPeerAccessAlreadyEnabled:
 *         return "cudaErrorPeerAccessAlreadyEnabled"
 *     if error == cudaErrorPeerAccessNotEnabled:             # <<<<<<<<<<<<<<
 *         return "cudaErrorPeerAccessNotEnabled"
 *     if error == cudaErrorSetOnActiveProcess:
 */
  }

  /* "cuda/ccudart.pyx":406
 *     if error == cudaErrorPeerAccessNotEnabled:
 *         return "cudaErrorPeerAccessNotEnabled"
 *     if error == cudaErrorSetOnActiveProcess:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSetOnActiveProcess"
 *     if error == cudaErrorContextIsDestroyed:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorSetOnActiveProcess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":407
 *         return "cudaErrorPeerAccessNotEnabled"
 *     if error == cudaErrorSetOnActiveProcess:
 *         return "cudaErrorSetOnActiveProcess"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorContextIsDestroyed:
 *         return "cudaErrorContextIsDestroyed"
 */
    __pyx_r = ((char const *)"cudaErrorSetOnActiveProcess");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":406
 *     if error == cudaErrorPeerAccessNotEnabled:
 *         return "cudaErrorPeerAccessNotEnabled"
 *     if error == cudaErrorSetOnActiveProcess:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSetOnActiveProcess"
 *     if error == cudaErrorContextIsDestroyed:
 */
  }

  /* "cuda/ccudart.pyx":408
 *     if error == cudaErrorSetOnActiveProcess:
 *         return "cudaErrorSetOnActiveProcess"
 *     if error == cudaErrorContextIsDestroyed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorContextIsDestroyed"
 *     if error == cudaErrorAssert:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorContextIsDestroyed) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":409
 *         return "cudaErrorSetOnActiveProcess"
 *     if error == cudaErrorContextIsDestroyed:
 *         return "cudaErrorContextIsDestroyed"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorAssert:
 *         return "cudaErrorAssert"
 */
    __pyx_r = ((char const *)"cudaErrorContextIsDestroyed");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":408
 *     if error == cudaErrorSetOnActiveProcess:
 *         return "cudaErrorSetOnActiveProcess"
 *     if error == cudaErrorContextIsDestroyed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorContextIsDestroyed"
 *     if error == cudaErrorAssert:
 */
  }

  /* "cuda/ccudart.pyx":410
 *     if error == cudaErrorContextIsDestroyed:
 *         return "cudaErrorContextIsDestroyed"
 *     if error == cudaErrorAssert:             # <<<<<<<<<<<<<<
 *         return "cudaErrorAssert"
 *     if error == cudaErrorTooManyPeers:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorAssert) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":411
 *         return "cudaErrorContextIsDestroyed"
 *     if error == cudaErrorAssert:
 *         return "cudaErrorAssert"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorTooManyPeers:
 *         return "cudaErrorTooManyPeers"
 */
    __pyx_r = ((char const *)"cudaErrorAssert");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":410
 *     if error == cudaErrorContextIsDestroyed:
 *         return "cudaErrorContextIsDestroyed"
 *     if error == cudaErrorAssert:             # <<<<<<<<<<<<<<
 *         return "cudaErrorAssert"
 *     if error == cudaErrorTooManyPeers:
 */
  }

  /* "cuda/ccudart.pyx":412
 *     if error == cudaErrorAssert:
 *         return "cudaErrorAssert"
 *     if error == cudaErrorTooManyPeers:             # <<<<<<<<<<<<<<
 *         return "cudaErrorTooManyPeers"
 *     if error == cudaErrorHostMemoryAlreadyRegistered:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorTooManyPeers) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":413
 *         return "cudaErrorAssert"
 *     if error == cudaErrorTooManyPeers:
 *         return "cudaErrorTooManyPeers"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorHostMemoryAlreadyRegistered:
 *         return "cudaErrorHostMemoryAlreadyRegistered"
 */
    __pyx_r = ((char const *)"cudaErrorTooManyPeers");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":412
 *     if error == cudaErrorAssert:
 *         return "cudaErrorAssert"
 *     if error == cudaErrorTooManyPeers:             # <<<<<<<<<<<<<<
 *         return "cudaErrorTooManyPeers"
 *     if error == cudaErrorHostMemoryAlreadyRegistered:
 */
  }

  /* "cuda/ccudart.pyx":414
 *     if error == cudaErrorTooManyPeers:
 *         return "cudaErrorTooManyPeers"
 *     if error == cudaErrorHostMemoryAlreadyRegistered:             # <<<<<<<<<<<<<<
 *         return "cudaErrorHostMemoryAlreadyRegistered"
 *     if error == cudaErrorHostMemoryNotRegistered:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorHostMemoryAlreadyRegistered) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":415
 *         return "cudaErrorTooManyPeers"
 *     if error == cudaErrorHostMemoryAlreadyRegistered:
 *         return "cudaErrorHostMemoryAlreadyRegistered"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorHostMemoryNotRegistered:
 *         return "cudaErrorHostMemoryNotRegistered"
 */
    __pyx_r = ((char const *)"cudaErrorHostMemoryAlreadyRegistered");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":414
 *     if error == cudaErrorTooManyPeers:
 *         return "cudaErrorTooManyPeers"
 *     if error == cudaErrorHostMemoryAlreadyRegistered:             # <<<<<<<<<<<<<<
 *         return "cudaErrorHostMemoryAlreadyRegistered"
 *     if error == cudaErrorHostMemoryNotRegistered:
 */
  }

  /* "cuda/ccudart.pyx":416
 *     if error == cudaErrorHostMemoryAlreadyRegistered:
 *         return "cudaErrorHostMemoryAlreadyRegistered"
 *     if error == cudaErrorHostMemoryNotRegistered:             # <<<<<<<<<<<<<<
 *         return "cudaErrorHostMemoryNotRegistered"
 *     if error == cudaErrorHardwareStackError:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorHostMemoryNotRegistered) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":417
 *         return "cudaErrorHostMemoryAlreadyRegistered"
 *     if error == cudaErrorHostMemoryNotRegistered:
 *         return "cudaErrorHostMemoryNotRegistered"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorHardwareStackError:
 *         return "cudaErrorHardwareStackError"
 */
    __pyx_r = ((char const *)"cudaErrorHostMemoryNotRegistered");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":416
 *     if error == cudaErrorHostMemoryAlreadyRegistered:
 *         return "cudaErrorHostMemoryAlreadyRegistered"
 *     if error == cudaErrorHostMemoryNotRegistered:             # <<<<<<<<<<<<<<
 *         return "cudaErrorHostMemoryNotRegistered"
 *     if error == cudaErrorHardwareStackError:
 */
  }

  /* "cuda/ccudart.pyx":418
 *     if error == cudaErrorHostMemoryNotRegistered:
 *         return "cudaErrorHostMemoryNotRegistered"
 *     if error == cudaErrorHardwareStackError:             # <<<<<<<<<<<<<<
 *         return "cudaErrorHardwareStackError"
 *     if error == cudaErrorIllegalInstruction:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorHardwareStackError) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":419
 *         return "cudaErrorHostMemoryNotRegistered"
 *     if error == cudaErrorHardwareStackError:
 *         return "cudaErrorHardwareStackError"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorIllegalInstruction:
 *         return "cudaErrorIllegalInstruction"
 */
    __pyx_r = ((char const *)"cudaErrorHardwareStackError");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":418
 *     if error == cudaErrorHostMemoryNotRegistered:
 *         return "cudaErrorHostMemoryNotRegistered"
 *     if error == cudaErrorHardwareStackError:             # <<<<<<<<<<<<<<
 *         return "cudaErrorHardwareStackError"
 *     if error == cudaErrorIllegalInstruction:
 */
  }

  /* "cuda/ccudart.pyx":420
 *     if error == cudaErrorHardwareStackError:
 *         return "cudaErrorHardwareStackError"
 *     if error == cudaErrorIllegalInstruction:             # <<<<<<<<<<<<<<
 *         return "cudaErrorIllegalInstruction"
 *     if error == cudaErrorMisalignedAddress:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorIllegalInstruction) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":421
 *         return "cudaErrorHardwareStackError"
 *     if error == cudaErrorIllegalInstruction:
 *         return "cudaErrorIllegalInstruction"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMisalignedAddress:
 *         return "cudaErrorMisalignedAddress"
 */
    __pyx_r = ((char const *)"cudaErrorIllegalInstruction");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":420
 *     if error == cudaErrorHardwareStackError:
 *         return "cudaErrorHardwareStackError"
 *     if error == cudaErrorIllegalInstruction:             # <<<<<<<<<<<<<<
 *         return "cudaErrorIllegalInstruction"
 *     if error == cudaErrorMisalignedAddress:
 */
  }

  /* "cuda/ccudart.pyx":422
 *     if error == cudaErrorIllegalInstruction:
 *         return "cudaErrorIllegalInstruction"
 *     if error == cudaErrorMisalignedAddress:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMisalignedAddress"
 *     if error == cudaErrorInvalidAddressSpace:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorMisalignedAddress) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":423
 *         return "cudaErrorIllegalInstruction"
 *     if error == cudaErrorMisalignedAddress:
 *         return "cudaErrorMisalignedAddress"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidAddressSpace:
 *         return "cudaErrorInvalidAddressSpace"
 */
    __pyx_r = ((char const *)"cudaErrorMisalignedAddress");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":422
 *     if error == cudaErrorIllegalInstruction:
 *         return "cudaErrorIllegalInstruction"
 *     if error == cudaErrorMisalignedAddress:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMisalignedAddress"
 *     if error == cudaErrorInvalidAddressSpace:
 */
  }

  /* "cuda/ccudart.pyx":424
 *     if error == cudaErrorMisalignedAddress:
 *         return "cudaErrorMisalignedAddress"
 *     if error == cudaErrorInvalidAddressSpace:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidAddressSpace"
 *     if error == cudaErrorInvalidPc:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidAddressSpace) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":425
 *         return "cudaErrorMisalignedAddress"
 *     if error == cudaErrorInvalidAddressSpace:
 *         return "cudaErrorInvalidAddressSpace"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidPc:
 *         return "cudaErrorInvalidPc"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidAddressSpace");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":424
 *     if error == cudaErrorMisalignedAddress:
 *         return "cudaErrorMisalignedAddress"
 *     if error == cudaErrorInvalidAddressSpace:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidAddressSpace"
 *     if error == cudaErrorInvalidPc:
 */
  }

  /* "cuda/ccudart.pyx":426
 *     if error == cudaErrorInvalidAddressSpace:
 *         return "cudaErrorInvalidAddressSpace"
 *     if error == cudaErrorInvalidPc:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidPc"
 *     if error == cudaErrorLaunchFailure:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorInvalidPc) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":427
 *         return "cudaErrorInvalidAddressSpace"
 *     if error == cudaErrorInvalidPc:
 *         return "cudaErrorInvalidPc"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorLaunchFailure:
 *         return "cudaErrorLaunchFailure"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidPc");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":426
 *     if error == cudaErrorInvalidAddressSpace:
 *         return "cudaErrorInvalidAddressSpace"
 *     if error == cudaErrorInvalidPc:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidPc"
 *     if error == cudaErrorLaunchFailure:
 */
  }

  /* "cuda/ccudart.pyx":428
 *     if error == cudaErrorInvalidPc:
 *         return "cudaErrorInvalidPc"
 *     if error == cudaErrorLaunchFailure:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchFailure"
 *     if error == cudaErrorCooperativeLaunchTooLarge:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorLaunchFailure) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":429
 *         return "cudaErrorInvalidPc"
 *     if error == cudaErrorLaunchFailure:
 *         return "cudaErrorLaunchFailure"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorCooperativeLaunchTooLarge:
 *         return "cudaErrorCooperativeLaunchTooLarge"
 */
    __pyx_r = ((char const *)"cudaErrorLaunchFailure");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":428
 *     if error == cudaErrorInvalidPc:
 *         return "cudaErrorInvalidPc"
 *     if error == cudaErrorLaunchFailure:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchFailure"
 *     if error == cudaErrorCooperativeLaunchTooLarge:
 */
  }

  /* "cuda/ccudart.pyx":430
 *     if error == cudaErrorLaunchFailure:
 *         return "cudaErrorLaunchFailure"
 *     if error == cudaErrorCooperativeLaunchTooLarge:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCooperativeLaunchTooLarge"
 *     if error == cudaErrorNotPermitted:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorCooperativeLaunchTooLarge) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":431
 *         return "cudaErrorLaunchFailure"
 *     if error == cudaErrorCooperativeLaunchTooLarge:
 *         return "cudaErrorCooperativeLaunchTooLarge"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorNotPermitted:
 *         return "cudaErrorNotPermitted"
 */
    __pyx_r = ((char const *)"cudaErrorCooperativeLaunchTooLarge");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":430
 *     if error == cudaErrorLaunchFailure:
 *         return "cudaErrorLaunchFailure"
 *     if error == cudaErrorCooperativeLaunchTooLarge:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCooperativeLaunchTooLarge"
 *     if error == cudaErrorNotPermitted:
 */
  }

  /* "cuda/ccudart.pyx":432
 *     if error == cudaErrorCooperativeLaunchTooLarge:
 *         return "cudaErrorCooperativeLaunchTooLarge"
 *     if error == cudaErrorNotPermitted:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotPermitted"
 *     if error == cudaErrorNotSupported:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorNotPermitted) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":433
 *         return "cudaErrorCooperativeLaunchTooLarge"
 *     if error == cudaErrorNotPermitted:
 *         return "cudaErrorNotPermitted"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorNotSupported:
 *         return "cudaErrorNotSupported"
 */
    __pyx_r = ((char const *)"cudaErrorNotPermitted");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":432
 *     if error == cudaErrorCooperativeLaunchTooLarge:
 *         return "cudaErrorCooperativeLaunchTooLarge"
 *     if error == cudaErrorNotPermitted:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotPermitted"
 *     if error == cudaErrorNotSupported:
 */
  }

  /* "cuda/ccudart.pyx":434
 *     if error == cudaErrorNotPermitted:
 *         return "cudaErrorNotPermitted"
 *     if error == cudaErrorNotSupported:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotSupported"
 *     if error == cudaErrorSystemNotReady:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorNotSupported) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":435
 *         return "cudaErrorNotPermitted"
 *     if error == cudaErrorNotSupported:
 *         return "cudaErrorNotSupported"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorSystemNotReady:
 *         return "cudaErrorSystemNotReady"
 */
    __pyx_r = ((char const *)"cudaErrorNotSupported");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":434
 *     if error == cudaErrorNotPermitted:
 *         return "cudaErrorNotPermitted"
 *     if error == cudaErrorNotSupported:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotSupported"
 *     if error == cudaErrorSystemNotReady:
 */
  }

  /* "cuda/ccudart.pyx":436
 *     if error == cudaErrorNotSupported:
 *         return "cudaErrorNotSupported"
 *     if error == cudaErrorSystemNotReady:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSystemNotReady"
 *     if error == cudaErrorSystemDriverMismatch:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorSystemNotReady) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":437
 *         return "cudaErrorNotSupported"
 *     if error == cudaErrorSystemNotReady:
 *         return "cudaErrorSystemNotReady"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorSystemDriverMismatch:
 *         return "cudaErrorSystemDriverMismatch"
 */
    __pyx_r = ((char const *)"cudaErrorSystemNotReady");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":436
 *     if error == cudaErrorNotSupported:
 *         return "cudaErrorNotSupported"
 *     if error == cudaErrorSystemNotReady:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSystemNotReady"
 *     if error == cudaErrorSystemDriverMismatch:
 */
  }

  /* "cuda/ccudart.pyx":438
 *     if error == cudaErrorSystemNotReady:
 *         return "cudaErrorSystemNotReady"
 *     if error == cudaErrorSystemDriverMismatch:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSystemDriverMismatch"
 *     if error == cudaErrorCompatNotSupportedOnDevice:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorSystemDriverMismatch) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":439
 *         return "cudaErrorSystemNotReady"
 *     if error == cudaErrorSystemDriverMismatch:
 *         return "cudaErrorSystemDriverMismatch"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorCompatNotSupportedOnDevice:
 *         return "cudaErrorCompatNotSupportedOnDevice"
 */
    __pyx_r = ((char const *)"cudaErrorSystemDriverMismatch");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":438
 *     if error == cudaErrorSystemNotReady:
 *         return "cudaErrorSystemNotReady"
 *     if error == cudaErrorSystemDriverMismatch:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSystemDriverMismatch"
 *     if error == cudaErrorCompatNotSupportedOnDevice:
 */
  }

  /* "cuda/ccudart.pyx":440
 *     if error == cudaErrorSystemDriverMismatch:
 *         return "cudaErrorSystemDriverMismatch"
 *     if error == cudaErrorCompatNotSupportedOnDevice:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCompatNotSupportedOnDevice"
 *     if error == cudaErrorMpsConnectionFailed:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorCompatNotSupportedOnDevice) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":441
 *         return "cudaErrorSystemDriverMismatch"
 *     if error == cudaErrorCompatNotSupportedOnDevice:
 *         return "cudaErrorCompatNotSupportedOnDevice"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMpsConnectionFailed:
 *         return "cudaErrorMpsConnectionFailed"
 */
    __pyx_r = ((char const *)"cudaErrorCompatNotSupportedOnDevice");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":440
 *     if error == cudaErrorSystemDriverMismatch:
 *         return "cudaErrorSystemDriverMismatch"
 *     if error == cudaErrorCompatNotSupportedOnDevice:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCompatNotSupportedOnDevice"
 *     if error == cudaErrorMpsConnectionFailed:
 */
  }

  /* "cuda/ccudart.pyx":442
 *     if error == cudaErrorCompatNotSupportedOnDevice:
 *         return "cudaErrorCompatNotSupportedOnDevice"
 *     if error == cudaErrorMpsConnectionFailed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsConnectionFailed"
 *     if error == cudaErrorMpsRpcFailure:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorMpsConnectionFailed) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":443
 *         return "cudaErrorCompatNotSupportedOnDevice"
 *     if error == cudaErrorMpsConnectionFailed:
 *         return "cudaErrorMpsConnectionFailed"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMpsRpcFailure:
 *         return "cudaErrorMpsRpcFailure"
 */
    __pyx_r = ((char const *)"cudaErrorMpsConnectionFailed");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":442
 *     if error == cudaErrorCompatNotSupportedOnDevice:
 *         return "cudaErrorCompatNotSupportedOnDevice"
 *     if error == cudaErrorMpsConnectionFailed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsConnectionFailed"
 *     if error == cudaErrorMpsRpcFailure:
 */
  }

  /* "cuda/ccudart.pyx":444
 *     if error == cudaErrorMpsConnectionFailed:
 *         return "cudaErrorMpsConnectionFailed"
 *     if error == cudaErrorMpsRpcFailure:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsRpcFailure"
 *     if error == cudaErrorMpsServerNotReady:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorMpsRpcFailure) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":445
 *         return "cudaErrorMpsConnectionFailed"
 *     if error == cudaErrorMpsRpcFailure:
 *         return "cudaErrorMpsRpcFailure"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMpsServerNotReady:
 *         return "cudaErrorMpsServerNotReady"
 */
    __pyx_r = ((char const *)"cudaErrorMpsRpcFailure");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":444
 *     if error == cudaErrorMpsConnectionFailed:
 *         return "cudaErrorMpsConnectionFailed"
 *     if error == cudaErrorMpsRpcFailure:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsRpcFailure"
 *     if error == cudaErrorMpsServerNotReady:
 */
  }

  /* "cuda/ccudart.pyx":446
 *     if error == cudaErrorMpsRpcFailure:
 *         return "cudaErrorMpsRpcFailure"
 *     if error == cudaErrorMpsServerNotReady:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsServerNotReady"
 *     if error == cudaErrorMpsMaxClientsReached:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorMpsServerNotReady) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":447
 *         return "cudaErrorMpsRpcFailure"
 *     if error == cudaErrorMpsServerNotReady:
 *         return "cudaErrorMpsServerNotReady"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMpsMaxClientsReached:
 *         return "cudaErrorMpsMaxClientsReached"
 */
    __pyx_r = ((char const *)"cudaErrorMpsServerNotReady");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":446
 *     if error == cudaErrorMpsRpcFailure:
 *         return "cudaErrorMpsRpcFailure"
 *     if error == cudaErrorMpsServerNotReady:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsServerNotReady"
 *     if error == cudaErrorMpsMaxClientsReached:
 */
  }

  /* "cuda/ccudart.pyx":448
 *     if error == cudaErrorMpsServerNotReady:
 *         return "cudaErrorMpsServerNotReady"
 *     if error == cudaErrorMpsMaxClientsReached:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsMaxClientsReached"
 *     if error == cudaErrorMpsMaxConnectionsReached:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorMpsMaxClientsReached) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":449
 *         return "cudaErrorMpsServerNotReady"
 *     if error == cudaErrorMpsMaxClientsReached:
 *         return "cudaErrorMpsMaxClientsReached"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMpsMaxConnectionsReached:
 *         return "cudaErrorMpsMaxConnectionsReached"
 */
    __pyx_r = ((char const *)"cudaErrorMpsMaxClientsReached");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":448
 *     if error == cudaErrorMpsServerNotReady:
 *         return "cudaErrorMpsServerNotReady"
 *     if error == cudaErrorMpsMaxClientsReached:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsMaxClientsReached"
 *     if error == cudaErrorMpsMaxConnectionsReached:
 */
  }

  /* "cuda/ccudart.pyx":450
 *     if error == cudaErrorMpsMaxClientsReached:
 *         return "cudaErrorMpsMaxClientsReached"
 *     if error == cudaErrorMpsMaxConnectionsReached:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsMaxConnectionsReached"
 *     if error == cudaErrorStreamCaptureUnsupported:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorMpsMaxConnectionsReached) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":451
 *         return "cudaErrorMpsMaxClientsReached"
 *     if error == cudaErrorMpsMaxConnectionsReached:
 *         return "cudaErrorMpsMaxConnectionsReached"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorStreamCaptureUnsupported:
 *         return "cudaErrorStreamCaptureUnsupported"
 */
    __pyx_r = ((char const *)"cudaErrorMpsMaxConnectionsReached");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":450
 *     if error == cudaErrorMpsMaxClientsReached:
 *         return "cudaErrorMpsMaxClientsReached"
 *     if error == cudaErrorMpsMaxConnectionsReached:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsMaxConnectionsReached"
 *     if error == cudaErrorStreamCaptureUnsupported:
 */
  }

  /* "cuda/ccudart.pyx":452
 *     if error == cudaErrorMpsMaxConnectionsReached:
 *         return "cudaErrorMpsMaxConnectionsReached"
 *     if error == cudaErrorStreamCaptureUnsupported:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureUnsupported"
 *     if error == cudaErrorStreamCaptureInvalidated:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorStreamCaptureUnsupported) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":453
 *         return "cudaErrorMpsMaxConnectionsReached"
 *     if error == cudaErrorStreamCaptureUnsupported:
 *         return "cudaErrorStreamCaptureUnsupported"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorStreamCaptureInvalidated:
 *         return "cudaErrorStreamCaptureInvalidated"
 */
    __pyx_r = ((char const *)"cudaErrorStreamCaptureUnsupported");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":452
 *     if error == cudaErrorMpsMaxConnectionsReached:
 *         return "cudaErrorMpsMaxConnectionsReached"
 *     if error == cudaErrorStreamCaptureUnsupported:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureUnsupported"
 *     if error == cudaErrorStreamCaptureInvalidated:
 */
  }

  /* "cuda/ccudart.pyx":454
 *     if error == cudaErrorStreamCaptureUnsupported:
 *         return "cudaErrorStreamCaptureUnsupported"
 *     if error == cudaErrorStreamCaptureInvalidated:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureInvalidated"
 *     if error == cudaErrorStreamCaptureMerge:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorStreamCaptureInvalidated) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":455
 *         return "cudaErrorStreamCaptureUnsupported"
 *     if error == cudaErrorStreamCaptureInvalidated:
 *         return "cudaErrorStreamCaptureInvalidated"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorStreamCaptureMerge:
 *         return "cudaErrorStreamCaptureMerge"
 */
    __pyx_r = ((char const *)"cudaErrorStreamCaptureInvalidated");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":454
 *     if error == cudaErrorStreamCaptureUnsupported:
 *         return "cudaErrorStreamCaptureUnsupported"
 *     if error == cudaErrorStreamCaptureInvalidated:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureInvalidated"
 *     if error == cudaErrorStreamCaptureMerge:
 */
  }

  /* "cuda/ccudart.pyx":456
 *     if error == cudaErrorStreamCaptureInvalidated:
 *         return "cudaErrorStreamCaptureInvalidated"
 *     if error == cudaErrorStreamCaptureMerge:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureMerge"
 *     if error == cudaErrorStreamCaptureUnmatched:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorStreamCaptureMerge) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":457
 *         return "cudaErrorStreamCaptureInvalidated"
 *     if error == cudaErrorStreamCaptureMerge:
 *         return "cudaErrorStreamCaptureMerge"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorStreamCaptureUnmatched:
 *         return "cudaErrorStreamCaptureUnmatched"
 */
    __pyx_r = ((char const *)"cudaErrorStreamCaptureMerge");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":456
 *     if error == cudaErrorStreamCaptureInvalidated:
 *         return "cudaErrorStreamCaptureInvalidated"
 *     if error == cudaErrorStreamCaptureMerge:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureMerge"
 *     if error == cudaErrorStreamCaptureUnmatched:
 */
  }

  /* "cuda/ccudart.pyx":458
 *     if error == cudaErrorStreamCaptureMerge:
 *         return "cudaErrorStreamCaptureMerge"
 *     if error == cudaErrorStreamCaptureUnmatched:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureUnmatched"
 *     if error == cudaErrorStreamCaptureUnjoined:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorStreamCaptureUnmatched) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":459
 *         return "cudaErrorStreamCaptureMerge"
 *     if error == cudaErrorStreamCaptureUnmatched:
 *         return "cudaErrorStreamCaptureUnmatched"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorStreamCaptureUnjoined:
 *         return "cudaErrorStreamCaptureUnjoined"
 */
    __pyx_r = ((char const *)"cudaErrorStreamCaptureUnmatched");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":458
 *     if error == cudaErrorStreamCaptureMerge:
 *         return "cudaErrorStreamCaptureMerge"
 *     if error == cudaErrorStreamCaptureUnmatched:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureUnmatched"
 *     if error == cudaErrorStreamCaptureUnjoined:
 */
  }

  /* "cuda/ccudart.pyx":460
 *     if error == cudaErrorStreamCaptureUnmatched:
 *         return "cudaErrorStreamCaptureUnmatched"
 *     if error == cudaErrorStreamCaptureUnjoined:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureUnjoined"
 *     if error == cudaErrorStreamCaptureIsolation:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorStreamCaptureUnjoined) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":461
 *         return "cudaErrorStreamCaptureUnmatched"
 *     if error == cudaErrorStreamCaptureUnjoined:
 *         return "cudaErrorStreamCaptureUnjoined"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorStreamCaptureIsolation:
 *         return "cudaErrorStreamCaptureIsolation"
 */
    __pyx_r = ((char const *)"cudaErrorStreamCaptureUnjoined");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":460
 *     if error == cudaErrorStreamCaptureUnmatched:
 *         return "cudaErrorStreamCaptureUnmatched"
 *     if error == cudaErrorStreamCaptureUnjoined:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureUnjoined"
 *     if error == cudaErrorStreamCaptureIsolation:
 */
  }

  /* "cuda/ccudart.pyx":462
 *     if error == cudaErrorStreamCaptureUnjoined:
 *         return "cudaErrorStreamCaptureUnjoined"
 *     if error == cudaErrorStreamCaptureIsolation:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureIsolation"
 *     if error == cudaErrorStreamCaptureImplicit:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorStreamCaptureIsolation) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":463
 *         return "cudaErrorStreamCaptureUnjoined"
 *     if error == cudaErrorStreamCaptureIsolation:
 *         return "cudaErrorStreamCaptureIsolation"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorStreamCaptureImplicit:
 *         return "cudaErrorStreamCaptureImplicit"
 */
    __pyx_r = ((char const *)"cudaErrorStreamCaptureIsolation");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":462
 *     if error == cudaErrorStreamCaptureUnjoined:
 *         return "cudaErrorStreamCaptureUnjoined"
 *     if error == cudaErrorStreamCaptureIsolation:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureIsolation"
 *     if error == cudaErrorStreamCaptureImplicit:
 */
  }

  /* "cuda/ccudart.pyx":464
 *     if error == cudaErrorStreamCaptureIsolation:
 *         return "cudaErrorStreamCaptureIsolation"
 *     if error == cudaErrorStreamCaptureImplicit:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureImplicit"
 *     if error == cudaErrorCapturedEvent:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorStreamCaptureImplicit) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":465
 *         return "cudaErrorStreamCaptureIsolation"
 *     if error == cudaErrorStreamCaptureImplicit:
 *         return "cudaErrorStreamCaptureImplicit"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorCapturedEvent:
 *         return "cudaErrorCapturedEvent"
 */
    __pyx_r = ((char const *)"cudaErrorStreamCaptureImplicit");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":464
 *     if error == cudaErrorStreamCaptureIsolation:
 *         return "cudaErrorStreamCaptureIsolation"
 *     if error == cudaErrorStreamCaptureImplicit:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureImplicit"
 *     if error == cudaErrorCapturedEvent:
 */
  }

  /* "cuda/ccudart.pyx":466
 *     if error == cudaErrorStreamCaptureImplicit:
 *         return "cudaErrorStreamCaptureImplicit"
 *     if error == cudaErrorCapturedEvent:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCapturedEvent"
 *     if error == cudaErrorStreamCaptureWrongThread:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorCapturedEvent) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":467
 *         return "cudaErrorStreamCaptureImplicit"
 *     if error == cudaErrorCapturedEvent:
 *         return "cudaErrorCapturedEvent"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorStreamCaptureWrongThread:
 *         return "cudaErrorStreamCaptureWrongThread"
 */
    __pyx_r = ((char const *)"cudaErrorCapturedEvent");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":466
 *     if error == cudaErrorStreamCaptureImplicit:
 *         return "cudaErrorStreamCaptureImplicit"
 *     if error == cudaErrorCapturedEvent:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCapturedEvent"
 *     if error == cudaErrorStreamCaptureWrongThread:
 */
  }

  /* "cuda/ccudart.pyx":468
 *     if error == cudaErrorCapturedEvent:
 *         return "cudaErrorCapturedEvent"
 *     if error == cudaErrorStreamCaptureWrongThread:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureWrongThread"
 *     if error == cudaErrorTimeout:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorStreamCaptureWrongThread) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":469
 *         return "cudaErrorCapturedEvent"
 *     if error == cudaErrorStreamCaptureWrongThread:
 *         return "cudaErrorStreamCaptureWrongThread"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorTimeout:
 *         return "cudaErrorTimeout"
 */
    __pyx_r = ((char const *)"cudaErrorStreamCaptureWrongThread");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":468
 *     if error == cudaErrorCapturedEvent:
 *         return "cudaErrorCapturedEvent"
 *     if error == cudaErrorStreamCaptureWrongThread:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureWrongThread"
 *     if error == cudaErrorTimeout:
 */
  }

  /* "cuda/ccudart.pyx":470
 *     if error == cudaErrorStreamCaptureWrongThread:
 *         return "cudaErrorStreamCaptureWrongThread"
 *     if error == cudaErrorTimeout:             # <<<<<<<<<<<<<<
 *         return "cudaErrorTimeout"
 *     if error == cudaErrorGraphExecUpdateFailure:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorTimeout) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":471
 *         return "cudaErrorStreamCaptureWrongThread"
 *     if error == cudaErrorTimeout:
 *         return "cudaErrorTimeout"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorGraphExecUpdateFailure:
 *         return "cudaErrorGraphExecUpdateFailure"
 */
    __pyx_r = ((char const *)"cudaErrorTimeout");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":470
 *     if error == cudaErrorStreamCaptureWrongThread:
 *         return "cudaErrorStreamCaptureWrongThread"
 *     if error == cudaErrorTimeout:             # <<<<<<<<<<<<<<
 *         return "cudaErrorTimeout"
 *     if error == cudaErrorGraphExecUpdateFailure:
 */
  }

  /* "cuda/ccudart.pyx":472
 *     if error == cudaErrorTimeout:
 *         return "cudaErrorTimeout"
 *     if error == cudaErrorGraphExecUpdateFailure:             # <<<<<<<<<<<<<<
 *         return "cudaErrorGraphExecUpdateFailure"
 *     if error == cudaErrorExternalDevice:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorGraphExecUpdateFailure) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":473
 *         return "cudaErrorTimeout"
 *     if error == cudaErrorGraphExecUpdateFailure:
 *         return "cudaErrorGraphExecUpdateFailure"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorExternalDevice:
 *         return "cudaErrorExternalDevice"
 */
    __pyx_r = ((char const *)"cudaErrorGraphExecUpdateFailure");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":472
 *     if error == cudaErrorTimeout:
 *         return "cudaErrorTimeout"
 *     if error == cudaErrorGraphExecUpdateFailure:             # <<<<<<<<<<<<<<
 *         return "cudaErrorGraphExecUpdateFailure"
 *     if error == cudaErrorExternalDevice:
 */
  }

  /* "cuda/ccudart.pyx":474
 *     if error == cudaErrorGraphExecUpdateFailure:
 *         return "cudaErrorGraphExecUpdateFailure"
 *     if error == cudaErrorExternalDevice:             # <<<<<<<<<<<<<<
 *         return "cudaErrorExternalDevice"
 *     if error == cudaErrorUnknown:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorExternalDevice) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":475
 *         return "cudaErrorGraphExecUpdateFailure"
 *     if error == cudaErrorExternalDevice:
 *         return "cudaErrorExternalDevice"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorUnknown:
 *         return "cudaErrorUnknown"
 */
    __pyx_r = ((char const *)"cudaErrorExternalDevice");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":474
 *     if error == cudaErrorGraphExecUpdateFailure:
 *         return "cudaErrorGraphExecUpdateFailure"
 *     if error == cudaErrorExternalDevice:             # <<<<<<<<<<<<<<
 *         return "cudaErrorExternalDevice"
 *     if error == cudaErrorUnknown:
 */
  }

  /* "cuda/ccudart.pyx":476
 *     if error == cudaErrorExternalDevice:
 *         return "cudaErrorExternalDevice"
 *     if error == cudaErrorUnknown:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnknown"
 *     if error == cudaErrorApiFailureBase:
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorUnknown) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":477
 *         return "cudaErrorExternalDevice"
 *     if error == cudaErrorUnknown:
 *         return "cudaErrorUnknown"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorApiFailureBase:
 *         return "cudaErrorApiFailureBase"
 */
    __pyx_r = ((char const *)"cudaErrorUnknown");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":476
 *     if error == cudaErrorExternalDevice:
 *         return "cudaErrorExternalDevice"
 *     if error == cudaErrorUnknown:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnknown"
 *     if error == cudaErrorApiFailureBase:
 */
  }

  /* "cuda/ccudart.pyx":478
 *     if error == cudaErrorUnknown:
 *         return "cudaErrorUnknown"
 *     if error == cudaErrorApiFailureBase:             # <<<<<<<<<<<<<<
 *         return "cudaErrorApiFailureBase"
 *     return pStr
 */
  __pyx_t_1 = ((__pyx_v_error == __pyx_e_4cuda_7ccudart_cudaErrorApiFailureBase) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":479
 *         return "cudaErrorUnknown"
 *     if error == cudaErrorApiFailureBase:
 *         return "cudaErrorApiFailureBase"             # <<<<<<<<<<<<<<
 *     return pStr
 * 
 */
    __pyx_r = ((char const *)"cudaErrorApiFailureBase");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":478
 *     if error == cudaErrorUnknown:
 *         return "cudaErrorUnknown"
 *     if error == cudaErrorApiFailureBase:             # <<<<<<<<<<<<<<
 *         return "cudaErrorApiFailureBase"
 *     return pStr
 */
  }

  /* "cuda/ccudart.pyx":480
 *     if error == cudaErrorApiFailureBase:
 *         return "cudaErrorApiFailureBase"
 *     return pStr             # <<<<<<<<<<<<<<
 * 
 * cdef const char* cudaGetErrorString(cudaError_t error) nogil except ?NULL:
 */
  __pyx_r = __pyx_v_pStr;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":232
 *     return _cudaPeekAtLastError()
 * 
 * cdef const char* cudaGetErrorName(cudaError_t error) nogil except ?NULL:             # <<<<<<<<<<<<<<
 *     cdef const char* pStr = "unrecognized error code"
 *     if error == cudaSuccess:
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGetErrorName", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":482
 *     return pStr
 * 
 * cdef const char* cudaGetErrorString(cudaError_t error) nogil except ?NULL:             # <<<<<<<<<<<<<<
 *     return _cudaGetErrorString(error)
 * 
 */

static char const *__pyx_f_4cuda_7ccudart_cudaGetErrorString(__pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_error) {
  char const *__pyx_r;
  __Pyx_TraceDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGetErrorString", __pyx_f[0], 482, 1, __PYX_ERR(0, 482, __pyx_L1_error));

  /* "cuda/ccudart.pyx":483
 * 
 * cdef const char* cudaGetErrorString(cudaError_t error) nogil except ?NULL:
 *     return _cudaGetErrorString(error)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetDeviceCount(int* count) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetErrorString(__pyx_v_error); if (unlikely(__pyx_t_1 == ((char const *)NULL) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 483, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":482
 *     return pStr
 * 
 * cdef const char* cudaGetErrorString(cudaError_t error) nogil except ?NULL:             # <<<<<<<<<<<<<<
 *     return _cudaGetErrorString(error)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGetErrorString", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":485
 *     return _cudaGetErrorString(error)
 * 
 * cdef cudaError_t cudaGetDeviceCount(int* count) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetDeviceCount(count)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGetDeviceCount(int *__pyx_v_count) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGetDeviceCount", __pyx_f[0], 485, 1, __PYX_ERR(0, 485, __pyx_L1_error));

  /* "cuda/ccudart.pyx":486
 * 
 * cdef cudaError_t cudaGetDeviceCount(int* count) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGetDeviceCount(count)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetDeviceProperties(cudaDeviceProp* prop, int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDeviceCount(__pyx_v_count); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 486, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":485
 *     return _cudaGetErrorString(error)
 * 
 * cdef cudaError_t cudaGetDeviceCount(int* count) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetDeviceCount(count)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGetDeviceCount", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":488
 *     return _cudaGetDeviceCount(count)
 * 
 * cdef cudaError_t cudaGetDeviceProperties(cudaDeviceProp* prop, int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetDeviceProperties(prop, device)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGetDeviceProperties(struct __pyx_t_4cuda_7ccudart_cudaDeviceProp *__pyx_v_prop, int __pyx_v_device) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGetDeviceProperties", __pyx_f[0], 488, 1, __PYX_ERR(0, 488, __pyx_L1_error));

  /* "cuda/ccudart.pyx":489
 * 
 * cdef cudaError_t cudaGetDeviceProperties(cudaDeviceProp* prop, int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGetDeviceProperties(prop, device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetAttribute(int* value, cudaDeviceAttr attr, int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDeviceProperties(__pyx_v_prop, __pyx_v_device); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 489, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":488
 *     return _cudaGetDeviceCount(count)
 * 
 * cdef cudaError_t cudaGetDeviceProperties(cudaDeviceProp* prop, int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetDeviceProperties(prop, device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGetDeviceProperties", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":491
 *     return _cudaGetDeviceProperties(prop, device)
 * 
 * cdef cudaError_t cudaDeviceGetAttribute(int* value, cudaDeviceAttr attr, int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetAttribute(value, attr, device)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetAttribute(int *__pyx_v_value, enum __pyx_t_4cuda_7ccudart_cudaDeviceAttr __pyx_v_attr, int __pyx_v_device) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceGetAttribute", __pyx_f[0], 491, 1, __PYX_ERR(0, 491, __pyx_L1_error));

  /* "cuda/ccudart.pyx":492
 * 
 * cdef cudaError_t cudaDeviceGetAttribute(int* value, cudaDeviceAttr attr, int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaDeviceGetAttribute(value, attr, device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetDefaultMemPool(cudaMemPool_t* memPool, int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetAttribute(__pyx_v_value, __pyx_v_attr, __pyx_v_device); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 492, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":491
 *     return _cudaGetDeviceProperties(prop, device)
 * 
 * cdef cudaError_t cudaDeviceGetAttribute(int* value, cudaDeviceAttr attr, int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetAttribute(value, attr, device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":494
 *     return _cudaDeviceGetAttribute(value, attr, device)
 * 
 * cdef cudaError_t cudaDeviceGetDefaultMemPool(cudaMemPool_t* memPool, int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetDefaultMemPool(__pyx_t_4cuda_7ccudart_cudaMemPool_t *__pyx_v_memPool, int __pyx_v_device) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceGetDefaultMemPool", __pyx_f[0], 494, 1, __PYX_ERR(0, 494, __pyx_L1_error));

  /* "cuda/ccudart.pyx":496
 * cdef cudaError_t cudaDeviceGetDefaultMemPool(cudaMemPool_t* memPool, int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":497
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGetDefaultMemPool(<ccuda.CUmemoryPool*>memPool, <ccuda.CUdevice>device)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":498
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuDeviceGetDefaultMemPool(<ccuda.CUmemoryPool*>memPool, <ccuda.CUdevice>device)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":497
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGetDefaultMemPool(<ccuda.CUmemoryPool*>memPool, <ccuda.CUdevice>device)
 */
  }

  /* "cuda/ccudart.pyx":499
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGetDefaultMemPool(<ccuda.CUmemoryPool*>memPool, <ccuda.CUdevice>device)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuDeviceGetDefaultMemPool(((__pyx_t_4cuda_5ccuda_CUmemoryPool *)__pyx_v_memPool), ((__pyx_t_4cuda_5ccuda_CUdevice)__pyx_v_device)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 499, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":500
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGetDefaultMemPool(<ccuda.CUmemoryPool*>memPool, <ccuda.CUdevice>device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":501
 *     err = <cudaError_t>ccuda._cuDeviceGetDefaultMemPool(<ccuda.CUmemoryPool*>memPool, <ccuda.CUdevice>device)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":500
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGetDefaultMemPool(<ccuda.CUmemoryPool*>memPool, <ccuda.CUdevice>device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":502
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceSetMemPool(int device, cudaMemPool_t memPool) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":494
 *     return _cudaDeviceGetAttribute(value, attr, device)
 * 
 * cdef cudaError_t cudaDeviceGetDefaultMemPool(cudaMemPool_t* memPool, int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetDefaultMemPool", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":504
 *     return err
 * 
 * cdef cudaError_t cudaDeviceSetMemPool(int device, cudaMemPool_t memPool) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceSetMemPool(int __pyx_v_device, __pyx_t_4cuda_7ccudart_cudaMemPool_t __pyx_v_memPool) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceSetMemPool", __pyx_f[0], 504, 1, __PYX_ERR(0, 504, __pyx_L1_error));

  /* "cuda/ccudart.pyx":506
 * cdef cudaError_t cudaDeviceSetMemPool(int device, cudaMemPool_t memPool) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":507
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceSetMemPool(<ccuda.CUdevice>device, <ccuda.CUmemoryPool>memPool)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":508
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuDeviceSetMemPool(<ccuda.CUdevice>device, <ccuda.CUmemoryPool>memPool)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":507
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceSetMemPool(<ccuda.CUdevice>device, <ccuda.CUmemoryPool>memPool)
 */
  }

  /* "cuda/ccudart.pyx":509
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceSetMemPool(<ccuda.CUdevice>device, <ccuda.CUmemoryPool>memPool)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuDeviceSetMemPool(((__pyx_t_4cuda_5ccuda_CUdevice)__pyx_v_device), ((__pyx_t_4cuda_5ccuda_CUmemoryPool)__pyx_v_memPool)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 509, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":510
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceSetMemPool(<ccuda.CUdevice>device, <ccuda.CUmemoryPool>memPool)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":511
 *     err = <cudaError_t>ccuda._cuDeviceSetMemPool(<ccuda.CUdevice>device, <ccuda.CUmemoryPool>memPool)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":510
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceSetMemPool(<ccuda.CUdevice>device, <ccuda.CUmemoryPool>memPool)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":512
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetMemPool(cudaMemPool_t* memPool, int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":504
 *     return err
 * 
 * cdef cudaError_t cudaDeviceSetMemPool(int device, cudaMemPool_t memPool) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceSetMemPool", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":514
 *     return err
 * 
 * cdef cudaError_t cudaDeviceGetMemPool(cudaMemPool_t* memPool, int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetMemPool(__pyx_t_4cuda_7ccudart_cudaMemPool_t *__pyx_v_memPool, int __pyx_v_device) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceGetMemPool", __pyx_f[0], 514, 1, __PYX_ERR(0, 514, __pyx_L1_error));

  /* "cuda/ccudart.pyx":516
 * cdef cudaError_t cudaDeviceGetMemPool(cudaMemPool_t* memPool, int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":517
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGetMemPool(<ccuda.CUmemoryPool*>memPool, <ccuda.CUdevice>device)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":518
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuDeviceGetMemPool(<ccuda.CUmemoryPool*>memPool, <ccuda.CUdevice>device)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":517
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGetMemPool(<ccuda.CUmemoryPool*>memPool, <ccuda.CUdevice>device)
 */
  }

  /* "cuda/ccudart.pyx":519
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGetMemPool(<ccuda.CUmemoryPool*>memPool, <ccuda.CUdevice>device)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuDeviceGetMemPool(((__pyx_t_4cuda_5ccuda_CUmemoryPool *)__pyx_v_memPool), ((__pyx_t_4cuda_5ccuda_CUdevice)__pyx_v_device)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 519, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":520
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGetMemPool(<ccuda.CUmemoryPool*>memPool, <ccuda.CUdevice>device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":521
 *     err = <cudaError_t>ccuda._cuDeviceGetMemPool(<ccuda.CUmemoryPool*>memPool, <ccuda.CUdevice>device)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":520
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGetMemPool(<ccuda.CUmemoryPool*>memPool, <ccuda.CUdevice>device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":522
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetNvSciSyncAttributes(void* nvSciSyncAttrList, int device, int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":514
 *     return err
 * 
 * cdef cudaError_t cudaDeviceGetMemPool(cudaMemPool_t* memPool, int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetMemPool", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":524
 *     return err
 * 
 * cdef cudaError_t cudaDeviceGetNvSciSyncAttributes(void* nvSciSyncAttrList, int device, int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetNvSciSyncAttributes(void *__pyx_v_nvSciSyncAttrList, int __pyx_v_device, int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceGetNvSciSyncAttributes", __pyx_f[0], 524, 1, __PYX_ERR(0, 524, __pyx_L1_error));

  /* "cuda/ccudart.pyx":526
 * cdef cudaError_t cudaDeviceGetNvSciSyncAttributes(void* nvSciSyncAttrList, int device, int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":527
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGetNvSciSyncAttributes(nvSciSyncAttrList, <ccuda.CUdevice>device, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":528
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuDeviceGetNvSciSyncAttributes(nvSciSyncAttrList, <ccuda.CUdevice>device, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":527
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGetNvSciSyncAttributes(nvSciSyncAttrList, <ccuda.CUdevice>device, flags)
 */
  }

  /* "cuda/ccudart.pyx":529
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGetNvSciSyncAttributes(nvSciSyncAttrList, <ccuda.CUdevice>device, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuDeviceGetNvSciSyncAttributes(__pyx_v_nvSciSyncAttrList, ((__pyx_t_4cuda_5ccuda_CUdevice)__pyx_v_device), __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 529, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":530
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGetNvSciSyncAttributes(nvSciSyncAttrList, <ccuda.CUdevice>device, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":531
 *     err = <cudaError_t>ccuda._cuDeviceGetNvSciSyncAttributes(nvSciSyncAttrList, <ccuda.CUdevice>device, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":530
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGetNvSciSyncAttributes(nvSciSyncAttrList, <ccuda.CUdevice>device, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":532
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetP2PAttribute(int* value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":524
 *     return err
 * 
 * cdef cudaError_t cudaDeviceGetNvSciSyncAttributes(void* nvSciSyncAttrList, int device, int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetNvSciSyncAttributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":534
 *     return err
 * 
 * cdef cudaError_t cudaDeviceGetP2PAttribute(int* value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetP2PAttribute(value, attr, srcDevice, dstDevice)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetP2PAttribute(int *__pyx_v_value, enum __pyx_t_4cuda_7ccudart_cudaDeviceP2PAttr __pyx_v_attr, int __pyx_v_srcDevice, int __pyx_v_dstDevice) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceGetP2PAttribute", __pyx_f[0], 534, 1, __PYX_ERR(0, 534, __pyx_L1_error));

  /* "cuda/ccudart.pyx":535
 * 
 * cdef cudaError_t cudaDeviceGetP2PAttribute(int* value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaDeviceGetP2PAttribute(value, attr, srcDevice, dstDevice)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaChooseDevice(int* device, const cudaDeviceProp* prop) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetP2PAttribute(__pyx_v_value, __pyx_v_attr, __pyx_v_srcDevice, __pyx_v_dstDevice); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 535, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":534
 *     return err
 * 
 * cdef cudaError_t cudaDeviceGetP2PAttribute(int* value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetP2PAttribute(value, attr, srcDevice, dstDevice)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetP2PAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":537
 *     return _cudaDeviceGetP2PAttribute(value, attr, srcDevice, dstDevice)
 * 
 * cdef cudaError_t cudaChooseDevice(int* device, const cudaDeviceProp* prop) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaChooseDevice(device, prop)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaChooseDevice(int *__pyx_v_device, struct __pyx_t_4cuda_7ccudart_cudaDeviceProp const *__pyx_v_prop) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaChooseDevice", __pyx_f[0], 537, 1, __PYX_ERR(0, 537, __pyx_L1_error));

  /* "cuda/ccudart.pyx":538
 * 
 * cdef cudaError_t cudaChooseDevice(int* device, const cudaDeviceProp* prop) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaChooseDevice(device, prop)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaSetDevice(int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaChooseDevice(__pyx_v_device, __pyx_v_prop); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 538, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":537
 *     return _cudaDeviceGetP2PAttribute(value, attr, srcDevice, dstDevice)
 * 
 * cdef cudaError_t cudaChooseDevice(int* device, const cudaDeviceProp* prop) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaChooseDevice(device, prop)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaChooseDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":540
 *     return _cudaChooseDevice(device, prop)
 * 
 * cdef cudaError_t cudaSetDevice(int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaSetDevice(device)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaSetDevice(int __pyx_v_device) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaSetDevice", __pyx_f[0], 540, 1, __PYX_ERR(0, 540, __pyx_L1_error));

  /* "cuda/ccudart.pyx":541
 * 
 * cdef cudaError_t cudaSetDevice(int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaSetDevice(device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetDevice(int* device) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSetDevice(__pyx_v_device); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 541, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":540
 *     return _cudaChooseDevice(device, prop)
 * 
 * cdef cudaError_t cudaSetDevice(int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaSetDevice(device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaSetDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":543
 *     return _cudaSetDevice(device)
 * 
 * cdef cudaError_t cudaGetDevice(int* device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetDevice(device)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGetDevice(int *__pyx_v_device) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGetDevice", __pyx_f[0], 543, 1, __PYX_ERR(0, 543, __pyx_L1_error));

  /* "cuda/ccudart.pyx":544
 * 
 * cdef cudaError_t cudaGetDevice(int* device) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGetDevice(device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaSetDeviceFlags(unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDevice(__pyx_v_device); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 544, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":543
 *     return _cudaSetDevice(device)
 * 
 * cdef cudaError_t cudaGetDevice(int* device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetDevice(device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGetDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":546
 *     return _cudaGetDevice(device)
 * 
 * cdef cudaError_t cudaSetDeviceFlags(unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaSetDeviceFlags(flags)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaSetDeviceFlags(unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaSetDeviceFlags", __pyx_f[0], 546, 1, __PYX_ERR(0, 546, __pyx_L1_error));

  /* "cuda/ccudart.pyx":547
 * 
 * cdef cudaError_t cudaSetDeviceFlags(unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaSetDeviceFlags(flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetDeviceFlags(unsigned int* flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSetDeviceFlags(__pyx_v_flags); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 547, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":546
 *     return _cudaGetDevice(device)
 * 
 * cdef cudaError_t cudaSetDeviceFlags(unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaSetDeviceFlags(flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaSetDeviceFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":549
 *     return _cudaSetDeviceFlags(flags)
 * 
 * cdef cudaError_t cudaGetDeviceFlags(unsigned int* flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetDeviceFlags(flags)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGetDeviceFlags(unsigned int *__pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGetDeviceFlags", __pyx_f[0], 549, 1, __PYX_ERR(0, 549, __pyx_L1_error));

  /* "cuda/ccudart.pyx":550
 * 
 * cdef cudaError_t cudaGetDeviceFlags(unsigned int* flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGetDeviceFlags(flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamCreate(cudaStream_t* pStream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDeviceFlags(__pyx_v_flags); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 550, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":549
 *     return _cudaSetDeviceFlags(flags)
 * 
 * cdef cudaError_t cudaGetDeviceFlags(unsigned int* flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetDeviceFlags(flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGetDeviceFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":552
 *     return _cudaGetDeviceFlags(flags)
 * 
 * cdef cudaError_t cudaStreamCreate(cudaStream_t* pStream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaStreamCreate(pStream)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamCreate(__pyx_t_4cuda_7ccudart_cudaStream_t *__pyx_v_pStream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaStreamCreate", __pyx_f[0], 552, 1, __PYX_ERR(0, 552, __pyx_L1_error));

  /* "cuda/ccudart.pyx":553
 * 
 * cdef cudaError_t cudaStreamCreate(cudaStream_t* pStream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaStreamCreate(pStream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamCreateWithFlags(cudaStream_t* pStream, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamCreate(__pyx_v_pStream); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 553, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":552
 *     return _cudaGetDeviceFlags(flags)
 * 
 * cdef cudaError_t cudaStreamCreate(cudaStream_t* pStream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaStreamCreate(pStream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaStreamCreate", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":555
 *     return _cudaStreamCreate(pStream)
 * 
 * cdef cudaError_t cudaStreamCreateWithFlags(cudaStream_t* pStream, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamCreateWithFlags(__pyx_t_4cuda_7ccudart_cudaStream_t *__pyx_v_pStream, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaStreamCreateWithFlags", __pyx_f[0], 555, 1, __PYX_ERR(0, 555, __pyx_L1_error));

  /* "cuda/ccudart.pyx":557
 * cdef cudaError_t cudaStreamCreateWithFlags(cudaStream_t* pStream, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":558
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamCreate(<ccuda.CUstream*>pStream, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":559
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuStreamCreate(<ccuda.CUstream*>pStream, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":558
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamCreate(<ccuda.CUstream*>pStream, flags)
 */
  }

  /* "cuda/ccudart.pyx":560
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamCreate(<ccuda.CUstream*>pStream, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuStreamCreate(((__pyx_t_4cuda_5ccuda_CUstream *)__pyx_v_pStream), __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 560, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":561
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamCreate(<ccuda.CUstream*>pStream, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":562
 *     err = <cudaError_t>ccuda._cuStreamCreate(<ccuda.CUstream*>pStream, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":561
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamCreate(<ccuda.CUstream*>pStream, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":563
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamCreateWithPriority(cudaStream_t* pStream, unsigned int flags, int priority) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":555
 *     return _cudaStreamCreate(pStream)
 * 
 * cdef cudaError_t cudaStreamCreateWithFlags(cudaStream_t* pStream, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaStreamCreateWithFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":565
 *     return err
 * 
 * cdef cudaError_t cudaStreamCreateWithPriority(cudaStream_t* pStream, unsigned int flags, int priority) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamCreateWithPriority(__pyx_t_4cuda_7ccudart_cudaStream_t *__pyx_v_pStream, unsigned int __pyx_v_flags, int __pyx_v_priority) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaStreamCreateWithPriority", __pyx_f[0], 565, 1, __PYX_ERR(0, 565, __pyx_L1_error));

  /* "cuda/ccudart.pyx":567
 * cdef cudaError_t cudaStreamCreateWithPriority(cudaStream_t* pStream, unsigned int flags, int priority) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":568
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamCreateWithPriority(<ccuda.CUstream*>pStream, flags, priority)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":569
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuStreamCreateWithPriority(<ccuda.CUstream*>pStream, flags, priority)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":568
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamCreateWithPriority(<ccuda.CUstream*>pStream, flags, priority)
 */
  }

  /* "cuda/ccudart.pyx":570
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamCreateWithPriority(<ccuda.CUstream*>pStream, flags, priority)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuStreamCreateWithPriority(((__pyx_t_4cuda_5ccuda_CUstream *)__pyx_v_pStream), __pyx_v_flags, __pyx_v_priority); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 570, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":571
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamCreateWithPriority(<ccuda.CUstream*>pStream, flags, priority)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":572
 *     err = <cudaError_t>ccuda._cuStreamCreateWithPriority(<ccuda.CUstream*>pStream, flags, priority)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":571
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamCreateWithPriority(<ccuda.CUstream*>pStream, flags, priority)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":573
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int* priority) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":565
 *     return err
 * 
 * cdef cudaError_t cudaStreamCreateWithPriority(cudaStream_t* pStream, unsigned int flags, int priority) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaStreamCreateWithPriority", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":575
 *     return err
 * 
 * cdef cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int* priority) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamGetPriority(__pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_hStream, int *__pyx_v_priority) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaStreamGetPriority", __pyx_f[0], 575, 1, __PYX_ERR(0, 575, __pyx_L1_error));

  /* "cuda/ccudart.pyx":577
 * cdef cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int* priority) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":578
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamGetPriority(<ccuda.CUstream>hStream, priority)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":579
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuStreamGetPriority(<ccuda.CUstream>hStream, priority)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":578
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamGetPriority(<ccuda.CUstream>hStream, priority)
 */
  }

  /* "cuda/ccudart.pyx":580
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamGetPriority(<ccuda.CUstream>hStream, priority)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuStreamGetPriority(((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_hStream), __pyx_v_priority); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 580, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":581
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamGetPriority(<ccuda.CUstream>hStream, priority)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":582
 *     err = <cudaError_t>ccuda._cuStreamGetPriority(<ccuda.CUstream>hStream, priority)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":581
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamGetPriority(<ccuda.CUstream>hStream, priority)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":583
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned int* flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":575
 *     return err
 * 
 * cdef cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int* priority) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaStreamGetPriority", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":585
 *     return err
 * 
 * cdef cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned int* flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamGetFlags(__pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_hStream, unsigned int *__pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaStreamGetFlags", __pyx_f[0], 585, 1, __PYX_ERR(0, 585, __pyx_L1_error));

  /* "cuda/ccudart.pyx":587
 * cdef cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned int* flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":588
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamGetFlags(<ccuda.CUstream>hStream, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":589
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuStreamGetFlags(<ccuda.CUstream>hStream, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":588
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamGetFlags(<ccuda.CUstream>hStream, flags)
 */
  }

  /* "cuda/ccudart.pyx":590
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamGetFlags(<ccuda.CUstream>hStream, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuStreamGetFlags(((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_hStream), __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 590, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":591
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamGetFlags(<ccuda.CUstream>hStream, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":592
 *     err = <cudaError_t>ccuda._cuStreamGetFlags(<ccuda.CUstream>hStream, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":591
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamGetFlags(<ccuda.CUstream>hStream, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":593
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaCtxResetPersistingL2Cache() nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":585
 *     return err
 * 
 * cdef cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned int* flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaStreamGetFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":595
 *     return err
 * 
 * cdef cudaError_t cudaCtxResetPersistingL2Cache() nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaCtxResetPersistingL2Cache(void) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaCtxResetPersistingL2Cache", __pyx_f[0], 595, 1, __PYX_ERR(0, 595, __pyx_L1_error));

  /* "cuda/ccudart.pyx":597
 * cdef cudaError_t cudaCtxResetPersistingL2Cache() nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":598
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxResetPersistingL2Cache()
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":599
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuCtxResetPersistingL2Cache()
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":598
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxResetPersistingL2Cache()
 */
  }

  /* "cuda/ccudart.pyx":600
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxResetPersistingL2Cache()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuCtxResetPersistingL2Cache(); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 600, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":601
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxResetPersistingL2Cache()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":602
 *     err = <cudaError_t>ccuda._cuCtxResetPersistingL2Cache()
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":601
 *         return err
 *     err = <cudaError_t>ccuda._cuCtxResetPersistingL2Cache()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":603
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":595
 *     return err
 * 
 * cdef cudaError_t cudaCtxResetPersistingL2Cache() nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaCtxResetPersistingL2Cache", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":605
 *     return err
 * 
 * cdef cudaError_t cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamCopyAttributes(__pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_dst, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_src) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaStreamCopyAttributes", __pyx_f[0], 605, 1, __PYX_ERR(0, 605, __pyx_L1_error));

  /* "cuda/ccudart.pyx":607
 * cdef cudaError_t cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":608
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamCopyAttributes(<ccuda.CUstream>dst, <ccuda.CUstream>src)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":609
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuStreamCopyAttributes(<ccuda.CUstream>dst, <ccuda.CUstream>src)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":608
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamCopyAttributes(<ccuda.CUstream>dst, <ccuda.CUstream>src)
 */
  }

  /* "cuda/ccudart.pyx":610
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamCopyAttributes(<ccuda.CUstream>dst, <ccuda.CUstream>src)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuStreamCopyAttributes(((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_dst), ((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_src)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 610, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":611
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamCopyAttributes(<ccuda.CUstream>dst, <ccuda.CUstream>src)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":612
 *     err = <cudaError_t>ccuda._cuStreamCopyAttributes(<ccuda.CUstream>dst, <ccuda.CUstream>src)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":611
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamCopyAttributes(<ccuda.CUstream>dst, <ccuda.CUstream>src)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":613
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamGetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, cudaStreamAttrValue* value_out) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":605
 *     return err
 * 
 * cdef cudaError_t cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaStreamCopyAttributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":615
 *     return err
 * 
 * cdef cudaError_t cudaStreamGetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, cudaStreamAttrValue* value_out) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamGetAttribute(__pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_hStream, enum __pyx_t_4cuda_7ccudart_cudaStreamAttrID __pyx_v_attr, union __pyx_t_4cuda_7ccudart_cudaStreamAttrValue *__pyx_v_value_out) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaStreamGetAttribute", __pyx_f[0], 615, 1, __PYX_ERR(0, 615, __pyx_L1_error));

  /* "cuda/ccudart.pyx":617
 * cdef cudaError_t cudaStreamGetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, cudaStreamAttrValue* value_out) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":618
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamGetAttribute(<ccuda.CUstream>hStream, <ccuda.CUstreamAttrID>attr, <ccuda.CUstreamAttrValue*>value_out)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":619
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuStreamGetAttribute(<ccuda.CUstream>hStream, <ccuda.CUstreamAttrID>attr, <ccuda.CUstreamAttrValue*>value_out)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":618
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamGetAttribute(<ccuda.CUstream>hStream, <ccuda.CUstreamAttrID>attr, <ccuda.CUstreamAttrValue*>value_out)
 */
  }

  /* "cuda/ccudart.pyx":620
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamGetAttribute(<ccuda.CUstream>hStream, <ccuda.CUstreamAttrID>attr, <ccuda.CUstreamAttrValue*>value_out)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuStreamGetAttribute(((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_hStream), ((__pyx_t_4cuda_5ccuda_CUstreamAttrID)__pyx_v_attr), ((__pyx_t_4cuda_5ccuda_CUstreamAttrValue *)__pyx_v_value_out)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 620, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":621
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamGetAttribute(<ccuda.CUstream>hStream, <ccuda.CUstreamAttrID>attr, <ccuda.CUstreamAttrValue*>value_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":622
 *     err = <cudaError_t>ccuda._cuStreamGetAttribute(<ccuda.CUstream>hStream, <ccuda.CUstreamAttrID>attr, <ccuda.CUstreamAttrValue*>value_out)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":621
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamGetAttribute(<ccuda.CUstream>hStream, <ccuda.CUstreamAttrID>attr, <ccuda.CUstreamAttrValue*>value_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":623
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamSetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, const cudaStreamAttrValue* value) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":615
 *     return err
 * 
 * cdef cudaError_t cudaStreamGetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, cudaStreamAttrValue* value_out) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaStreamGetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":625
 *     return err
 * 
 * cdef cudaError_t cudaStreamSetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, const cudaStreamAttrValue* value) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamSetAttribute(__pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_hStream, enum __pyx_t_4cuda_7ccudart_cudaStreamAttrID __pyx_v_attr, union __pyx_t_4cuda_7ccudart_cudaStreamAttrValue const *__pyx_v_value) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaStreamSetAttribute", __pyx_f[0], 625, 1, __PYX_ERR(0, 625, __pyx_L1_error));

  /* "cuda/ccudart.pyx":627
 * cdef cudaError_t cudaStreamSetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, const cudaStreamAttrValue* value) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":628
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamSetAttribute(<ccuda.CUstream>hStream, <ccuda.CUstreamAttrID>attr, <ccuda.CUstreamAttrValue*>value)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":629
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuStreamSetAttribute(<ccuda.CUstream>hStream, <ccuda.CUstreamAttrID>attr, <ccuda.CUstreamAttrValue*>value)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":628
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamSetAttribute(<ccuda.CUstream>hStream, <ccuda.CUstreamAttrID>attr, <ccuda.CUstreamAttrValue*>value)
 */
  }

  /* "cuda/ccudart.pyx":630
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamSetAttribute(<ccuda.CUstream>hStream, <ccuda.CUstreamAttrID>attr, <ccuda.CUstreamAttrValue*>value)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuStreamSetAttribute(((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_hStream), ((__pyx_t_4cuda_5ccuda_CUstreamAttrID)__pyx_v_attr), ((__pyx_t_4cuda_5ccuda_CUstreamAttrValue *)__pyx_v_value)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 630, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":631
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamSetAttribute(<ccuda.CUstream>hStream, <ccuda.CUstreamAttrID>attr, <ccuda.CUstreamAttrValue*>value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":632
 *     err = <cudaError_t>ccuda._cuStreamSetAttribute(<ccuda.CUstream>hStream, <ccuda.CUstreamAttrID>attr, <ccuda.CUstreamAttrValue*>value)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":631
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamSetAttribute(<ccuda.CUstream>hStream, <ccuda.CUstreamAttrID>attr, <ccuda.CUstreamAttrValue*>value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":633
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamDestroy(cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":625
 *     return err
 * 
 * cdef cudaError_t cudaStreamSetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, const cudaStreamAttrValue* value) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaStreamSetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":635
 *     return err
 * 
 * cdef cudaError_t cudaStreamDestroy(cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamDestroy(__pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaStreamDestroy", __pyx_f[0], 635, 1, __PYX_ERR(0, 635, __pyx_L1_error));

  /* "cuda/ccudart.pyx":637
 * cdef cudaError_t cudaStreamDestroy(cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":638
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamDestroy_v2(<ccuda.CUstream>stream)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":639
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuStreamDestroy_v2(<ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":638
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamDestroy_v2(<ccuda.CUstream>stream)
 */
  }

  /* "cuda/ccudart.pyx":640
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamDestroy_v2(<ccuda.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuStreamDestroy_v2(((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 640, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":641
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamDestroy_v2(<ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":642
 *     err = <cudaError_t>ccuda._cuStreamDestroy_v2(<ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":641
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamDestroy_v2(<ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":643
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":635
 *     return err
 * 
 * cdef cudaError_t cudaStreamDestroy(cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaStreamDestroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":645
 *     return err
 * 
 * cdef cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamWaitEvent(__pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream, __pyx_t_4cuda_7ccudart_cudaEvent_t __pyx_v_event, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaStreamWaitEvent", __pyx_f[0], 645, 1, __PYX_ERR(0, 645, __pyx_L1_error));

  /* "cuda/ccudart.pyx":647
 * cdef cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":648
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamWaitEvent(<ccuda.CUstream>stream, <ccuda.CUevent>event, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":649
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuStreamWaitEvent(<ccuda.CUstream>stream, <ccuda.CUevent>event, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":648
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamWaitEvent(<ccuda.CUstream>stream, <ccuda.CUevent>event, flags)
 */
  }

  /* "cuda/ccudart.pyx":650
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamWaitEvent(<ccuda.CUstream>stream, <ccuda.CUevent>event, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuStreamWaitEvent(((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_stream), ((__pyx_t_4cuda_5ccuda_CUevent)__pyx_v_event), __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 650, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":651
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamWaitEvent(<ccuda.CUstream>stream, <ccuda.CUevent>event, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":652
 *     err = <cudaError_t>ccuda._cuStreamWaitEvent(<ccuda.CUstream>stream, <ccuda.CUevent>event, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":651
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamWaitEvent(<ccuda.CUstream>stream, <ccuda.CUevent>event, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":653
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":645
 *     return err
 * 
 * cdef cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaStreamWaitEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":655
 *     return err
 * 
 * cdef cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaStreamAddCallback(stream, callback, userData, flags)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamAddCallback(__pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream, __pyx_t_4cuda_7ccudart_cudaStreamCallback_t __pyx_v_callback, void *__pyx_v_userData, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaStreamAddCallback", __pyx_f[0], 655, 1, __PYX_ERR(0, 655, __pyx_L1_error));

  /* "cuda/ccudart.pyx":656
 * 
 * cdef cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaStreamAddCallback(stream, callback, userData, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamSynchronize(cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamAddCallback(__pyx_v_stream, __pyx_v_callback, __pyx_v_userData, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 656, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":655
 *     return err
 * 
 * cdef cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaStreamAddCallback(stream, callback, userData, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaStreamAddCallback", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":658
 *     return _cudaStreamAddCallback(stream, callback, userData, flags)
 * 
 * cdef cudaError_t cudaStreamSynchronize(cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamSynchronize(__pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaStreamSynchronize", __pyx_f[0], 658, 1, __PYX_ERR(0, 658, __pyx_L1_error));

  /* "cuda/ccudart.pyx":660
 * cdef cudaError_t cudaStreamSynchronize(cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":661
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamSynchronize(<ccuda.CUstream>stream)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":662
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuStreamSynchronize(<ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":661
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamSynchronize(<ccuda.CUstream>stream)
 */
  }

  /* "cuda/ccudart.pyx":663
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamSynchronize(<ccuda.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuStreamSynchronize(((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 663, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":664
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamSynchronize(<ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":665
 *     err = <cudaError_t>ccuda._cuStreamSynchronize(<ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":664
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamSynchronize(<ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":666
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamQuery(cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":658
 *     return _cudaStreamAddCallback(stream, callback, userData, flags)
 * 
 * cdef cudaError_t cudaStreamSynchronize(cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaStreamSynchronize", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":668
 *     return err
 * 
 * cdef cudaError_t cudaStreamQuery(cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamQuery(__pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaStreamQuery", __pyx_f[0], 668, 1, __PYX_ERR(0, 668, __pyx_L1_error));

  /* "cuda/ccudart.pyx":670
 * cdef cudaError_t cudaStreamQuery(cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":671
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamQuery(<ccuda.CUstream>stream)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":672
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuStreamQuery(<ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":671
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamQuery(<ccuda.CUstream>stream)
 */
  }

  /* "cuda/ccudart.pyx":673
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamQuery(<ccuda.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuStreamQuery(((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 673, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":674
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamQuery(<ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":675
 *     err = <cudaError_t>ccuda._cuStreamQuery(<ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":674
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamQuery(<ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":676
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void* devPtr, size_t length, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":668
 *     return err
 * 
 * cdef cudaError_t cudaStreamQuery(cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaStreamQuery", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":678
 *     return err
 * 
 * cdef cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void* devPtr, size_t length, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamAttachMemAsync(__pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream, void *__pyx_v_devPtr, size_t __pyx_v_length, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaStreamAttachMemAsync", __pyx_f[0], 678, 1, __PYX_ERR(0, 678, __pyx_L1_error));

  /* "cuda/ccudart.pyx":680
 * cdef cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void* devPtr, size_t length, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":681
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamAttachMemAsync(<ccuda.CUstream>stream, <ccuda.CUdeviceptr>devPtr, length, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":682
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuStreamAttachMemAsync(<ccuda.CUstream>stream, <ccuda.CUdeviceptr>devPtr, length, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":681
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamAttachMemAsync(<ccuda.CUstream>stream, <ccuda.CUdeviceptr>devPtr, length, flags)
 */
  }

  /* "cuda/ccudart.pyx":683
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamAttachMemAsync(<ccuda.CUstream>stream, <ccuda.CUdeviceptr>devPtr, length, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuStreamAttachMemAsync(((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_stream), ((__pyx_t_4cuda_5ccuda_CUdeviceptr)__pyx_v_devPtr), __pyx_v_length, __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 683, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":684
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamAttachMemAsync(<ccuda.CUstream>stream, <ccuda.CUdeviceptr>devPtr, length, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":685
 *     err = <cudaError_t>ccuda._cuStreamAttachMemAsync(<ccuda.CUstream>stream, <ccuda.CUdeviceptr>devPtr, length, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":684
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamAttachMemAsync(<ccuda.CUstream>stream, <ccuda.CUdeviceptr>devPtr, length, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":686
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":678
 *     return err
 * 
 * cdef cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void* devPtr, size_t length, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaStreamAttachMemAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":688
 *     return err
 * 
 * cdef cudaError_t cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamBeginCapture(__pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream, enum __pyx_t_4cuda_7ccudart_cudaStreamCaptureMode __pyx_v_mode) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaStreamBeginCapture", __pyx_f[0], 688, 1, __PYX_ERR(0, 688, __pyx_L1_error));

  /* "cuda/ccudart.pyx":690
 * cdef cudaError_t cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":691
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamBeginCapture_v2(<ccuda.CUstream>stream, <ccuda.CUstreamCaptureMode>mode)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":692
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuStreamBeginCapture_v2(<ccuda.CUstream>stream, <ccuda.CUstreamCaptureMode>mode)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":691
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamBeginCapture_v2(<ccuda.CUstream>stream, <ccuda.CUstreamCaptureMode>mode)
 */
  }

  /* "cuda/ccudart.pyx":693
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamBeginCapture_v2(<ccuda.CUstream>stream, <ccuda.CUstreamCaptureMode>mode)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuStreamBeginCapture_v2(((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_stream), ((__pyx_t_4cuda_5ccuda_CUstreamCaptureMode)__pyx_v_mode)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 693, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":694
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamBeginCapture_v2(<ccuda.CUstream>stream, <ccuda.CUstreamCaptureMode>mode)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":695
 *     err = <cudaError_t>ccuda._cuStreamBeginCapture_v2(<ccuda.CUstream>stream, <ccuda.CUstreamCaptureMode>mode)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":694
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamBeginCapture_v2(<ccuda.CUstream>stream, <ccuda.CUstreamCaptureMode>mode)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":696
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode* mode) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":688
 *     return err
 * 
 * cdef cudaError_t cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaStreamBeginCapture", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":698
 *     return err
 * 
 * cdef cudaError_t cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode* mode) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaThreadExchangeStreamCaptureMode(enum __pyx_t_4cuda_7ccudart_cudaStreamCaptureMode *__pyx_v_mode) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaThreadExchangeStreamCaptureMode", __pyx_f[0], 698, 1, __PYX_ERR(0, 698, __pyx_L1_error));

  /* "cuda/ccudart.pyx":700
 * cdef cudaError_t cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode* mode) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":701
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuThreadExchangeStreamCaptureMode(<ccuda.CUstreamCaptureMode*>mode)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":702
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuThreadExchangeStreamCaptureMode(<ccuda.CUstreamCaptureMode*>mode)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":701
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuThreadExchangeStreamCaptureMode(<ccuda.CUstreamCaptureMode*>mode)
 */
  }

  /* "cuda/ccudart.pyx":703
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuThreadExchangeStreamCaptureMode(<ccuda.CUstreamCaptureMode*>mode)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuThreadExchangeStreamCaptureMode(((__pyx_t_4cuda_5ccuda_CUstreamCaptureMode *)__pyx_v_mode)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 703, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":704
 *         return err
 *     err = <cudaError_t>ccuda._cuThreadExchangeStreamCaptureMode(<ccuda.CUstreamCaptureMode*>mode)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":705
 *     err = <cudaError_t>ccuda._cuThreadExchangeStreamCaptureMode(<ccuda.CUstreamCaptureMode*>mode)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":704
 *         return err
 *     err = <cudaError_t>ccuda._cuThreadExchangeStreamCaptureMode(<ccuda.CUstreamCaptureMode*>mode)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":706
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t* pGraph) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":698
 *     return err
 * 
 * cdef cudaError_t cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode* mode) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaThreadExchangeStreamCaptureMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":708
 *     return err
 * 
 * cdef cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t* pGraph) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamEndCapture(__pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream, __pyx_t_4cuda_7ccudart_cudaGraph_t *__pyx_v_pGraph) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaStreamEndCapture", __pyx_f[0], 708, 1, __PYX_ERR(0, 708, __pyx_L1_error));

  /* "cuda/ccudart.pyx":710
 * cdef cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t* pGraph) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":711
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamEndCapture(<ccuda.CUstream>stream, <ccuda.CUgraph*>pGraph)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":712
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuStreamEndCapture(<ccuda.CUstream>stream, <ccuda.CUgraph*>pGraph)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":711
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamEndCapture(<ccuda.CUstream>stream, <ccuda.CUgraph*>pGraph)
 */
  }

  /* "cuda/ccudart.pyx":713
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamEndCapture(<ccuda.CUstream>stream, <ccuda.CUgraph*>pGraph)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuStreamEndCapture(((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_stream), ((__pyx_t_4cuda_5ccuda_CUgraph *)__pyx_v_pGraph)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 713, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":714
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamEndCapture(<ccuda.CUstream>stream, <ccuda.CUgraph*>pGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":715
 *     err = <cudaError_t>ccuda._cuStreamEndCapture(<ccuda.CUstream>stream, <ccuda.CUgraph*>pGraph)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":714
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamEndCapture(<ccuda.CUstream>stream, <ccuda.CUgraph*>pGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":716
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus* pCaptureStatus) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":708
 *     return err
 * 
 * cdef cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t* pGraph) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaStreamEndCapture", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":718
 *     return err
 * 
 * cdef cudaError_t cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus* pCaptureStatus) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamIsCapturing(__pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream, enum __pyx_t_4cuda_7ccudart_cudaStreamCaptureStatus *__pyx_v_pCaptureStatus) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaStreamIsCapturing", __pyx_f[0], 718, 1, __PYX_ERR(0, 718, __pyx_L1_error));

  /* "cuda/ccudart.pyx":720
 * cdef cudaError_t cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus* pCaptureStatus) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":721
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamIsCapturing(<ccuda.CUstream>stream, <ccuda.CUstreamCaptureStatus*>pCaptureStatus)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":722
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuStreamIsCapturing(<ccuda.CUstream>stream, <ccuda.CUstreamCaptureStatus*>pCaptureStatus)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":721
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamIsCapturing(<ccuda.CUstream>stream, <ccuda.CUstreamCaptureStatus*>pCaptureStatus)
 */
  }

  /* "cuda/ccudart.pyx":723
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamIsCapturing(<ccuda.CUstream>stream, <ccuda.CUstreamCaptureStatus*>pCaptureStatus)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuStreamIsCapturing(((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_stream), ((__pyx_t_4cuda_5ccuda_CUstreamCaptureStatus *)__pyx_v_pCaptureStatus)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 723, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":724
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamIsCapturing(<ccuda.CUstream>stream, <ccuda.CUstreamCaptureStatus*>pCaptureStatus)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":725
 *     err = <cudaError_t>ccuda._cuStreamIsCapturing(<ccuda.CUstream>stream, <ccuda.CUstreamCaptureStatus*>pCaptureStatus)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":724
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamIsCapturing(<ccuda.CUstream>stream, <ccuda.CUstreamCaptureStatus*>pCaptureStatus)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":726
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamGetCaptureInfo(cudaStream_t stream, cudaStreamCaptureStatus* pCaptureStatus, unsigned long long* pId) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":718
 *     return err
 * 
 * cdef cudaError_t cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus* pCaptureStatus) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaStreamIsCapturing", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":728
 *     return err
 * 
 * cdef cudaError_t cudaStreamGetCaptureInfo(cudaStream_t stream, cudaStreamCaptureStatus* pCaptureStatus, unsigned long long* pId) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaStreamGetCaptureInfo(stream, pCaptureStatus, pId)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamGetCaptureInfo(__pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream, enum __pyx_t_4cuda_7ccudart_cudaStreamCaptureStatus *__pyx_v_pCaptureStatus, unsigned PY_LONG_LONG *__pyx_v_pId) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaStreamGetCaptureInfo", __pyx_f[0], 728, 1, __PYX_ERR(0, 728, __pyx_L1_error));

  /* "cuda/ccudart.pyx":729
 * 
 * cdef cudaError_t cudaStreamGetCaptureInfo(cudaStream_t stream, cudaStreamCaptureStatus* pCaptureStatus, unsigned long long* pId) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaStreamGetCaptureInfo(stream, pCaptureStatus, pId)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamGetCaptureInfo_v2(cudaStream_t stream, cudaStreamCaptureStatus* captureStatus_out, unsigned long long* id_out, cudaGraph_t* graph_out, const cudaGraphNode_t** dependencies_out, size_t* numDependencies_out) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetCaptureInfo(__pyx_v_stream, __pyx_v_pCaptureStatus, __pyx_v_pId); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 729, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":728
 *     return err
 * 
 * cdef cudaError_t cudaStreamGetCaptureInfo(cudaStream_t stream, cudaStreamCaptureStatus* pCaptureStatus, unsigned long long* pId) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaStreamGetCaptureInfo(stream, pCaptureStatus, pId)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaStreamGetCaptureInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":731
 *     return _cudaStreamGetCaptureInfo(stream, pCaptureStatus, pId)
 * 
 * cdef cudaError_t cudaStreamGetCaptureInfo_v2(cudaStream_t stream, cudaStreamCaptureStatus* captureStatus_out, unsigned long long* id_out, cudaGraph_t* graph_out, const cudaGraphNode_t** dependencies_out, size_t* numDependencies_out) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaStreamGetCaptureInfo_v2(stream, captureStatus_out, id_out, graph_out, dependencies_out, numDependencies_out)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamGetCaptureInfo_v2(__pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream, enum __pyx_t_4cuda_7ccudart_cudaStreamCaptureStatus *__pyx_v_captureStatus_out, unsigned PY_LONG_LONG *__pyx_v_id_out, __pyx_t_4cuda_7ccudart_cudaGraph_t *__pyx_v_graph_out, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const **__pyx_v_dependencies_out, size_t *__pyx_v_numDependencies_out) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaStreamGetCaptureInfo_v2", __pyx_f[0], 731, 1, __PYX_ERR(0, 731, __pyx_L1_error));

  /* "cuda/ccudart.pyx":732
 * 
 * cdef cudaError_t cudaStreamGetCaptureInfo_v2(cudaStream_t stream, cudaStreamCaptureStatus* captureStatus_out, unsigned long long* id_out, cudaGraph_t* graph_out, const cudaGraphNode_t** dependencies_out, size_t* numDependencies_out) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaStreamGetCaptureInfo_v2(stream, captureStatus_out, id_out, graph_out, dependencies_out, numDependencies_out)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t* dependencies, size_t numDependencies, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetCaptureInfo_v2(__pyx_v_stream, __pyx_v_captureStatus_out, __pyx_v_id_out, __pyx_v_graph_out, __pyx_v_dependencies_out, __pyx_v_numDependencies_out); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 732, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":731
 *     return _cudaStreamGetCaptureInfo(stream, pCaptureStatus, pId)
 * 
 * cdef cudaError_t cudaStreamGetCaptureInfo_v2(cudaStream_t stream, cudaStreamCaptureStatus* captureStatus_out, unsigned long long* id_out, cudaGraph_t* graph_out, const cudaGraphNode_t** dependencies_out, size_t* numDependencies_out) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaStreamGetCaptureInfo_v2(stream, captureStatus_out, id_out, graph_out, dependencies_out, numDependencies_out)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaStreamGetCaptureInfo_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":734
 *     return _cudaStreamGetCaptureInfo_v2(stream, captureStatus_out, id_out, graph_out, dependencies_out, numDependencies_out)
 * 
 * cdef cudaError_t cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t* dependencies, size_t numDependencies, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamUpdateCaptureDependencies(__pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream, __pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_dependencies, size_t __pyx_v_numDependencies, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaStreamUpdateCaptureDependencies", __pyx_f[0], 734, 1, __PYX_ERR(0, 734, __pyx_L1_error));

  /* "cuda/ccudart.pyx":736
 * cdef cudaError_t cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t* dependencies, size_t numDependencies, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":737
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamUpdateCaptureDependencies(<ccuda.CUstream>stream, <ccuda.CUgraphNode*>dependencies, numDependencies, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":738
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuStreamUpdateCaptureDependencies(<ccuda.CUstream>stream, <ccuda.CUgraphNode*>dependencies, numDependencies, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":737
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamUpdateCaptureDependencies(<ccuda.CUstream>stream, <ccuda.CUgraphNode*>dependencies, numDependencies, flags)
 */
  }

  /* "cuda/ccudart.pyx":739
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamUpdateCaptureDependencies(<ccuda.CUstream>stream, <ccuda.CUgraphNode*>dependencies, numDependencies, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuStreamUpdateCaptureDependencies(((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_stream), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_dependencies), __pyx_v_numDependencies, __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 739, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":740
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamUpdateCaptureDependencies(<ccuda.CUstream>stream, <ccuda.CUgraphNode*>dependencies, numDependencies, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":741
 *     err = <cudaError_t>ccuda._cuStreamUpdateCaptureDependencies(<ccuda.CUstream>stream, <ccuda.CUgraphNode*>dependencies, numDependencies, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":740
 *         return err
 *     err = <cudaError_t>ccuda._cuStreamUpdateCaptureDependencies(<ccuda.CUstream>stream, <ccuda.CUgraphNode*>dependencies, numDependencies, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":742
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEventCreate(cudaEvent_t* event) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":734
 *     return _cudaStreamGetCaptureInfo_v2(stream, captureStatus_out, id_out, graph_out, dependencies_out, numDependencies_out)
 * 
 * cdef cudaError_t cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t* dependencies, size_t numDependencies, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaStreamUpdateCaptureDependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":744
 *     return err
 * 
 * cdef cudaError_t cudaEventCreate(cudaEvent_t* event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaEventCreate(event)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaEventCreate(__pyx_t_4cuda_7ccudart_cudaEvent_t *__pyx_v_event) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaEventCreate", __pyx_f[0], 744, 1, __PYX_ERR(0, 744, __pyx_L1_error));

  /* "cuda/ccudart.pyx":745
 * 
 * cdef cudaError_t cudaEventCreate(cudaEvent_t* event) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaEventCreate(event)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEventCreateWithFlags(cudaEvent_t* event, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventCreate(__pyx_v_event); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 745, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":744
 *     return err
 * 
 * cdef cudaError_t cudaEventCreate(cudaEvent_t* event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaEventCreate(event)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaEventCreate", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":747
 *     return _cudaEventCreate(event)
 * 
 * cdef cudaError_t cudaEventCreateWithFlags(cudaEvent_t* event, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaEventCreateWithFlags(__pyx_t_4cuda_7ccudart_cudaEvent_t *__pyx_v_event, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaEventCreateWithFlags", __pyx_f[0], 747, 1, __PYX_ERR(0, 747, __pyx_L1_error));

  /* "cuda/ccudart.pyx":749
 * cdef cudaError_t cudaEventCreateWithFlags(cudaEvent_t* event, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":750
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEventCreate(<ccuda.CUevent*>event, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":751
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuEventCreate(<ccuda.CUevent*>event, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":750
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEventCreate(<ccuda.CUevent*>event, flags)
 */
  }

  /* "cuda/ccudart.pyx":752
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuEventCreate(<ccuda.CUevent*>event, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuEventCreate(((__pyx_t_4cuda_5ccuda_CUevent *)__pyx_v_event), __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 752, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":753
 *         return err
 *     err = <cudaError_t>ccuda._cuEventCreate(<ccuda.CUevent*>event, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":754
 *     err = <cudaError_t>ccuda._cuEventCreate(<ccuda.CUevent*>event, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":753
 *         return err
 *     err = <cudaError_t>ccuda._cuEventCreate(<ccuda.CUevent*>event, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":755
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":747
 *     return _cudaEventCreate(event)
 * 
 * cdef cudaError_t cudaEventCreateWithFlags(cudaEvent_t* event, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaEventCreateWithFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":757
 *     return err
 * 
 * cdef cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaEventRecord(__pyx_t_4cuda_7ccudart_cudaEvent_t __pyx_v_event, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaEventRecord", __pyx_f[0], 757, 1, __PYX_ERR(0, 757, __pyx_L1_error));

  /* "cuda/ccudart.pyx":759
 * cdef cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":760
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEventRecord(<ccuda.CUevent>event, <ccuda.CUstream>stream)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":761
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuEventRecord(<ccuda.CUevent>event, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":760
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEventRecord(<ccuda.CUevent>event, <ccuda.CUstream>stream)
 */
  }

  /* "cuda/ccudart.pyx":762
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuEventRecord(<ccuda.CUevent>event, <ccuda.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuEventRecord(((__pyx_t_4cuda_5ccuda_CUevent)__pyx_v_event), ((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 762, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":763
 *         return err
 *     err = <cudaError_t>ccuda._cuEventRecord(<ccuda.CUevent>event, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":764
 *     err = <cudaError_t>ccuda._cuEventRecord(<ccuda.CUevent>event, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":763
 *         return err
 *     err = <cudaError_t>ccuda._cuEventRecord(<ccuda.CUevent>event, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":765
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":757
 *     return err
 * 
 * cdef cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaEventRecord", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":767
 *     return err
 * 
 * cdef cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaEventRecordWithFlags(__pyx_t_4cuda_7ccudart_cudaEvent_t __pyx_v_event, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaEventRecordWithFlags", __pyx_f[0], 767, 1, __PYX_ERR(0, 767, __pyx_L1_error));

  /* "cuda/ccudart.pyx":769
 * cdef cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":770
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEventRecordWithFlags(<ccuda.CUevent>event, <ccuda.CUstream>stream, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":771
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuEventRecordWithFlags(<ccuda.CUevent>event, <ccuda.CUstream>stream, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":770
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEventRecordWithFlags(<ccuda.CUevent>event, <ccuda.CUstream>stream, flags)
 */
  }

  /* "cuda/ccudart.pyx":772
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuEventRecordWithFlags(<ccuda.CUevent>event, <ccuda.CUstream>stream, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuEventRecordWithFlags(((__pyx_t_4cuda_5ccuda_CUevent)__pyx_v_event), ((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_stream), __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 772, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":773
 *         return err
 *     err = <cudaError_t>ccuda._cuEventRecordWithFlags(<ccuda.CUevent>event, <ccuda.CUstream>stream, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":774
 *     err = <cudaError_t>ccuda._cuEventRecordWithFlags(<ccuda.CUevent>event, <ccuda.CUstream>stream, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":773
 *         return err
 *     err = <cudaError_t>ccuda._cuEventRecordWithFlags(<ccuda.CUevent>event, <ccuda.CUstream>stream, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":775
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEventQuery(cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":767
 *     return err
 * 
 * cdef cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaEventRecordWithFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":777
 *     return err
 * 
 * cdef cudaError_t cudaEventQuery(cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaEventQuery(event)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaEventQuery(__pyx_t_4cuda_7ccudart_cudaEvent_t __pyx_v_event) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaEventQuery", __pyx_f[0], 777, 1, __PYX_ERR(0, 777, __pyx_L1_error));

  /* "cuda/ccudart.pyx":778
 * 
 * cdef cudaError_t cudaEventQuery(cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaEventQuery(event)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEventSynchronize(cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventQuery(__pyx_v_event); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 778, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":777
 *     return err
 * 
 * cdef cudaError_t cudaEventQuery(cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaEventQuery(event)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaEventQuery", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":780
 *     return _cudaEventQuery(event)
 * 
 * cdef cudaError_t cudaEventSynchronize(cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaEventSynchronize(__pyx_t_4cuda_7ccudart_cudaEvent_t __pyx_v_event) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaEventSynchronize", __pyx_f[0], 780, 1, __PYX_ERR(0, 780, __pyx_L1_error));

  /* "cuda/ccudart.pyx":782
 * cdef cudaError_t cudaEventSynchronize(cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":783
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEventSynchronize(<ccuda.CUevent>event)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":784
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuEventSynchronize(<ccuda.CUevent>event)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":783
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEventSynchronize(<ccuda.CUevent>event)
 */
  }

  /* "cuda/ccudart.pyx":785
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuEventSynchronize(<ccuda.CUevent>event)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuEventSynchronize(((__pyx_t_4cuda_5ccuda_CUevent)__pyx_v_event)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 785, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":786
 *         return err
 *     err = <cudaError_t>ccuda._cuEventSynchronize(<ccuda.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":787
 *     err = <cudaError_t>ccuda._cuEventSynchronize(<ccuda.CUevent>event)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":786
 *         return err
 *     err = <cudaError_t>ccuda._cuEventSynchronize(<ccuda.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":788
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEventDestroy(cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":780
 *     return _cudaEventQuery(event)
 * 
 * cdef cudaError_t cudaEventSynchronize(cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaEventSynchronize", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":790
 *     return err
 * 
 * cdef cudaError_t cudaEventDestroy(cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaEventDestroy(__pyx_t_4cuda_7ccudart_cudaEvent_t __pyx_v_event) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaEventDestroy", __pyx_f[0], 790, 1, __PYX_ERR(0, 790, __pyx_L1_error));

  /* "cuda/ccudart.pyx":792
 * cdef cudaError_t cudaEventDestroy(cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":793
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEventDestroy_v2(<ccuda.CUevent>event)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":794
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuEventDestroy_v2(<ccuda.CUevent>event)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":793
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEventDestroy_v2(<ccuda.CUevent>event)
 */
  }

  /* "cuda/ccudart.pyx":795
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuEventDestroy_v2(<ccuda.CUevent>event)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuEventDestroy_v2(((__pyx_t_4cuda_5ccuda_CUevent)__pyx_v_event)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 795, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":796
 *         return err
 *     err = <cudaError_t>ccuda._cuEventDestroy_v2(<ccuda.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":797
 *     err = <cudaError_t>ccuda._cuEventDestroy_v2(<ccuda.CUevent>event)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":796
 *         return err
 *     err = <cudaError_t>ccuda._cuEventDestroy_v2(<ccuda.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":798
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEventElapsedTime(float* ms, cudaEvent_t start, cudaEvent_t end) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":790
 *     return err
 * 
 * cdef cudaError_t cudaEventDestroy(cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaEventDestroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":800
 *     return err
 * 
 * cdef cudaError_t cudaEventElapsedTime(float* ms, cudaEvent_t start, cudaEvent_t end) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaEventElapsedTime(float *__pyx_v_ms, __pyx_t_4cuda_7ccudart_cudaEvent_t __pyx_v_start, __pyx_t_4cuda_7ccudart_cudaEvent_t __pyx_v_end) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaEventElapsedTime", __pyx_f[0], 800, 1, __PYX_ERR(0, 800, __pyx_L1_error));

  /* "cuda/ccudart.pyx":802
 * cdef cudaError_t cudaEventElapsedTime(float* ms, cudaEvent_t start, cudaEvent_t end) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":803
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEventElapsedTime(ms, <ccuda.CUevent>start, <ccuda.CUevent>end)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":804
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuEventElapsedTime(ms, <ccuda.CUevent>start, <ccuda.CUevent>end)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":803
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEventElapsedTime(ms, <ccuda.CUevent>start, <ccuda.CUevent>end)
 */
  }

  /* "cuda/ccudart.pyx":805
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuEventElapsedTime(ms, <ccuda.CUevent>start, <ccuda.CUevent>end)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuEventElapsedTime(__pyx_v_ms, ((__pyx_t_4cuda_5ccuda_CUevent)__pyx_v_start), ((__pyx_t_4cuda_5ccuda_CUevent)__pyx_v_end)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 805, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":806
 *         return err
 *     err = <cudaError_t>ccuda._cuEventElapsedTime(ms, <ccuda.CUevent>start, <ccuda.CUevent>end)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":807
 *     err = <cudaError_t>ccuda._cuEventElapsedTime(ms, <ccuda.CUevent>start, <ccuda.CUevent>end)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":806
 *         return err
 *     err = <cudaError_t>ccuda._cuEventElapsedTime(ms, <ccuda.CUevent>start, <ccuda.CUevent>end)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":808
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaImportExternalMemory(cudaExternalMemory_t* extMem_out, const cudaExternalMemoryHandleDesc* memHandleDesc) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":800
 *     return err
 * 
 * cdef cudaError_t cudaEventElapsedTime(float* ms, cudaEvent_t start, cudaEvent_t end) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaEventElapsedTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":810
 *     return err
 * 
 * cdef cudaError_t cudaImportExternalMemory(cudaExternalMemory_t* extMem_out, const cudaExternalMemoryHandleDesc* memHandleDesc) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaImportExternalMemory(extMem_out, memHandleDesc)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaImportExternalMemory(__pyx_t_4cuda_7ccudart_cudaExternalMemory_t *__pyx_v_extMem_out, struct __pyx_t_4cuda_7ccudart_cudaExternalMemoryHandleDesc const *__pyx_v_memHandleDesc) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaImportExternalMemory", __pyx_f[0], 810, 1, __PYX_ERR(0, 810, __pyx_L1_error));

  /* "cuda/ccudart.pyx":811
 * 
 * cdef cudaError_t cudaImportExternalMemory(cudaExternalMemory_t* extMem_out, const cudaExternalMemoryHandleDesc* memHandleDesc) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaImportExternalMemory(extMem_out, memHandleDesc)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaExternalMemoryGetMappedBuffer(void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaImportExternalMemory(__pyx_v_extMem_out, __pyx_v_memHandleDesc); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 811, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":810
 *     return err
 * 
 * cdef cudaError_t cudaImportExternalMemory(cudaExternalMemory_t* extMem_out, const cudaExternalMemoryHandleDesc* memHandleDesc) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaImportExternalMemory(extMem_out, memHandleDesc)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaImportExternalMemory", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":813
 *     return _cudaImportExternalMemory(extMem_out, memHandleDesc)
 * 
 * cdef cudaError_t cudaExternalMemoryGetMappedBuffer(void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaExternalMemoryGetMappedBuffer(devPtr, extMem, bufferDesc)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaExternalMemoryGetMappedBuffer(void **__pyx_v_devPtr, __pyx_t_4cuda_7ccudart_cudaExternalMemory_t __pyx_v_extMem, struct __pyx_t_4cuda_7ccudart_cudaExternalMemoryBufferDesc const *__pyx_v_bufferDesc) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaExternalMemoryGetMappedBuffer", __pyx_f[0], 813, 1, __PYX_ERR(0, 813, __pyx_L1_error));

  /* "cuda/ccudart.pyx":814
 * 
 * cdef cudaError_t cudaExternalMemoryGetMappedBuffer(void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaExternalMemoryGetMappedBuffer(devPtr, extMem, bufferDesc)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t* mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc* mipmapDesc) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaExternalMemoryGetMappedBuffer(__pyx_v_devPtr, __pyx_v_extMem, __pyx_v_bufferDesc); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 814, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":813
 *     return _cudaImportExternalMemory(extMem_out, memHandleDesc)
 * 
 * cdef cudaError_t cudaExternalMemoryGetMappedBuffer(void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaExternalMemoryGetMappedBuffer(devPtr, extMem, bufferDesc)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaExternalMemoryGetMappedBuffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":816
 *     return _cudaExternalMemoryGetMappedBuffer(devPtr, extMem, bufferDesc)
 * 
 * cdef cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t* mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc* mipmapDesc) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaExternalMemoryGetMappedMipmappedArray(mipmap, extMem, mipmapDesc)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaExternalMemoryGetMappedMipmappedArray(__pyx_t_4cuda_7ccudart_cudaMipmappedArray_t *__pyx_v_mipmap, __pyx_t_4cuda_7ccudart_cudaExternalMemory_t __pyx_v_extMem, struct __pyx_t_4cuda_7ccudart_cudaExternalMemoryMipmappedArrayDesc const *__pyx_v_mipmapDesc) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaExternalMemoryGetMappedMipmappedArray", __pyx_f[0], 816, 1, __PYX_ERR(0, 816, __pyx_L1_error));

  /* "cuda/ccudart.pyx":817
 * 
 * cdef cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t* mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc* mipmapDesc) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaExternalMemoryGetMappedMipmappedArray(mipmap, extMem, mipmapDesc)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaExternalMemoryGetMappedMipmappedArray(__pyx_v_mipmap, __pyx_v_extMem, __pyx_v_mipmapDesc); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 817, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":816
 *     return _cudaExternalMemoryGetMappedBuffer(devPtr, extMem, bufferDesc)
 * 
 * cdef cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t* mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc* mipmapDesc) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaExternalMemoryGetMappedMipmappedArray(mipmap, extMem, mipmapDesc)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaExternalMemoryGetMappedMipmappedArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":819
 *     return _cudaExternalMemoryGetMappedMipmappedArray(mipmap, extMem, mipmapDesc)
 * 
 * cdef cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDestroyExternalMemory(__pyx_t_4cuda_7ccudart_cudaExternalMemory_t __pyx_v_extMem) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDestroyExternalMemory", __pyx_f[0], 819, 1, __PYX_ERR(0, 819, __pyx_L1_error));

  /* "cuda/ccudart.pyx":821
 * cdef cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":822
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuDestroyExternalMemory(<ccuda.CUexternalMemory>extMem)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":823
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuDestroyExternalMemory(<ccuda.CUexternalMemory>extMem)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":822
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuDestroyExternalMemory(<ccuda.CUexternalMemory>extMem)
 */
  }

  /* "cuda/ccudart.pyx":824
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuDestroyExternalMemory(<ccuda.CUexternalMemory>extMem)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuDestroyExternalMemory(((__pyx_t_4cuda_5ccuda_CUexternalMemory)__pyx_v_extMem)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 824, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":825
 *         return err
 *     err = <cudaError_t>ccuda._cuDestroyExternalMemory(<ccuda.CUexternalMemory>extMem)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":826
 *     err = <cudaError_t>ccuda._cuDestroyExternalMemory(<ccuda.CUexternalMemory>extMem)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":825
 *         return err
 *     err = <cudaError_t>ccuda._cuDestroyExternalMemory(<ccuda.CUexternalMemory>extMem)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":827
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t* extSem_out, const cudaExternalSemaphoreHandleDesc* semHandleDesc) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":819
 *     return _cudaExternalMemoryGetMappedMipmappedArray(mipmap, extMem, mipmapDesc)
 * 
 * cdef cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDestroyExternalMemory", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":829
 *     return err
 * 
 * cdef cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t* extSem_out, const cudaExternalSemaphoreHandleDesc* semHandleDesc) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaImportExternalSemaphore(extSem_out, semHandleDesc)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaImportExternalSemaphore(__pyx_t_4cuda_7ccudart_cudaExternalSemaphore_t *__pyx_v_extSem_out, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreHandleDesc const *__pyx_v_semHandleDesc) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaImportExternalSemaphore", __pyx_f[0], 829, 1, __PYX_ERR(0, 829, __pyx_L1_error));

  /* "cuda/ccudart.pyx":830
 * 
 * cdef cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t* extSem_out, const cudaExternalSemaphoreHandleDesc* semHandleDesc) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaImportExternalSemaphore(extSem_out, semHandleDesc)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaSignalExternalSemaphoresAsync(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreSignalParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaImportExternalSemaphore(__pyx_v_extSem_out, __pyx_v_semHandleDesc); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 830, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":829
 *     return err
 * 
 * cdef cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t* extSem_out, const cudaExternalSemaphoreHandleDesc* semHandleDesc) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaImportExternalSemaphore(extSem_out, semHandleDesc)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaImportExternalSemaphore", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":832
 *     return _cudaImportExternalSemaphore(extSem_out, semHandleDesc)
 * 
 * cdef cudaError_t cudaSignalExternalSemaphoresAsync(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreSignalParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaSignalExternalSemaphoresAsync(extSemArray, paramsArray, numExtSems, stream)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaSignalExternalSemaphoresAsync(__pyx_t_4cuda_7ccudart_cudaExternalSemaphore_t const *__pyx_v_extSemArray, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreSignalParams const *__pyx_v_paramsArray, unsigned int __pyx_v_numExtSems, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaSignalExternalSemaphoresAsync", __pyx_f[0], 832, 1, __PYX_ERR(0, 832, __pyx_L1_error));

  /* "cuda/ccudart.pyx":833
 * 
 * cdef cudaError_t cudaSignalExternalSemaphoresAsync(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreSignalParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaSignalExternalSemaphoresAsync(extSemArray, paramsArray, numExtSems, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaWaitExternalSemaphoresAsync(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreWaitParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSignalExternalSemaphoresAsync(__pyx_v_extSemArray, __pyx_v_paramsArray, __pyx_v_numExtSems, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 833, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":832
 *     return _cudaImportExternalSemaphore(extSem_out, semHandleDesc)
 * 
 * cdef cudaError_t cudaSignalExternalSemaphoresAsync(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreSignalParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaSignalExternalSemaphoresAsync(extSemArray, paramsArray, numExtSems, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaSignalExternalSemaphoresAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":835
 *     return _cudaSignalExternalSemaphoresAsync(extSemArray, paramsArray, numExtSems, stream)
 * 
 * cdef cudaError_t cudaWaitExternalSemaphoresAsync(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreWaitParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaWaitExternalSemaphoresAsync(extSemArray, paramsArray, numExtSems, stream)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaWaitExternalSemaphoresAsync(__pyx_t_4cuda_7ccudart_cudaExternalSemaphore_t const *__pyx_v_extSemArray, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreWaitParams const *__pyx_v_paramsArray, unsigned int __pyx_v_numExtSems, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaWaitExternalSemaphoresAsync", __pyx_f[0], 835, 1, __PYX_ERR(0, 835, __pyx_L1_error));

  /* "cuda/ccudart.pyx":836
 * 
 * cdef cudaError_t cudaWaitExternalSemaphoresAsync(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreWaitParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaWaitExternalSemaphoresAsync(extSemArray, paramsArray, numExtSems, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaWaitExternalSemaphoresAsync(__pyx_v_extSemArray, __pyx_v_paramsArray, __pyx_v_numExtSems, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 836, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":835
 *     return _cudaSignalExternalSemaphoresAsync(extSemArray, paramsArray, numExtSems, stream)
 * 
 * cdef cudaError_t cudaWaitExternalSemaphoresAsync(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreWaitParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaWaitExternalSemaphoresAsync(extSemArray, paramsArray, numExtSems, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaWaitExternalSemaphoresAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":838
 *     return _cudaWaitExternalSemaphoresAsync(extSemArray, paramsArray, numExtSems, stream)
 * 
 * cdef cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDestroyExternalSemaphore(__pyx_t_4cuda_7ccudart_cudaExternalSemaphore_t __pyx_v_extSem) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDestroyExternalSemaphore", __pyx_f[0], 838, 1, __PYX_ERR(0, 838, __pyx_L1_error));

  /* "cuda/ccudart.pyx":840
 * cdef cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":841
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuDestroyExternalSemaphore(<ccuda.CUexternalSemaphore>extSem)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":842
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuDestroyExternalSemaphore(<ccuda.CUexternalSemaphore>extSem)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":841
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuDestroyExternalSemaphore(<ccuda.CUexternalSemaphore>extSem)
 */
  }

  /* "cuda/ccudart.pyx":843
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuDestroyExternalSemaphore(<ccuda.CUexternalSemaphore>extSem)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuDestroyExternalSemaphore(((__pyx_t_4cuda_5ccuda_CUexternalSemaphore)__pyx_v_extSem)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 843, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":844
 *         return err
 *     err = <cudaError_t>ccuda._cuDestroyExternalSemaphore(<ccuda.CUexternalSemaphore>extSem)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":845
 *     err = <cudaError_t>ccuda._cuDestroyExternalSemaphore(<ccuda.CUexternalSemaphore>extSem)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":844
 *         return err
 *     err = <cudaError_t>ccuda._cuDestroyExternalSemaphore(<ccuda.CUexternalSemaphore>extSem)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":846
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaFuncSetCacheConfig(const void* func, cudaFuncCache cacheConfig) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":838
 *     return _cudaWaitExternalSemaphoresAsync(extSemArray, paramsArray, numExtSems, stream)
 * 
 * cdef cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDestroyExternalSemaphore", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":848
 *     return err
 * 
 * cdef cudaError_t cudaFuncSetCacheConfig(const void* func, cudaFuncCache cacheConfig) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaFuncSetCacheConfig(void const *__pyx_v_func, enum __pyx_t_4cuda_7ccudart_cudaFuncCache __pyx_v_cacheConfig) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaFuncSetCacheConfig", __pyx_f[0], 848, 1, __PYX_ERR(0, 848, __pyx_L1_error));

  /* "cuda/ccudart.pyx":850
 * cdef cudaError_t cudaFuncSetCacheConfig(const void* func, cudaFuncCache cacheConfig) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":851
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuFuncSetCacheConfig(<ccuda.CUfunction>func, <ccuda.CUfunc_cache>cacheConfig)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":852
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuFuncSetCacheConfig(<ccuda.CUfunction>func, <ccuda.CUfunc_cache>cacheConfig)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":851
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuFuncSetCacheConfig(<ccuda.CUfunction>func, <ccuda.CUfunc_cache>cacheConfig)
 */
  }

  /* "cuda/ccudart.pyx":853
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuFuncSetCacheConfig(<ccuda.CUfunction>func, <ccuda.CUfunc_cache>cacheConfig)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuFuncSetCacheConfig(((__pyx_t_4cuda_5ccuda_CUfunction)__pyx_v_func), ((__pyx_t_4cuda_5ccuda_CUfunc_cache)__pyx_v_cacheConfig)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 853, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":854
 *         return err
 *     err = <cudaError_t>ccuda._cuFuncSetCacheConfig(<ccuda.CUfunction>func, <ccuda.CUfunc_cache>cacheConfig)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":855
 *     err = <cudaError_t>ccuda._cuFuncSetCacheConfig(<ccuda.CUfunction>func, <ccuda.CUfunc_cache>cacheConfig)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":854
 *         return err
 *     err = <cudaError_t>ccuda._cuFuncSetCacheConfig(<ccuda.CUfunction>func, <ccuda.CUfunc_cache>cacheConfig)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":856
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaFuncSetSharedMemConfig(const void* func, cudaSharedMemConfig config) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":848
 *     return err
 * 
 * cdef cudaError_t cudaFuncSetCacheConfig(const void* func, cudaFuncCache cacheConfig) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaFuncSetCacheConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":858
 *     return err
 * 
 * cdef cudaError_t cudaFuncSetSharedMemConfig(const void* func, cudaSharedMemConfig config) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaFuncSetSharedMemConfig(void const *__pyx_v_func, enum __pyx_t_4cuda_7ccudart_cudaSharedMemConfig __pyx_v_config) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaFuncSetSharedMemConfig", __pyx_f[0], 858, 1, __PYX_ERR(0, 858, __pyx_L1_error));

  /* "cuda/ccudart.pyx":860
 * cdef cudaError_t cudaFuncSetSharedMemConfig(const void* func, cudaSharedMemConfig config) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":861
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuFuncSetSharedMemConfig(<ccuda.CUfunction>func, <ccuda.CUsharedconfig>config)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":862
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuFuncSetSharedMemConfig(<ccuda.CUfunction>func, <ccuda.CUsharedconfig>config)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":861
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuFuncSetSharedMemConfig(<ccuda.CUfunction>func, <ccuda.CUsharedconfig>config)
 */
  }

  /* "cuda/ccudart.pyx":863
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuFuncSetSharedMemConfig(<ccuda.CUfunction>func, <ccuda.CUsharedconfig>config)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuFuncSetSharedMemConfig(((__pyx_t_4cuda_5ccuda_CUfunction)__pyx_v_func), ((__pyx_t_4cuda_5ccuda_CUsharedconfig)__pyx_v_config)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 863, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":864
 *         return err
 *     err = <cudaError_t>ccuda._cuFuncSetSharedMemConfig(<ccuda.CUfunction>func, <ccuda.CUsharedconfig>config)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":865
 *     err = <cudaError_t>ccuda._cuFuncSetSharedMemConfig(<ccuda.CUfunction>func, <ccuda.CUsharedconfig>config)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":864
 *         return err
 *     err = <cudaError_t>ccuda._cuFuncSetSharedMemConfig(<ccuda.CUfunction>func, <ccuda.CUsharedconfig>config)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":866
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaFuncGetAttributes(cudaFuncAttributes* attr, const void* func) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":858
 *     return err
 * 
 * cdef cudaError_t cudaFuncSetSharedMemConfig(const void* func, cudaSharedMemConfig config) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaFuncSetSharedMemConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":868
 *     return err
 * 
 * cdef cudaError_t cudaFuncGetAttributes(cudaFuncAttributes* attr, const void* func) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaFuncGetAttributes(attr, func)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaFuncGetAttributes(struct __pyx_t_4cuda_7ccudart_cudaFuncAttributes *__pyx_v_attr, void const *__pyx_v_func) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaFuncGetAttributes", __pyx_f[0], 868, 1, __PYX_ERR(0, 868, __pyx_L1_error));

  /* "cuda/ccudart.pyx":869
 * 
 * cdef cudaError_t cudaFuncGetAttributes(cudaFuncAttributes* attr, const void* func) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaFuncGetAttributes(attr, func)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaFuncSetAttribute(const void* func, cudaFuncAttribute attr, int value) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFuncGetAttributes(__pyx_v_attr, __pyx_v_func); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 869, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":868
 *     return err
 * 
 * cdef cudaError_t cudaFuncGetAttributes(cudaFuncAttributes* attr, const void* func) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaFuncGetAttributes(attr, func)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaFuncGetAttributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":871
 *     return _cudaFuncGetAttributes(attr, func)
 * 
 * cdef cudaError_t cudaFuncSetAttribute(const void* func, cudaFuncAttribute attr, int value) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaFuncSetAttribute(void const *__pyx_v_func, enum __pyx_t_4cuda_7ccudart_cudaFuncAttribute __pyx_v_attr, int __pyx_v_value) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaFuncSetAttribute", __pyx_f[0], 871, 1, __PYX_ERR(0, 871, __pyx_L1_error));

  /* "cuda/ccudart.pyx":873
 * cdef cudaError_t cudaFuncSetAttribute(const void* func, cudaFuncAttribute attr, int value) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":874
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuFuncSetAttribute(<ccuda.CUfunction>func, <ccuda.CUfunction_attribute>attr, value)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":875
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuFuncSetAttribute(<ccuda.CUfunction>func, <ccuda.CUfunction_attribute>attr, value)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":874
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuFuncSetAttribute(<ccuda.CUfunction>func, <ccuda.CUfunction_attribute>attr, value)
 */
  }

  /* "cuda/ccudart.pyx":876
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuFuncSetAttribute(<ccuda.CUfunction>func, <ccuda.CUfunction_attribute>attr, value)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuFuncSetAttribute(((__pyx_t_4cuda_5ccuda_CUfunction)__pyx_v_func), ((__pyx_t_4cuda_5ccuda_CUfunction_attribute)__pyx_v_attr), __pyx_v_value); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 876, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":877
 *         return err
 *     err = <cudaError_t>ccuda._cuFuncSetAttribute(<ccuda.CUfunction>func, <ccuda.CUfunction_attribute>attr, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":878
 *     err = <cudaError_t>ccuda._cuFuncSetAttribute(<ccuda.CUfunction>func, <ccuda.CUfunction_attribute>attr, value)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":877
 *         return err
 *     err = <cudaError_t>ccuda._cuFuncSetAttribute(<ccuda.CUfunction>func, <ccuda.CUfunction_attribute>attr, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":879
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaSetDoubleForDevice(double* d) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":871
 *     return _cudaFuncGetAttributes(attr, func)
 * 
 * cdef cudaError_t cudaFuncSetAttribute(const void* func, cudaFuncAttribute attr, int value) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaFuncSetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":881
 *     return err
 * 
 * cdef cudaError_t cudaSetDoubleForDevice(double* d) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaSetDoubleForDevice(d)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaSetDoubleForDevice(double *__pyx_v_d) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaSetDoubleForDevice", __pyx_f[0], 881, 1, __PYX_ERR(0, 881, __pyx_L1_error));

  /* "cuda/ccudart.pyx":882
 * 
 * cdef cudaError_t cudaSetDoubleForDevice(double* d) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaSetDoubleForDevice(d)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaSetDoubleForHost(double* d) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSetDoubleForDevice(__pyx_v_d); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 882, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":881
 *     return err
 * 
 * cdef cudaError_t cudaSetDoubleForDevice(double* d) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaSetDoubleForDevice(d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaSetDoubleForDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":884
 *     return _cudaSetDoubleForDevice(d)
 * 
 * cdef cudaError_t cudaSetDoubleForHost(double* d) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaSetDoubleForHost(d)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaSetDoubleForHost(double *__pyx_v_d) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaSetDoubleForHost", __pyx_f[0], 884, 1, __PYX_ERR(0, 884, __pyx_L1_error));

  /* "cuda/ccudart.pyx":885
 * 
 * cdef cudaError_t cudaSetDoubleForHost(double* d) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaSetDoubleForHost(d)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void* userData) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSetDoubleForHost(__pyx_v_d); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 885, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":884
 *     return _cudaSetDoubleForDevice(d)
 * 
 * cdef cudaError_t cudaSetDoubleForHost(double* d) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaSetDoubleForHost(d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaSetDoubleForHost", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":887
 *     return _cudaSetDoubleForHost(d)
 * 
 * cdef cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void* userData) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaLaunchHostFunc(__pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream, __pyx_t_4cuda_7ccudart_cudaHostFn_t __pyx_v_fn, void *__pyx_v_userData) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaLaunchHostFunc", __pyx_f[0], 887, 1, __PYX_ERR(0, 887, __pyx_L1_error));

  /* "cuda/ccudart.pyx":889
 * cdef cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void* userData) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":890
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuLaunchHostFunc(<ccuda.CUstream>stream, <ccuda.CUhostFn>fn, userData)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":891
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuLaunchHostFunc(<ccuda.CUstream>stream, <ccuda.CUhostFn>fn, userData)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":890
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuLaunchHostFunc(<ccuda.CUstream>stream, <ccuda.CUhostFn>fn, userData)
 */
  }

  /* "cuda/ccudart.pyx":892
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuLaunchHostFunc(<ccuda.CUstream>stream, <ccuda.CUhostFn>fn, userData)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuLaunchHostFunc(((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_stream), ((__pyx_t_4cuda_5ccuda_CUhostFn)__pyx_v_fn), __pyx_v_userData); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 892, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":893
 *         return err
 *     err = <cudaError_t>ccuda._cuLaunchHostFunc(<ccuda.CUstream>stream, <ccuda.CUhostFn>fn, userData)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":894
 *     err = <cudaError_t>ccuda._cuLaunchHostFunc(<ccuda.CUstream>stream, <ccuda.CUhostFn>fn, userData)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":893
 *         return err
 *     err = <cudaError_t>ccuda._cuLaunchHostFunc(<ccuda.CUstream>stream, <ccuda.CUhostFn>fn, userData)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":895
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":887
 *     return _cudaSetDoubleForHost(d)
 * 
 * cdef cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void* userData) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaLaunchHostFunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":897
 *     return err
 * 
 * cdef cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *__pyx_v_numBlocks, void const *__pyx_v_func, int __pyx_v_blockSize, size_t __pyx_v_dynamicSMemSize) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaOccupancyMaxActiveBlocksPerMultiprocessor", __pyx_f[0], 897, 1, __PYX_ERR(0, 897, __pyx_L1_error));

  /* "cuda/ccudart.pyx":899
 * cdef cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":900
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks, <ccuda.CUfunction>func, blockSize, dynamicSMemSize)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":901
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks, <ccuda.CUfunction>func, blockSize, dynamicSMemSize)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":900
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks, <ccuda.CUfunction>func, blockSize, dynamicSMemSize)
 */
  }

  /* "cuda/ccudart.pyx":902
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks, <ccuda.CUfunction>func, blockSize, dynamicSMemSize)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuOccupancyMaxActiveBlocksPerMultiprocessor(__pyx_v_numBlocks, ((__pyx_t_4cuda_5ccuda_CUfunction)__pyx_v_func), __pyx_v_blockSize, __pyx_v_dynamicSMemSize); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 902, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":903
 *         return err
 *     err = <cudaError_t>ccuda._cuOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks, <ccuda.CUfunction>func, blockSize, dynamicSMemSize)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":904
 *     err = <cudaError_t>ccuda._cuOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks, <ccuda.CUfunction>func, blockSize, dynamicSMemSize)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":903
 *         return err
 *     err = <cudaError_t>ccuda._cuOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks, <ccuda.CUfunction>func, blockSize, dynamicSMemSize)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":905
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(size_t* dynamicSmemSize, const void* func, int numBlocks, int blockSize) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":897
 *     return err
 * 
 * cdef cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaOccupancyMaxActiveBlocksPerMultiprocessor", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":907
 *     return err
 * 
 * cdef cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(size_t* dynamicSmemSize, const void* func, int numBlocks, int blockSize) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaOccupancyAvailableDynamicSMemPerBlock(size_t *__pyx_v_dynamicSmemSize, void const *__pyx_v_func, int __pyx_v_numBlocks, int __pyx_v_blockSize) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaOccupancyAvailableDynamicSMemPerBlock", __pyx_f[0], 907, 1, __PYX_ERR(0, 907, __pyx_L1_error));

  /* "cuda/ccudart.pyx":909
 * cdef cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(size_t* dynamicSmemSize, const void* func, int numBlocks, int blockSize) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":910
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, <ccuda.CUfunction>func, numBlocks, blockSize)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":911
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, <ccuda.CUfunction>func, numBlocks, blockSize)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":910
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, <ccuda.CUfunction>func, numBlocks, blockSize)
 */
  }

  /* "cuda/ccudart.pyx":912
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, <ccuda.CUfunction>func, numBlocks, blockSize)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuOccupancyAvailableDynamicSMemPerBlock(__pyx_v_dynamicSmemSize, ((__pyx_t_4cuda_5ccuda_CUfunction)__pyx_v_func), __pyx_v_numBlocks, __pyx_v_blockSize); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 912, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":913
 *         return err
 *     err = <cudaError_t>ccuda._cuOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, <ccuda.CUfunction>func, numBlocks, blockSize)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":914
 *     err = <cudaError_t>ccuda._cuOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, <ccuda.CUfunction>func, numBlocks, blockSize)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":913
 *         return err
 *     err = <cudaError_t>ccuda._cuOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, <ccuda.CUfunction>func, numBlocks, blockSize)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":915
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":907
 *     return err
 * 
 * cdef cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(size_t* dynamicSmemSize, const void* func, int numBlocks, int blockSize) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaOccupancyAvailableDynamicSMemPerBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":917
 *     return err
 * 
 * cdef cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *__pyx_v_numBlocks, void const *__pyx_v_func, int __pyx_v_blockSize, size_t __pyx_v_dynamicSMemSize, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags", __pyx_f[0], 917, 1, __PYX_ERR(0, 917, __pyx_L1_error));

  /* "cuda/ccudart.pyx":919
 * cdef cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":920
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, <ccuda.CUfunction>func, blockSize, dynamicSMemSize, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":921
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, <ccuda.CUfunction>func, blockSize, dynamicSMemSize, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":920
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, <ccuda.CUfunction>func, blockSize, dynamicSMemSize, flags)
 */
  }

  /* "cuda/ccudart.pyx":922
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, <ccuda.CUfunction>func, blockSize, dynamicSMemSize, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(__pyx_v_numBlocks, ((__pyx_t_4cuda_5ccuda_CUfunction)__pyx_v_func), __pyx_v_blockSize, __pyx_v_dynamicSMemSize, __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 922, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":923
 *         return err
 *     err = <cudaError_t>ccuda._cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, <ccuda.CUfunction>func, blockSize, dynamicSMemSize, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":924
 *     err = <cudaError_t>ccuda._cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, <ccuda.CUfunction>func, blockSize, dynamicSMemSize, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":923
 *         return err
 *     err = <cudaError_t>ccuda._cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, <ccuda.CUfunction>func, blockSize, dynamicSMemSize, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":925
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMallocManaged(void** devPtr, size_t size, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":917
 *     return err
 * 
 * cdef cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":927
 *     return err
 * 
 * cdef cudaError_t cudaMallocManaged(void** devPtr, size_t size, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMallocManaged(void **__pyx_v_devPtr, size_t __pyx_v_size, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMallocManaged", __pyx_f[0], 927, 1, __PYX_ERR(0, 927, __pyx_L1_error));

  /* "cuda/ccudart.pyx":929
 * cdef cudaError_t cudaMallocManaged(void** devPtr, size_t size, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":930
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemAllocManaged(<ccuda.CUdeviceptr*>devPtr, size, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":931
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemAllocManaged(<ccuda.CUdeviceptr*>devPtr, size, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":930
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemAllocManaged(<ccuda.CUdeviceptr*>devPtr, size, flags)
 */
  }

  /* "cuda/ccudart.pyx":932
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemAllocManaged(<ccuda.CUdeviceptr*>devPtr, size, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemAllocManaged(((__pyx_t_4cuda_5ccuda_CUdeviceptr *)__pyx_v_devPtr), __pyx_v_size, __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 932, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":933
 *         return err
 *     err = <cudaError_t>ccuda._cuMemAllocManaged(<ccuda.CUdeviceptr*>devPtr, size, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":934
 *     err = <cudaError_t>ccuda._cuMemAllocManaged(<ccuda.CUdeviceptr*>devPtr, size, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":933
 *         return err
 *     err = <cudaError_t>ccuda._cuMemAllocManaged(<ccuda.CUdeviceptr*>devPtr, size, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":935
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMalloc(void** devPtr, size_t size) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":927
 *     return err
 * 
 * cdef cudaError_t cudaMallocManaged(void** devPtr, size_t size, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMallocManaged", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":937
 *     return err
 * 
 * cdef cudaError_t cudaMalloc(void** devPtr, size_t size) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMalloc(void **__pyx_v_devPtr, size_t __pyx_v_size) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMalloc", __pyx_f[0], 937, 1, __PYX_ERR(0, 937, __pyx_L1_error));

  /* "cuda/ccudart.pyx":939
 * cdef cudaError_t cudaMalloc(void** devPtr, size_t size) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":940
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemAlloc_v2(<ccuda.CUdeviceptr*>devPtr, size)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":941
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemAlloc_v2(<ccuda.CUdeviceptr*>devPtr, size)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":940
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemAlloc_v2(<ccuda.CUdeviceptr*>devPtr, size)
 */
  }

  /* "cuda/ccudart.pyx":942
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemAlloc_v2(<ccuda.CUdeviceptr*>devPtr, size)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemAlloc_v2(((__pyx_t_4cuda_5ccuda_CUdeviceptr *)__pyx_v_devPtr), __pyx_v_size); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 942, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":943
 *         return err
 *     err = <cudaError_t>ccuda._cuMemAlloc_v2(<ccuda.CUdeviceptr*>devPtr, size)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":944
 *     err = <cudaError_t>ccuda._cuMemAlloc_v2(<ccuda.CUdeviceptr*>devPtr, size)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":943
 *         return err
 *     err = <cudaError_t>ccuda._cuMemAlloc_v2(<ccuda.CUdeviceptr*>devPtr, size)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":945
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMallocHost(void** ptr, size_t size) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":937
 *     return err
 * 
 * cdef cudaError_t cudaMalloc(void** devPtr, size_t size) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMalloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":947
 *     return err
 * 
 * cdef cudaError_t cudaMallocHost(void** ptr, size_t size) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMallocHost(ptr, size)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMallocHost(void **__pyx_v_ptr, size_t __pyx_v_size) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMallocHost", __pyx_f[0], 947, 1, __PYX_ERR(0, 947, __pyx_L1_error));

  /* "cuda/ccudart.pyx":948
 * 
 * cdef cudaError_t cudaMallocHost(void** ptr, size_t size) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMallocHost(ptr, size)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMallocPitch(void** devPtr, size_t* pitch, size_t width, size_t height) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocHost(__pyx_v_ptr, __pyx_v_size); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 948, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":947
 *     return err
 * 
 * cdef cudaError_t cudaMallocHost(void** ptr, size_t size) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMallocHost(ptr, size)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMallocHost", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":950
 *     return _cudaMallocHost(ptr, size)
 * 
 * cdef cudaError_t cudaMallocPitch(void** devPtr, size_t* pitch, size_t width, size_t height) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMallocPitch(devPtr, pitch, width, height)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMallocPitch(void **__pyx_v_devPtr, size_t *__pyx_v_pitch, size_t __pyx_v_width, size_t __pyx_v_height) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMallocPitch", __pyx_f[0], 950, 1, __PYX_ERR(0, 950, __pyx_L1_error));

  /* "cuda/ccudart.pyx":951
 * 
 * cdef cudaError_t cudaMallocPitch(void** devPtr, size_t* pitch, size_t width, size_t height) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMallocPitch(devPtr, pitch, width, height)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMallocArray(cudaArray_t* array, const cudaChannelFormatDesc* desc, size_t width, size_t height, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocPitch(__pyx_v_devPtr, __pyx_v_pitch, __pyx_v_width, __pyx_v_height); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 951, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":950
 *     return _cudaMallocHost(ptr, size)
 * 
 * cdef cudaError_t cudaMallocPitch(void** devPtr, size_t* pitch, size_t width, size_t height) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMallocPitch(devPtr, pitch, width, height)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMallocPitch", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":953
 *     return _cudaMallocPitch(devPtr, pitch, width, height)
 * 
 * cdef cudaError_t cudaMallocArray(cudaArray_t* array, const cudaChannelFormatDesc* desc, size_t width, size_t height, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMallocArray(array, desc, width, height, flags)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMallocArray(__pyx_t_4cuda_7ccudart_cudaArray_t *__pyx_v_array, struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc const *__pyx_v_desc, size_t __pyx_v_width, size_t __pyx_v_height, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMallocArray", __pyx_f[0], 953, 1, __PYX_ERR(0, 953, __pyx_L1_error));

  /* "cuda/ccudart.pyx":954
 * 
 * cdef cudaError_t cudaMallocArray(cudaArray_t* array, const cudaChannelFormatDesc* desc, size_t width, size_t height, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMallocArray(array, desc, width, height, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaFree(void* devPtr) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocArray(__pyx_v_array, __pyx_v_desc, __pyx_v_width, __pyx_v_height, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 954, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":953
 *     return _cudaMallocPitch(devPtr, pitch, width, height)
 * 
 * cdef cudaError_t cudaMallocArray(cudaArray_t* array, const cudaChannelFormatDesc* desc, size_t width, size_t height, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMallocArray(array, desc, width, height, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMallocArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":956
 *     return _cudaMallocArray(array, desc, width, height, flags)
 * 
 * cdef cudaError_t cudaFree(void* devPtr) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaFree(void *__pyx_v_devPtr) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaFree", __pyx_f[0], 956, 1, __PYX_ERR(0, 956, __pyx_L1_error));

  /* "cuda/ccudart.pyx":958
 * cdef cudaError_t cudaFree(void* devPtr) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":959
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemFree_v2(<ccuda.CUdeviceptr>devPtr)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":960
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemFree_v2(<ccuda.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":959
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemFree_v2(<ccuda.CUdeviceptr>devPtr)
 */
  }

  /* "cuda/ccudart.pyx":961
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemFree_v2(<ccuda.CUdeviceptr>devPtr)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemFree_v2(((__pyx_t_4cuda_5ccuda_CUdeviceptr)__pyx_v_devPtr)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 961, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":962
 *         return err
 *     err = <cudaError_t>ccuda._cuMemFree_v2(<ccuda.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":963
 *     err = <cudaError_t>ccuda._cuMemFree_v2(<ccuda.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":962
 *         return err
 *     err = <cudaError_t>ccuda._cuMemFree_v2(<ccuda.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":964
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaFreeHost(void* ptr) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":956
 *     return _cudaMallocArray(array, desc, width, height, flags)
 * 
 * cdef cudaError_t cudaFree(void* devPtr) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaFree", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":966
 *     return err
 * 
 * cdef cudaError_t cudaFreeHost(void* ptr) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaFreeHost(void *__pyx_v_ptr) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaFreeHost", __pyx_f[0], 966, 1, __PYX_ERR(0, 966, __pyx_L1_error));

  /* "cuda/ccudart.pyx":968
 * cdef cudaError_t cudaFreeHost(void* ptr) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":969
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemFreeHost(ptr)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":970
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemFreeHost(ptr)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":969
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemFreeHost(ptr)
 */
  }

  /* "cuda/ccudart.pyx":971
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemFreeHost(ptr)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemFreeHost(__pyx_v_ptr); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 971, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":972
 *         return err
 *     err = <cudaError_t>ccuda._cuMemFreeHost(ptr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":973
 *     err = <cudaError_t>ccuda._cuMemFreeHost(ptr)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":972
 *         return err
 *     err = <cudaError_t>ccuda._cuMemFreeHost(ptr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":974
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaFreeArray(cudaArray_t array) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":966
 *     return err
 * 
 * cdef cudaError_t cudaFreeHost(void* ptr) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaFreeHost", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":976
 *     return err
 * 
 * cdef cudaError_t cudaFreeArray(cudaArray_t array) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaFreeArray(__pyx_t_4cuda_7ccudart_cudaArray_t __pyx_v_array) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaFreeArray", __pyx_f[0], 976, 1, __PYX_ERR(0, 976, __pyx_L1_error));

  /* "cuda/ccudart.pyx":978
 * cdef cudaError_t cudaFreeArray(cudaArray_t array) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":979
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuArrayDestroy(<ccuda.CUarray>array)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":980
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuArrayDestroy(<ccuda.CUarray>array)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":979
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuArrayDestroy(<ccuda.CUarray>array)
 */
  }

  /* "cuda/ccudart.pyx":981
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuArrayDestroy(<ccuda.CUarray>array)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuArrayDestroy(((__pyx_t_4cuda_5ccuda_CUarray)__pyx_v_array)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 981, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":982
 *         return err
 *     err = <cudaError_t>ccuda._cuArrayDestroy(<ccuda.CUarray>array)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":983
 *     err = <cudaError_t>ccuda._cuArrayDestroy(<ccuda.CUarray>array)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":982
 *         return err
 *     err = <cudaError_t>ccuda._cuArrayDestroy(<ccuda.CUarray>array)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":984
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":976
 *     return err
 * 
 * cdef cudaError_t cudaFreeArray(cudaArray_t array) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaFreeArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":986
 *     return err
 * 
 * cdef cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaFreeMipmappedArray(__pyx_t_4cuda_7ccudart_cudaMipmappedArray_t __pyx_v_mipmappedArray) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaFreeMipmappedArray", __pyx_f[0], 986, 1, __PYX_ERR(0, 986, __pyx_L1_error));

  /* "cuda/ccudart.pyx":988
 * cdef cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":989
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMipmappedArrayDestroy(<ccuda.CUmipmappedArray>mipmappedArray)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":990
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMipmappedArrayDestroy(<ccuda.CUmipmappedArray>mipmappedArray)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":989
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMipmappedArrayDestroy(<ccuda.CUmipmappedArray>mipmappedArray)
 */
  }

  /* "cuda/ccudart.pyx":991
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMipmappedArrayDestroy(<ccuda.CUmipmappedArray>mipmappedArray)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMipmappedArrayDestroy(((__pyx_t_4cuda_5ccuda_CUmipmappedArray)__pyx_v_mipmappedArray)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 991, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":992
 *         return err
 *     err = <cudaError_t>ccuda._cuMipmappedArrayDestroy(<ccuda.CUmipmappedArray>mipmappedArray)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":993
 *     err = <cudaError_t>ccuda._cuMipmappedArrayDestroy(<ccuda.CUmipmappedArray>mipmappedArray)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":992
 *         return err
 *     err = <cudaError_t>ccuda._cuMipmappedArrayDestroy(<ccuda.CUmipmappedArray>mipmappedArray)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":994
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaHostAlloc(void** pHost, size_t size, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":986
 *     return err
 * 
 * cdef cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaFreeMipmappedArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":996
 *     return err
 * 
 * cdef cudaError_t cudaHostAlloc(void** pHost, size_t size, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaHostAlloc(void **__pyx_v_pHost, size_t __pyx_v_size, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaHostAlloc", __pyx_f[0], 996, 1, __PYX_ERR(0, 996, __pyx_L1_error));

  /* "cuda/ccudart.pyx":998
 * cdef cudaError_t cudaHostAlloc(void** pHost, size_t size, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":999
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostAlloc(pHost, size, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1000
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemHostAlloc(pHost, size, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":999
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostAlloc(pHost, size, flags)
 */
  }

  /* "cuda/ccudart.pyx":1001
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostAlloc(pHost, size, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemHostAlloc(__pyx_v_pHost, __pyx_v_size, __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1001, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1002
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostAlloc(pHost, size, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1003
 *     err = <cudaError_t>ccuda._cuMemHostAlloc(pHost, size, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1002
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostAlloc(pHost, size, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1004
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaHostRegister(void* ptr, size_t size, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":996
 *     return err
 * 
 * cdef cudaError_t cudaHostAlloc(void** pHost, size_t size, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaHostAlloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1006
 *     return err
 * 
 * cdef cudaError_t cudaHostRegister(void* ptr, size_t size, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaHostRegister(void *__pyx_v_ptr, size_t __pyx_v_size, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaHostRegister", __pyx_f[0], 1006, 1, __PYX_ERR(0, 1006, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1008
 * cdef cudaError_t cudaHostRegister(void* ptr, size_t size, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1009
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostRegister_v2(ptr, size, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1010
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemHostRegister_v2(ptr, size, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1009
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostRegister_v2(ptr, size, flags)
 */
  }

  /* "cuda/ccudart.pyx":1011
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostRegister_v2(ptr, size, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemHostRegister_v2(__pyx_v_ptr, __pyx_v_size, __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1011, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1012
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostRegister_v2(ptr, size, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1013
 *     err = <cudaError_t>ccuda._cuMemHostRegister_v2(ptr, size, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1012
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostRegister_v2(ptr, size, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1014
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaHostUnregister(void* ptr) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1006
 *     return err
 * 
 * cdef cudaError_t cudaHostRegister(void* ptr, size_t size, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaHostRegister", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1016
 *     return err
 * 
 * cdef cudaError_t cudaHostUnregister(void* ptr) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaHostUnregister(void *__pyx_v_ptr) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaHostUnregister", __pyx_f[0], 1016, 1, __PYX_ERR(0, 1016, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1018
 * cdef cudaError_t cudaHostUnregister(void* ptr) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1019
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostUnregister(ptr)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1020
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemHostUnregister(ptr)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1019
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostUnregister(ptr)
 */
  }

  /* "cuda/ccudart.pyx":1021
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostUnregister(ptr)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemHostUnregister(__pyx_v_ptr); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1021, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1022
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostUnregister(ptr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1023
 *     err = <cudaError_t>ccuda._cuMemHostUnregister(ptr)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1022
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostUnregister(ptr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1024
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaHostGetDevicePointer(void** pDevice, void* pHost, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1016
 *     return err
 * 
 * cdef cudaError_t cudaHostUnregister(void* ptr) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaHostUnregister", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1026
 *     return err
 * 
 * cdef cudaError_t cudaHostGetDevicePointer(void** pDevice, void* pHost, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaHostGetDevicePointer(void **__pyx_v_pDevice, void *__pyx_v_pHost, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaHostGetDevicePointer", __pyx_f[0], 1026, 1, __PYX_ERR(0, 1026, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1028
 * cdef cudaError_t cudaHostGetDevicePointer(void** pDevice, void* pHost, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1029
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostGetDevicePointer_v2(<ccuda.CUdeviceptr*>pDevice, pHost, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1030
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemHostGetDevicePointer_v2(<ccuda.CUdeviceptr*>pDevice, pHost, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1029
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostGetDevicePointer_v2(<ccuda.CUdeviceptr*>pDevice, pHost, flags)
 */
  }

  /* "cuda/ccudart.pyx":1031
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostGetDevicePointer_v2(<ccuda.CUdeviceptr*>pDevice, pHost, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemHostGetDevicePointer_v2(((__pyx_t_4cuda_5ccuda_CUdeviceptr *)__pyx_v_pDevice), __pyx_v_pHost, __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1031, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1032
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostGetDevicePointer_v2(<ccuda.CUdeviceptr*>pDevice, pHost, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1033
 *     err = <cudaError_t>ccuda._cuMemHostGetDevicePointer_v2(<ccuda.CUdeviceptr*>pDevice, pHost, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1032
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostGetDevicePointer_v2(<ccuda.CUdeviceptr*>pDevice, pHost, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1034
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaHostGetFlags(unsigned int* pFlags, void* pHost) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1026
 *     return err
 * 
 * cdef cudaError_t cudaHostGetDevicePointer(void** pDevice, void* pHost, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaHostGetDevicePointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1036
 *     return err
 * 
 * cdef cudaError_t cudaHostGetFlags(unsigned int* pFlags, void* pHost) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaHostGetFlags(unsigned int *__pyx_v_pFlags, void *__pyx_v_pHost) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaHostGetFlags", __pyx_f[0], 1036, 1, __PYX_ERR(0, 1036, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1038
 * cdef cudaError_t cudaHostGetFlags(unsigned int* pFlags, void* pHost) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1039
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostGetFlags(pFlags, pHost)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1040
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemHostGetFlags(pFlags, pHost)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1039
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostGetFlags(pFlags, pHost)
 */
  }

  /* "cuda/ccudart.pyx":1041
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostGetFlags(pFlags, pHost)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemHostGetFlags(__pyx_v_pFlags, __pyx_v_pHost); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1041, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1042
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostGetFlags(pFlags, pHost)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1043
 *     err = <cudaError_t>ccuda._cuMemHostGetFlags(pFlags, pHost)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1042
 *         return err
 *     err = <cudaError_t>ccuda._cuMemHostGetFlags(pFlags, pHost)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1044
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMalloc3D(cudaPitchedPtr* pitchedDevPtr, cudaExtent extent) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1036
 *     return err
 * 
 * cdef cudaError_t cudaHostGetFlags(unsigned int* pFlags, void* pHost) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaHostGetFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1046
 *     return err
 * 
 * cdef cudaError_t cudaMalloc3D(cudaPitchedPtr* pitchedDevPtr, cudaExtent extent) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMalloc3D(pitchedDevPtr, extent)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMalloc3D(struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr *__pyx_v_pitchedDevPtr, struct __pyx_t_4cuda_7ccudart_cudaExtent __pyx_v_extent) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMalloc3D", __pyx_f[0], 1046, 1, __PYX_ERR(0, 1046, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1047
 * 
 * cdef cudaError_t cudaMalloc3D(cudaPitchedPtr* pitchedDevPtr, cudaExtent extent) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMalloc3D(pitchedDevPtr, extent)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMalloc3DArray(cudaArray_t* array, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMalloc3D(__pyx_v_pitchedDevPtr, __pyx_v_extent); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1047, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1046
 *     return err
 * 
 * cdef cudaError_t cudaMalloc3D(cudaPitchedPtr* pitchedDevPtr, cudaExtent extent) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMalloc3D(pitchedDevPtr, extent)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMalloc3D", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1049
 *     return _cudaMalloc3D(pitchedDevPtr, extent)
 * 
 * cdef cudaError_t cudaMalloc3DArray(cudaArray_t* array, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMalloc3DArray(array, desc, extent, flags)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMalloc3DArray(__pyx_t_4cuda_7ccudart_cudaArray_t *__pyx_v_array, struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc const *__pyx_v_desc, struct __pyx_t_4cuda_7ccudart_cudaExtent __pyx_v_extent, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMalloc3DArray", __pyx_f[0], 1049, 1, __PYX_ERR(0, 1049, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1050
 * 
 * cdef cudaError_t cudaMalloc3DArray(cudaArray_t* array, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMalloc3DArray(array, desc, extent, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t* mipmappedArray, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int numLevels, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMalloc3DArray(__pyx_v_array, __pyx_v_desc, __pyx_v_extent, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1050, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1049
 *     return _cudaMalloc3D(pitchedDevPtr, extent)
 * 
 * cdef cudaError_t cudaMalloc3DArray(cudaArray_t* array, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMalloc3DArray(array, desc, extent, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMalloc3DArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1052
 *     return _cudaMalloc3DArray(array, desc, extent, flags)
 * 
 * cdef cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t* mipmappedArray, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int numLevels, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMallocMipmappedArray(mipmappedArray, desc, extent, numLevels, flags)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMallocMipmappedArray(__pyx_t_4cuda_7ccudart_cudaMipmappedArray_t *__pyx_v_mipmappedArray, struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc const *__pyx_v_desc, struct __pyx_t_4cuda_7ccudart_cudaExtent __pyx_v_extent, unsigned int __pyx_v_numLevels, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMallocMipmappedArray", __pyx_f[0], 1052, 1, __PYX_ERR(0, 1052, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1053
 * 
 * cdef cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t* mipmappedArray, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int numLevels, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMallocMipmappedArray(mipmappedArray, desc, extent, numLevels, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t* levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocMipmappedArray(__pyx_v_mipmappedArray, __pyx_v_desc, __pyx_v_extent, __pyx_v_numLevels, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1053, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1052
 *     return _cudaMalloc3DArray(array, desc, extent, flags)
 * 
 * cdef cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t* mipmappedArray, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int numLevels, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMallocMipmappedArray(mipmappedArray, desc, extent, numLevels, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMallocMipmappedArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1055
 *     return _cudaMallocMipmappedArray(mipmappedArray, desc, extent, numLevels, flags)
 * 
 * cdef cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t* levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGetMipmappedArrayLevel(__pyx_t_4cuda_7ccudart_cudaArray_t *__pyx_v_levelArray, __pyx_t_4cuda_7ccudart_cudaMipmappedArray_const_t __pyx_v_mipmappedArray, unsigned int __pyx_v_level) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGetMipmappedArrayLevel", __pyx_f[0], 1055, 1, __PYX_ERR(0, 1055, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1057
 * cdef cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t* levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1058
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMipmappedArrayGetLevel(<ccuda.CUarray*>levelArray, <ccuda.CUmipmappedArray>mipmappedArray, level)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1059
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMipmappedArrayGetLevel(<ccuda.CUarray*>levelArray, <ccuda.CUmipmappedArray>mipmappedArray, level)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1058
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMipmappedArrayGetLevel(<ccuda.CUarray*>levelArray, <ccuda.CUmipmappedArray>mipmappedArray, level)
 */
  }

  /* "cuda/ccudart.pyx":1060
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMipmappedArrayGetLevel(<ccuda.CUarray*>levelArray, <ccuda.CUmipmappedArray>mipmappedArray, level)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMipmappedArrayGetLevel(((__pyx_t_4cuda_5ccuda_CUarray *)__pyx_v_levelArray), ((__pyx_t_4cuda_5ccuda_CUmipmappedArray)__pyx_v_mipmappedArray), __pyx_v_level); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1060, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1061
 *         return err
 *     err = <cudaError_t>ccuda._cuMipmappedArrayGetLevel(<ccuda.CUarray*>levelArray, <ccuda.CUmipmappedArray>mipmappedArray, level)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1062
 *     err = <cudaError_t>ccuda._cuMipmappedArrayGetLevel(<ccuda.CUarray*>levelArray, <ccuda.CUmipmappedArray>mipmappedArray, level)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1061
 *         return err
 *     err = <cudaError_t>ccuda._cuMipmappedArrayGetLevel(<ccuda.CUarray*>levelArray, <ccuda.CUmipmappedArray>mipmappedArray, level)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1063
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms* p) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1055
 *     return _cudaMallocMipmappedArray(mipmappedArray, desc, extent, numLevels, flags)
 * 
 * cdef cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t* levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGetMipmappedArrayLevel", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1065
 *     return err
 * 
 * cdef cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms* p) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy3D(p)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy3D(struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms const *__pyx_v_p) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemcpy3D", __pyx_f[0], 1065, 1, __PYX_ERR(0, 1065, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1066
 * 
 * cdef cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms* p) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemcpy3D(p)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms* p) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3D(__pyx_v_p); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1066, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1065
 *     return err
 * 
 * cdef cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms* p) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy3D(p)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy3D", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1068
 *     return _cudaMemcpy3D(p)
 * 
 * cdef cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms* p) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy3DPeer(p)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy3DPeer(struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DPeerParms const *__pyx_v_p) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemcpy3DPeer", __pyx_f[0], 1068, 1, __PYX_ERR(0, 1068, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1069
 * 
 * cdef cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms* p) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemcpy3DPeer(p)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms* p, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3DPeer(__pyx_v_p); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1069, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1068
 *     return _cudaMemcpy3D(p)
 * 
 * cdef cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms* p) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy3DPeer(p)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy3DPeer", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1071
 *     return _cudaMemcpy3DPeer(p)
 * 
 * cdef cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms* p, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy3DAsync(p, stream)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy3DAsync(struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms const *__pyx_v_p, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemcpy3DAsync", __pyx_f[0], 1071, 1, __PYX_ERR(0, 1071, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1072
 * 
 * cdef cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms* p, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemcpy3DAsync(p, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms* p, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3DAsync(__pyx_v_p, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1072, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1071
 *     return _cudaMemcpy3DPeer(p)
 * 
 * cdef cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms* p, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy3DAsync(p, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy3DAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1074
 *     return _cudaMemcpy3DAsync(p, stream)
 * 
 * cdef cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms* p, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy3DPeerAsync(p, stream)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy3DPeerAsync(struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DPeerParms const *__pyx_v_p, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemcpy3DPeerAsync", __pyx_f[0], 1074, 1, __PYX_ERR(0, 1074, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1075
 * 
 * cdef cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms* p, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemcpy3DPeerAsync(p, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemGetInfo(size_t* free, size_t* total) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3DPeerAsync(__pyx_v_p, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1075, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1074
 *     return _cudaMemcpy3DAsync(p, stream)
 * 
 * cdef cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms* p, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy3DPeerAsync(p, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy3DPeerAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1077
 *     return _cudaMemcpy3DPeerAsync(p, stream)
 * 
 * cdef cudaError_t cudaMemGetInfo(size_t* free, size_t* total) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemGetInfo(size_t *__pyx_v_free, size_t *__pyx_v_total) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemGetInfo", __pyx_f[0], 1077, 1, __PYX_ERR(0, 1077, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1079
 * cdef cudaError_t cudaMemGetInfo(size_t* free, size_t* total) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1080
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemGetInfo_v2(free, total)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1081
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemGetInfo_v2(free, total)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1080
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemGetInfo_v2(free, total)
 */
  }

  /* "cuda/ccudart.pyx":1082
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemGetInfo_v2(free, total)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemGetInfo_v2(__pyx_v_free, __pyx_v_total); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1082, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1083
 *         return err
 *     err = <cudaError_t>ccuda._cuMemGetInfo_v2(free, total)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1084
 *     err = <cudaError_t>ccuda._cuMemGetInfo_v2(free, total)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1083
 *         return err
 *     err = <cudaError_t>ccuda._cuMemGetInfo_v2(free, total)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1085
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc* desc, cudaExtent* extent, unsigned int* flags, cudaArray_t array) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1077
 *     return _cudaMemcpy3DPeerAsync(p, stream)
 * 
 * cdef cudaError_t cudaMemGetInfo(size_t* free, size_t* total) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemGetInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1087
 *     return err
 * 
 * cdef cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc* desc, cudaExtent* extent, unsigned int* flags, cudaArray_t array) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaArrayGetInfo(desc, extent, flags, array)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaArrayGetInfo(struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc *__pyx_v_desc, struct __pyx_t_4cuda_7ccudart_cudaExtent *__pyx_v_extent, unsigned int *__pyx_v_flags, __pyx_t_4cuda_7ccudart_cudaArray_t __pyx_v_array) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaArrayGetInfo", __pyx_f[0], 1087, 1, __PYX_ERR(0, 1087, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1088
 * 
 * cdef cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc* desc, cudaExtent* extent, unsigned int* flags, cudaArray_t array) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaArrayGetInfo(desc, extent, flags, array)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaArrayGetPlane(cudaArray_t* pPlaneArray, cudaArray_t hArray, unsigned int planeIdx) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetInfo(__pyx_v_desc, __pyx_v_extent, __pyx_v_flags, __pyx_v_array); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1088, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1087
 *     return err
 * 
 * cdef cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc* desc, cudaExtent* extent, unsigned int* flags, cudaArray_t array) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaArrayGetInfo(desc, extent, flags, array)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaArrayGetInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1090
 *     return _cudaArrayGetInfo(desc, extent, flags, array)
 * 
 * cdef cudaError_t cudaArrayGetPlane(cudaArray_t* pPlaneArray, cudaArray_t hArray, unsigned int planeIdx) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaArrayGetPlane(__pyx_t_4cuda_7ccudart_cudaArray_t *__pyx_v_pPlaneArray, __pyx_t_4cuda_7ccudart_cudaArray_t __pyx_v_hArray, unsigned int __pyx_v_planeIdx) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaArrayGetPlane", __pyx_f[0], 1090, 1, __PYX_ERR(0, 1090, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1092
 * cdef cudaError_t cudaArrayGetPlane(cudaArray_t* pPlaneArray, cudaArray_t hArray, unsigned int planeIdx) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1093
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuArrayGetPlane(<ccuda.CUarray*>pPlaneArray, <ccuda.CUarray>hArray, planeIdx)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1094
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuArrayGetPlane(<ccuda.CUarray*>pPlaneArray, <ccuda.CUarray>hArray, planeIdx)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1093
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuArrayGetPlane(<ccuda.CUarray*>pPlaneArray, <ccuda.CUarray>hArray, planeIdx)
 */
  }

  /* "cuda/ccudart.pyx":1095
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuArrayGetPlane(<ccuda.CUarray*>pPlaneArray, <ccuda.CUarray>hArray, planeIdx)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuArrayGetPlane(((__pyx_t_4cuda_5ccuda_CUarray *)__pyx_v_pPlaneArray), ((__pyx_t_4cuda_5ccuda_CUarray)__pyx_v_hArray), __pyx_v_planeIdx); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1095, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1096
 *         return err
 *     err = <cudaError_t>ccuda._cuArrayGetPlane(<ccuda.CUarray*>pPlaneArray, <ccuda.CUarray>hArray, planeIdx)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1097
 *     err = <cudaError_t>ccuda._cuArrayGetPlane(<ccuda.CUarray*>pPlaneArray, <ccuda.CUarray>hArray, planeIdx)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1096
 *         return err
 *     err = <cudaError_t>ccuda._cuArrayGetPlane(<ccuda.CUarray*>pPlaneArray, <ccuda.CUarray>hArray, planeIdx)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1098
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaArray_t array, int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1090
 *     return _cudaArrayGetInfo(desc, extent, flags, array)
 * 
 * cdef cudaError_t cudaArrayGetPlane(cudaArray_t* pPlaneArray, cudaArray_t hArray, unsigned int planeIdx) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaArrayGetPlane", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1100
 *     return err
 * 
 * cdef cudaError_t cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaArray_t array, int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaArrayGetMemoryRequirements(memoryRequirements, array, device)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaArrayGetMemoryRequirements(struct __pyx_t_4cuda_7ccudart_cudaArrayMemoryRequirements *__pyx_v_memoryRequirements, __pyx_t_4cuda_7ccudart_cudaArray_t __pyx_v_array, int __pyx_v_device) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaArrayGetMemoryRequirements", __pyx_f[0], 1100, 1, __PYX_ERR(0, 1100, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1101
 * 
 * cdef cudaError_t cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaArray_t array, int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaArrayGetMemoryRequirements(memoryRequirements, array, device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaMipmappedArray_t mipmap, int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetMemoryRequirements(__pyx_v_memoryRequirements, __pyx_v_array, __pyx_v_device); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1101, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1100
 *     return err
 * 
 * cdef cudaError_t cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaArray_t array, int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaArrayGetMemoryRequirements(memoryRequirements, array, device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaArrayGetMemoryRequirements", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1103
 *     return _cudaArrayGetMemoryRequirements(memoryRequirements, array, device)
 * 
 * cdef cudaError_t cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaMipmappedArray_t mipmap, int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMipmappedArrayGetMemoryRequirements(memoryRequirements, mipmap, device)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMipmappedArrayGetMemoryRequirements(struct __pyx_t_4cuda_7ccudart_cudaArrayMemoryRequirements *__pyx_v_memoryRequirements, __pyx_t_4cuda_7ccudart_cudaMipmappedArray_t __pyx_v_mipmap, int __pyx_v_device) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMipmappedArrayGetMemoryRequirements", __pyx_f[0], 1103, 1, __PYX_ERR(0, 1103, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1104
 * 
 * cdef cudaError_t cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaMipmappedArray_t mipmap, int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMipmappedArrayGetMemoryRequirements(memoryRequirements, mipmap, device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaArray_t array) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMipmappedArrayGetMemoryRequirements(__pyx_v_memoryRequirements, __pyx_v_mipmap, __pyx_v_device); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1104, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1103
 *     return _cudaArrayGetMemoryRequirements(memoryRequirements, array, device)
 * 
 * cdef cudaError_t cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaMipmappedArray_t mipmap, int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMipmappedArrayGetMemoryRequirements(memoryRequirements, mipmap, device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMipmappedArrayGetMemoryRequirements", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1106
 *     return _cudaMipmappedArrayGetMemoryRequirements(memoryRequirements, mipmap, device)
 * 
 * cdef cudaError_t cudaArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaArray_t array) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaArrayGetSparseProperties(sparseProperties, array)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaArrayGetSparseProperties(struct __pyx_t_4cuda_7ccudart_cudaArraySparseProperties *__pyx_v_sparseProperties, __pyx_t_4cuda_7ccudart_cudaArray_t __pyx_v_array) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaArrayGetSparseProperties", __pyx_f[0], 1106, 1, __PYX_ERR(0, 1106, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1107
 * 
 * cdef cudaError_t cudaArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaArray_t array) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaArrayGetSparseProperties(sparseProperties, array)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaMipmappedArray_t mipmap) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetSparseProperties(__pyx_v_sparseProperties, __pyx_v_array); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1107, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1106
 *     return _cudaMipmappedArrayGetMemoryRequirements(memoryRequirements, mipmap, device)
 * 
 * cdef cudaError_t cudaArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaArray_t array) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaArrayGetSparseProperties(sparseProperties, array)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaArrayGetSparseProperties", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1109
 *     return _cudaArrayGetSparseProperties(sparseProperties, array)
 * 
 * cdef cudaError_t cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaMipmappedArray_t mipmap) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMipmappedArrayGetSparseProperties(sparseProperties, mipmap)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMipmappedArrayGetSparseProperties(struct __pyx_t_4cuda_7ccudart_cudaArraySparseProperties *__pyx_v_sparseProperties, __pyx_t_4cuda_7ccudart_cudaMipmappedArray_t __pyx_v_mipmap) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMipmappedArrayGetSparseProperties", __pyx_f[0], 1109, 1, __PYX_ERR(0, 1109, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1110
 * 
 * cdef cudaError_t cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaMipmappedArray_t mipmap) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMipmappedArrayGetSparseProperties(sparseProperties, mipmap)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy(void* dst, const void* src, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMipmappedArrayGetSparseProperties(__pyx_v_sparseProperties, __pyx_v_mipmap); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1110, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1109
 *     return _cudaArrayGetSparseProperties(sparseProperties, array)
 * 
 * cdef cudaError_t cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaMipmappedArray_t mipmap) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMipmappedArrayGetSparseProperties(sparseProperties, mipmap)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMipmappedArrayGetSparseProperties", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1112
 *     return _cudaMipmappedArrayGetSparseProperties(sparseProperties, mipmap)
 * 
 * cdef cudaError_t cudaMemcpy(void* dst, const void* src, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy(dst, src, count, kind)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy(void *__pyx_v_dst, void const *__pyx_v_src, size_t __pyx_v_count, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind __pyx_v_kind) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemcpy", __pyx_f[0], 1112, 1, __PYX_ERR(0, 1112, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1113
 * 
 * cdef cudaError_t cudaMemcpy(void* dst, const void* src, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemcpy(dst, src, count, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpyPeer(void* dst, int dstDevice, const void* src, int srcDevice, size_t count) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy(__pyx_v_dst, __pyx_v_src, __pyx_v_count, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1113, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1112
 *     return _cudaMipmappedArrayGetSparseProperties(sparseProperties, mipmap)
 * 
 * cdef cudaError_t cudaMemcpy(void* dst, const void* src, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy(dst, src, count, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1115
 *     return _cudaMemcpy(dst, src, count, kind)
 * 
 * cdef cudaError_t cudaMemcpyPeer(void* dst, int dstDevice, const void* src, int srcDevice, size_t count) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyPeer(dst, dstDevice, src, srcDevice, count)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpyPeer(void *__pyx_v_dst, int __pyx_v_dstDevice, void const *__pyx_v_src, int __pyx_v_srcDevice, size_t __pyx_v_count) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemcpyPeer", __pyx_f[0], 1115, 1, __PYX_ERR(0, 1115, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1116
 * 
 * cdef cudaError_t cudaMemcpyPeer(void* dst, int dstDevice, const void* src, int srcDevice, size_t count) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemcpyPeer(dst, dstDevice, src, srcDevice, count)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy2D(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyPeer(__pyx_v_dst, __pyx_v_dstDevice, __pyx_v_src, __pyx_v_srcDevice, __pyx_v_count); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1116, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1115
 *     return _cudaMemcpy(dst, src, count, kind)
 * 
 * cdef cudaError_t cudaMemcpyPeer(void* dst, int dstDevice, const void* src, int srcDevice, size_t count) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyPeer(dst, dstDevice, src, srcDevice, count)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemcpyPeer", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1118
 *     return _cudaMemcpyPeer(dst, dstDevice, src, srcDevice, count)
 * 
 * cdef cudaError_t cudaMemcpy2D(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2D(dst, dpitch, src, spitch, width, height, kind)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy2D(void *__pyx_v_dst, size_t __pyx_v_dpitch, void const *__pyx_v_src, size_t __pyx_v_spitch, size_t __pyx_v_width, size_t __pyx_v_height, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind __pyx_v_kind) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemcpy2D", __pyx_f[0], 1118, 1, __PYX_ERR(0, 1118, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1119
 * 
 * cdef cudaError_t cudaMemcpy2D(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemcpy2D(dst, dpitch, src, spitch, width, height, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2D(__pyx_v_dst, __pyx_v_dpitch, __pyx_v_src, __pyx_v_spitch, __pyx_v_width, __pyx_v_height, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1119, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1118
 *     return _cudaMemcpyPeer(dst, dstDevice, src, srcDevice, count)
 * 
 * cdef cudaError_t cudaMemcpy2D(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2D(dst, dpitch, src, spitch, width, height, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy2D", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1121
 *     return _cudaMemcpy2D(dst, dpitch, src, spitch, width, height, kind)
 * 
 * cdef cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DToArray(dst, wOffset, hOffset, src, spitch, width, height, kind)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy2DToArray(__pyx_t_4cuda_7ccudart_cudaArray_t __pyx_v_dst, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, void const *__pyx_v_src, size_t __pyx_v_spitch, size_t __pyx_v_width, size_t __pyx_v_height, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind __pyx_v_kind) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemcpy2DToArray", __pyx_f[0], 1121, 1, __PYX_ERR(0, 1121, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1122
 * 
 * cdef cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemcpy2DToArray(dst, wOffset, hOffset, src, spitch, width, height, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy2DFromArray(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DToArray(__pyx_v_dst, __pyx_v_wOffset, __pyx_v_hOffset, __pyx_v_src, __pyx_v_spitch, __pyx_v_width, __pyx_v_height, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1122, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1121
 *     return _cudaMemcpy2D(dst, dpitch, src, spitch, width, height, kind)
 * 
 * cdef cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DToArray(dst, wOffset, hOffset, src, spitch, width, height, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy2DToArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1124
 *     return _cudaMemcpy2DToArray(dst, wOffset, hOffset, src, spitch, width, height, kind)
 * 
 * cdef cudaError_t cudaMemcpy2DFromArray(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DFromArray(dst, dpitch, src, wOffset, hOffset, width, height, kind)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy2DFromArray(void *__pyx_v_dst, size_t __pyx_v_dpitch, __pyx_t_4cuda_7ccudart_cudaArray_const_t __pyx_v_src, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, size_t __pyx_v_width, size_t __pyx_v_height, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind __pyx_v_kind) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemcpy2DFromArray", __pyx_f[0], 1124, 1, __PYX_ERR(0, 1124, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1125
 * 
 * cdef cudaError_t cudaMemcpy2DFromArray(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemcpy2DFromArray(dst, dpitch, src, wOffset, hOffset, width, height, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DFromArray(__pyx_v_dst, __pyx_v_dpitch, __pyx_v_src, __pyx_v_wOffset, __pyx_v_hOffset, __pyx_v_width, __pyx_v_height, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1125, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1124
 *     return _cudaMemcpy2DToArray(dst, wOffset, hOffset, src, spitch, width, height, kind)
 * 
 * cdef cudaError_t cudaMemcpy2DFromArray(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DFromArray(dst, dpitch, src, wOffset, hOffset, width, height, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy2DFromArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1127
 *     return _cudaMemcpy2DFromArray(dst, dpitch, src, wOffset, hOffset, width, height, kind)
 * 
 * cdef cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, width, height, kind)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy2DArrayToArray(__pyx_t_4cuda_7ccudart_cudaArray_t __pyx_v_dst, size_t __pyx_v_wOffsetDst, size_t __pyx_v_hOffsetDst, __pyx_t_4cuda_7ccudart_cudaArray_const_t __pyx_v_src, size_t __pyx_v_wOffsetSrc, size_t __pyx_v_hOffsetSrc, size_t __pyx_v_width, size_t __pyx_v_height, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind __pyx_v_kind) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemcpy2DArrayToArray", __pyx_f[0], 1127, 1, __PYX_ERR(0, 1127, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1128
 * 
 * cdef cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemcpy2DArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, width, height, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpyAsync(void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DArrayToArray(__pyx_v_dst, __pyx_v_wOffsetDst, __pyx_v_hOffsetDst, __pyx_v_src, __pyx_v_wOffsetSrc, __pyx_v_hOffsetSrc, __pyx_v_width, __pyx_v_height, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1128, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1127
 *     return _cudaMemcpy2DFromArray(dst, dpitch, src, wOffset, hOffset, width, height, kind)
 * 
 * cdef cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, width, height, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy2DArrayToArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1130
 *     return _cudaMemcpy2DArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, width, height, kind)
 * 
 * cdef cudaError_t cudaMemcpyAsync(void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyAsync(dst, src, count, kind, stream)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpyAsync(void *__pyx_v_dst, void const *__pyx_v_src, size_t __pyx_v_count, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind __pyx_v_kind, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemcpyAsync", __pyx_f[0], 1130, 1, __PYX_ERR(0, 1130, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1131
 * 
 * cdef cudaError_t cudaMemcpyAsync(void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemcpyAsync(dst, src, count, kind, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpyPeerAsync(void* dst, int dstDevice, const void* src, int srcDevice, size_t count, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyAsync(__pyx_v_dst, __pyx_v_src, __pyx_v_count, __pyx_v_kind, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1131, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1130
 *     return _cudaMemcpy2DArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, width, height, kind)
 * 
 * cdef cudaError_t cudaMemcpyAsync(void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyAsync(dst, src, count, kind, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemcpyAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1133
 *     return _cudaMemcpyAsync(dst, src, count, kind, stream)
 * 
 * cdef cudaError_t cudaMemcpyPeerAsync(void* dst, int dstDevice, const void* src, int srcDevice, size_t count, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyPeerAsync(dst, dstDevice, src, srcDevice, count, stream)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpyPeerAsync(void *__pyx_v_dst, int __pyx_v_dstDevice, void const *__pyx_v_src, int __pyx_v_srcDevice, size_t __pyx_v_count, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemcpyPeerAsync", __pyx_f[0], 1133, 1, __PYX_ERR(0, 1133, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1134
 * 
 * cdef cudaError_t cudaMemcpyPeerAsync(void* dst, int dstDevice, const void* src, int srcDevice, size_t count, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemcpyPeerAsync(dst, dstDevice, src, srcDevice, count, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy2DAsync(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyPeerAsync(__pyx_v_dst, __pyx_v_dstDevice, __pyx_v_src, __pyx_v_srcDevice, __pyx_v_count, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1134, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1133
 *     return _cudaMemcpyAsync(dst, src, count, kind, stream)
 * 
 * cdef cudaError_t cudaMemcpyPeerAsync(void* dst, int dstDevice, const void* src, int srcDevice, size_t count, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyPeerAsync(dst, dstDevice, src, srcDevice, count, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemcpyPeerAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1136
 *     return _cudaMemcpyPeerAsync(dst, dstDevice, src, srcDevice, count, stream)
 * 
 * cdef cudaError_t cudaMemcpy2DAsync(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DAsync(dst, dpitch, src, spitch, width, height, kind, stream)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy2DAsync(void *__pyx_v_dst, size_t __pyx_v_dpitch, void const *__pyx_v_src, size_t __pyx_v_spitch, size_t __pyx_v_width, size_t __pyx_v_height, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind __pyx_v_kind, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemcpy2DAsync", __pyx_f[0], 1136, 1, __PYX_ERR(0, 1136, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1137
 * 
 * cdef cudaError_t cudaMemcpy2DAsync(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemcpy2DAsync(dst, dpitch, src, spitch, width, height, kind, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DAsync(__pyx_v_dst, __pyx_v_dpitch, __pyx_v_src, __pyx_v_spitch, __pyx_v_width, __pyx_v_height, __pyx_v_kind, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1137, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1136
 *     return _cudaMemcpyPeerAsync(dst, dstDevice, src, srcDevice, count, stream)
 * 
 * cdef cudaError_t cudaMemcpy2DAsync(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DAsync(dst, dpitch, src, spitch, width, height, kind, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy2DAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1139
 *     return _cudaMemcpy2DAsync(dst, dpitch, src, spitch, width, height, kind, stream)
 * 
 * cdef cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DToArrayAsync(dst, wOffset, hOffset, src, spitch, width, height, kind, stream)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy2DToArrayAsync(__pyx_t_4cuda_7ccudart_cudaArray_t __pyx_v_dst, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, void const *__pyx_v_src, size_t __pyx_v_spitch, size_t __pyx_v_width, size_t __pyx_v_height, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind __pyx_v_kind, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemcpy2DToArrayAsync", __pyx_f[0], 1139, 1, __PYX_ERR(0, 1139, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1140
 * 
 * cdef cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemcpy2DToArrayAsync(dst, wOffset, hOffset, src, spitch, width, height, kind, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy2DFromArrayAsync(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DToArrayAsync(__pyx_v_dst, __pyx_v_wOffset, __pyx_v_hOffset, __pyx_v_src, __pyx_v_spitch, __pyx_v_width, __pyx_v_height, __pyx_v_kind, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1140, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1139
 *     return _cudaMemcpy2DAsync(dst, dpitch, src, spitch, width, height, kind, stream)
 * 
 * cdef cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DToArrayAsync(dst, wOffset, hOffset, src, spitch, width, height, kind, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy2DToArrayAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1142
 *     return _cudaMemcpy2DToArrayAsync(dst, wOffset, hOffset, src, spitch, width, height, kind, stream)
 * 
 * cdef cudaError_t cudaMemcpy2DFromArrayAsync(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DFromArrayAsync(dst, dpitch, src, wOffset, hOffset, width, height, kind, stream)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy2DFromArrayAsync(void *__pyx_v_dst, size_t __pyx_v_dpitch, __pyx_t_4cuda_7ccudart_cudaArray_const_t __pyx_v_src, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, size_t __pyx_v_width, size_t __pyx_v_height, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind __pyx_v_kind, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemcpy2DFromArrayAsync", __pyx_f[0], 1142, 1, __PYX_ERR(0, 1142, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1143
 * 
 * cdef cudaError_t cudaMemcpy2DFromArrayAsync(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemcpy2DFromArrayAsync(dst, dpitch, src, wOffset, hOffset, width, height, kind, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemset(void* devPtr, int value, size_t count) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DFromArrayAsync(__pyx_v_dst, __pyx_v_dpitch, __pyx_v_src, __pyx_v_wOffset, __pyx_v_hOffset, __pyx_v_width, __pyx_v_height, __pyx_v_kind, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1143, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1142
 *     return _cudaMemcpy2DToArrayAsync(dst, wOffset, hOffset, src, spitch, width, height, kind, stream)
 * 
 * cdef cudaError_t cudaMemcpy2DFromArrayAsync(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DFromArrayAsync(dst, dpitch, src, wOffset, hOffset, width, height, kind, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy2DFromArrayAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1145
 *     return _cudaMemcpy2DFromArrayAsync(dst, dpitch, src, wOffset, hOffset, width, height, kind, stream)
 * 
 * cdef cudaError_t cudaMemset(void* devPtr, int value, size_t count) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemset(void *__pyx_v_devPtr, int __pyx_v_value, size_t __pyx_v_count) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemset", __pyx_f[0], 1145, 1, __PYX_ERR(0, 1145, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1147
 * cdef cudaError_t cudaMemset(void* devPtr, int value, size_t count) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1148
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemsetD8_v2(<ccuda.CUdeviceptr>devPtr, <unsigned char>value, count)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1149
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemsetD8_v2(<ccuda.CUdeviceptr>devPtr, <unsigned char>value, count)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1148
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemsetD8_v2(<ccuda.CUdeviceptr>devPtr, <unsigned char>value, count)
 */
  }

  /* "cuda/ccudart.pyx":1150
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemsetD8_v2(<ccuda.CUdeviceptr>devPtr, <unsigned char>value, count)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemsetD8_v2(((__pyx_t_4cuda_5ccuda_CUdeviceptr)__pyx_v_devPtr), ((unsigned char)__pyx_v_value), __pyx_v_count); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1150, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1151
 *         return err
 *     err = <cudaError_t>ccuda._cuMemsetD8_v2(<ccuda.CUdeviceptr>devPtr, <unsigned char>value, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1152
 *     err = <cudaError_t>ccuda._cuMemsetD8_v2(<ccuda.CUdeviceptr>devPtr, <unsigned char>value, count)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1151
 *         return err
 *     err = <cudaError_t>ccuda._cuMemsetD8_v2(<ccuda.CUdeviceptr>devPtr, <unsigned char>value, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1153
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemset2D(void* devPtr, size_t pitch, int value, size_t width, size_t height) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1145
 *     return _cudaMemcpy2DFromArrayAsync(dst, dpitch, src, wOffset, hOffset, width, height, kind, stream)
 * 
 * cdef cudaError_t cudaMemset(void* devPtr, int value, size_t count) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemset", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1155
 *     return err
 * 
 * cdef cudaError_t cudaMemset2D(void* devPtr, size_t pitch, int value, size_t width, size_t height) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemset2D(void *__pyx_v_devPtr, size_t __pyx_v_pitch, int __pyx_v_value, size_t __pyx_v_width, size_t __pyx_v_height) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemset2D", __pyx_f[0], 1155, 1, __PYX_ERR(0, 1155, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1157
 * cdef cudaError_t cudaMemset2D(void* devPtr, size_t pitch, int value, size_t width, size_t height) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1158
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemsetD2D8_v2(<ccuda.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1159
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemsetD2D8_v2(<ccuda.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1158
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemsetD2D8_v2(<ccuda.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height)
 */
  }

  /* "cuda/ccudart.pyx":1160
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemsetD2D8_v2(<ccuda.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemsetD2D8_v2(((__pyx_t_4cuda_5ccuda_CUdeviceptr)__pyx_v_devPtr), __pyx_v_pitch, ((unsigned char)__pyx_v_value), __pyx_v_width, __pyx_v_height); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1160, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1161
 *         return err
 *     err = <cudaError_t>ccuda._cuMemsetD2D8_v2(<ccuda.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1162
 *     err = <cudaError_t>ccuda._cuMemsetD2D8_v2(<ccuda.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1161
 *         return err
 *     err = <cudaError_t>ccuda._cuMemsetD2D8_v2(<ccuda.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1163
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1155
 *     return err
 * 
 * cdef cudaError_t cudaMemset2D(void* devPtr, size_t pitch, int value, size_t width, size_t height) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemset2D", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1165
 *     return err
 * 
 * cdef cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemset3D(pitchedDevPtr, value, extent)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemset3D(struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr __pyx_v_pitchedDevPtr, int __pyx_v_value, struct __pyx_t_4cuda_7ccudart_cudaExtent __pyx_v_extent) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemset3D", __pyx_f[0], 1165, 1, __PYX_ERR(0, 1165, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1166
 * 
 * cdef cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemset3D(pitchedDevPtr, value, extent)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemsetAsync(void* devPtr, int value, size_t count, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset3D(__pyx_v_pitchedDevPtr, __pyx_v_value, __pyx_v_extent); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1166, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1165
 *     return err
 * 
 * cdef cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemset3D(pitchedDevPtr, value, extent)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemset3D", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1168
 *     return _cudaMemset3D(pitchedDevPtr, value, extent)
 * 
 * cdef cudaError_t cudaMemsetAsync(void* devPtr, int value, size_t count, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemsetAsync(void *__pyx_v_devPtr, int __pyx_v_value, size_t __pyx_v_count, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemsetAsync", __pyx_f[0], 1168, 1, __PYX_ERR(0, 1168, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1170
 * cdef cudaError_t cudaMemsetAsync(void* devPtr, int value, size_t count, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1171
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemsetD8Async(<ccuda.CUdeviceptr>devPtr, <unsigned char>value, count, <ccuda.CUstream>stream)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1172
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemsetD8Async(<ccuda.CUdeviceptr>devPtr, <unsigned char>value, count, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1171
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemsetD8Async(<ccuda.CUdeviceptr>devPtr, <unsigned char>value, count, <ccuda.CUstream>stream)
 */
  }

  /* "cuda/ccudart.pyx":1173
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemsetD8Async(<ccuda.CUdeviceptr>devPtr, <unsigned char>value, count, <ccuda.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemsetD8Async(((__pyx_t_4cuda_5ccuda_CUdeviceptr)__pyx_v_devPtr), ((unsigned char)__pyx_v_value), __pyx_v_count, ((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1173, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1174
 *         return err
 *     err = <cudaError_t>ccuda._cuMemsetD8Async(<ccuda.CUdeviceptr>devPtr, <unsigned char>value, count, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1175
 *     err = <cudaError_t>ccuda._cuMemsetD8Async(<ccuda.CUdeviceptr>devPtr, <unsigned char>value, count, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1174
 *         return err
 *     err = <cudaError_t>ccuda._cuMemsetD8Async(<ccuda.CUdeviceptr>devPtr, <unsigned char>value, count, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1176
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemset2DAsync(void* devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1168
 *     return _cudaMemset3D(pitchedDevPtr, value, extent)
 * 
 * cdef cudaError_t cudaMemsetAsync(void* devPtr, int value, size_t count, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemsetAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1178
 *     return err
 * 
 * cdef cudaError_t cudaMemset2DAsync(void* devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemset2DAsync(void *__pyx_v_devPtr, size_t __pyx_v_pitch, int __pyx_v_value, size_t __pyx_v_width, size_t __pyx_v_height, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemset2DAsync", __pyx_f[0], 1178, 1, __PYX_ERR(0, 1178, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1180
 * cdef cudaError_t cudaMemset2DAsync(void* devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1181
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemsetD2D8Async(<ccuda.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height, <ccuda.CUstream>stream)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1182
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemsetD2D8Async(<ccuda.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1181
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemsetD2D8Async(<ccuda.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height, <ccuda.CUstream>stream)
 */
  }

  /* "cuda/ccudart.pyx":1183
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemsetD2D8Async(<ccuda.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height, <ccuda.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemsetD2D8Async(((__pyx_t_4cuda_5ccuda_CUdeviceptr)__pyx_v_devPtr), __pyx_v_pitch, ((unsigned char)__pyx_v_value), __pyx_v_width, __pyx_v_height, ((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1183, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1184
 *         return err
 *     err = <cudaError_t>ccuda._cuMemsetD2D8Async(<ccuda.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1185
 *     err = <cudaError_t>ccuda._cuMemsetD2D8Async(<ccuda.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1184
 *         return err
 *     err = <cudaError_t>ccuda._cuMemsetD2D8Async(<ccuda.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1186
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1178
 *     return err
 * 
 * cdef cudaError_t cudaMemset2DAsync(void* devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemset2DAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1188
 *     return err
 * 
 * cdef cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemset3DAsync(pitchedDevPtr, value, extent, stream)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemset3DAsync(struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr __pyx_v_pitchedDevPtr, int __pyx_v_value, struct __pyx_t_4cuda_7ccudart_cudaExtent __pyx_v_extent, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemset3DAsync", __pyx_f[0], 1188, 1, __PYX_ERR(0, 1188, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1189
 * 
 * cdef cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemset3DAsync(pitchedDevPtr, value, extent, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPrefetchAsync(const void* devPtr, size_t count, int dstDevice, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset3DAsync(__pyx_v_pitchedDevPtr, __pyx_v_value, __pyx_v_extent, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1189, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1188
 *     return err
 * 
 * cdef cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemset3DAsync(pitchedDevPtr, value, extent, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemset3DAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1191
 *     return _cudaMemset3DAsync(pitchedDevPtr, value, extent, stream)
 * 
 * cdef cudaError_t cudaMemPrefetchAsync(const void* devPtr, size_t count, int dstDevice, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPrefetchAsync(void const *__pyx_v_devPtr, size_t __pyx_v_count, int __pyx_v_dstDevice, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemPrefetchAsync", __pyx_f[0], 1191, 1, __PYX_ERR(0, 1191, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1193
 * cdef cudaError_t cudaMemPrefetchAsync(const void* devPtr, size_t count, int dstDevice, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1194
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPrefetchAsync(<ccuda.CUdeviceptr>devPtr, count, <ccuda.CUdevice>dstDevice, <ccuda.CUstream>stream)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1195
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemPrefetchAsync(<ccuda.CUdeviceptr>devPtr, count, <ccuda.CUdevice>dstDevice, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1194
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPrefetchAsync(<ccuda.CUdeviceptr>devPtr, count, <ccuda.CUdevice>dstDevice, <ccuda.CUstream>stream)
 */
  }

  /* "cuda/ccudart.pyx":1196
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPrefetchAsync(<ccuda.CUdeviceptr>devPtr, count, <ccuda.CUdevice>dstDevice, <ccuda.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemPrefetchAsync(((__pyx_t_4cuda_5ccuda_CUdeviceptr)__pyx_v_devPtr), __pyx_v_count, ((__pyx_t_4cuda_5ccuda_CUdevice)__pyx_v_dstDevice), ((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1196, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1197
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPrefetchAsync(<ccuda.CUdeviceptr>devPtr, count, <ccuda.CUdevice>dstDevice, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1198
 *     err = <cudaError_t>ccuda._cuMemPrefetchAsync(<ccuda.CUdeviceptr>devPtr, count, <ccuda.CUdevice>dstDevice, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1197
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPrefetchAsync(<ccuda.CUdeviceptr>devPtr, count, <ccuda.CUdevice>dstDevice, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1199
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemAdvise(const void* devPtr, size_t count, cudaMemoryAdvise advice, int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1191
 *     return _cudaMemset3DAsync(pitchedDevPtr, value, extent, stream)
 * 
 * cdef cudaError_t cudaMemPrefetchAsync(const void* devPtr, size_t count, int dstDevice, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemPrefetchAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1201
 *     return err
 * 
 * cdef cudaError_t cudaMemAdvise(const void* devPtr, size_t count, cudaMemoryAdvise advice, int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemAdvise(devPtr, count, advice, device)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemAdvise(void const *__pyx_v_devPtr, size_t __pyx_v_count, enum __pyx_t_4cuda_7ccudart_cudaMemoryAdvise __pyx_v_advice, int __pyx_v_device) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemAdvise", __pyx_f[0], 1201, 1, __PYX_ERR(0, 1201, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1202
 * 
 * cdef cudaError_t cudaMemAdvise(const void* devPtr, size_t count, cudaMemoryAdvise advice, int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemAdvise(devPtr, count, advice, device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemRangeGetAttribute(void* data, size_t dataSize, cudaMemRangeAttribute attribute, const void* devPtr, size_t count) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemAdvise(__pyx_v_devPtr, __pyx_v_count, __pyx_v_advice, __pyx_v_device); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1202, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1201
 *     return err
 * 
 * cdef cudaError_t cudaMemAdvise(const void* devPtr, size_t count, cudaMemoryAdvise advice, int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemAdvise(devPtr, count, advice, device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemAdvise", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1204
 *     return _cudaMemAdvise(devPtr, count, advice, device)
 * 
 * cdef cudaError_t cudaMemRangeGetAttribute(void* data, size_t dataSize, cudaMemRangeAttribute attribute, const void* devPtr, size_t count) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemRangeGetAttribute(data, dataSize, attribute, devPtr, count)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemRangeGetAttribute(void *__pyx_v_data, size_t __pyx_v_dataSize, enum __pyx_t_4cuda_7ccudart_cudaMemRangeAttribute __pyx_v_attribute, void const *__pyx_v_devPtr, size_t __pyx_v_count) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemRangeGetAttribute", __pyx_f[0], 1204, 1, __PYX_ERR(0, 1204, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1205
 * 
 * cdef cudaError_t cudaMemRangeGetAttribute(void* data, size_t dataSize, cudaMemRangeAttribute attribute, const void* devPtr, size_t count) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemRangeGetAttribute(data, dataSize, attribute, devPtr, count)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemRangeGetAttributes(void** data, size_t* dataSizes, cudaMemRangeAttribute* attributes, size_t numAttributes, const void* devPtr, size_t count) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemRangeGetAttribute(__pyx_v_data, __pyx_v_dataSize, __pyx_v_attribute, __pyx_v_devPtr, __pyx_v_count); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1205, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1204
 *     return _cudaMemAdvise(devPtr, count, advice, device)
 * 
 * cdef cudaError_t cudaMemRangeGetAttribute(void* data, size_t dataSize, cudaMemRangeAttribute attribute, const void* devPtr, size_t count) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemRangeGetAttribute(data, dataSize, attribute, devPtr, count)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemRangeGetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1207
 *     return _cudaMemRangeGetAttribute(data, dataSize, attribute, devPtr, count)
 * 
 * cdef cudaError_t cudaMemRangeGetAttributes(void** data, size_t* dataSizes, cudaMemRangeAttribute* attributes, size_t numAttributes, const void* devPtr, size_t count) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemRangeGetAttributes(data, dataSizes, attributes, numAttributes, devPtr, count)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemRangeGetAttributes(void **__pyx_v_data, size_t *__pyx_v_dataSizes, enum __pyx_t_4cuda_7ccudart_cudaMemRangeAttribute *__pyx_v_attributes, size_t __pyx_v_numAttributes, void const *__pyx_v_devPtr, size_t __pyx_v_count) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemRangeGetAttributes", __pyx_f[0], 1207, 1, __PYX_ERR(0, 1207, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1208
 * 
 * cdef cudaError_t cudaMemRangeGetAttributes(void** data, size_t* dataSizes, cudaMemRangeAttribute* attributes, size_t numAttributes, const void* devPtr, size_t count) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemRangeGetAttributes(data, dataSizes, attributes, numAttributes, devPtr, count)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemRangeGetAttributes(__pyx_v_data, __pyx_v_dataSizes, __pyx_v_attributes, __pyx_v_numAttributes, __pyx_v_devPtr, __pyx_v_count); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1208, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1207
 *     return _cudaMemRangeGetAttribute(data, dataSize, attribute, devPtr, count)
 * 
 * cdef cudaError_t cudaMemRangeGetAttributes(void** data, size_t* dataSizes, cudaMemRangeAttribute* attributes, size_t numAttributes, const void* devPtr, size_t count) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemRangeGetAttributes(data, dataSizes, attributes, numAttributes, devPtr, count)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemRangeGetAttributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1210
 *     return _cudaMemRangeGetAttributes(data, dataSizes, attributes, numAttributes, devPtr, count)
 * 
 * cdef cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyToArray(dst, wOffset, hOffset, src, count, kind)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpyToArray(__pyx_t_4cuda_7ccudart_cudaArray_t __pyx_v_dst, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, void const *__pyx_v_src, size_t __pyx_v_count, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind __pyx_v_kind) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemcpyToArray", __pyx_f[0], 1210, 1, __PYX_ERR(0, 1210, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1211
 * 
 * cdef cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemcpyToArray(dst, wOffset, hOffset, src, count, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpyFromArray(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyToArray(__pyx_v_dst, __pyx_v_wOffset, __pyx_v_hOffset, __pyx_v_src, __pyx_v_count, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1211, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1210
 *     return _cudaMemRangeGetAttributes(data, dataSizes, attributes, numAttributes, devPtr, count)
 * 
 * cdef cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyToArray(dst, wOffset, hOffset, src, count, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemcpyToArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1213
 *     return _cudaMemcpyToArray(dst, wOffset, hOffset, src, count, kind)
 * 
 * cdef cudaError_t cudaMemcpyFromArray(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyFromArray(dst, src, wOffset, hOffset, count, kind)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpyFromArray(void *__pyx_v_dst, __pyx_t_4cuda_7ccudart_cudaArray_const_t __pyx_v_src, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, size_t __pyx_v_count, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind __pyx_v_kind) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemcpyFromArray", __pyx_f[0], 1213, 1, __PYX_ERR(0, 1213, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1214
 * 
 * cdef cudaError_t cudaMemcpyFromArray(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemcpyFromArray(dst, src, wOffset, hOffset, count, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyFromArray(__pyx_v_dst, __pyx_v_src, __pyx_v_wOffset, __pyx_v_hOffset, __pyx_v_count, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1214, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1213
 *     return _cudaMemcpyToArray(dst, wOffset, hOffset, src, count, kind)
 * 
 * cdef cudaError_t cudaMemcpyFromArray(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyFromArray(dst, src, wOffset, hOffset, count, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemcpyFromArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1216
 *     return _cudaMemcpyFromArray(dst, src, wOffset, hOffset, count, kind)
 * 
 * cdef cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, count, kind)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpyArrayToArray(__pyx_t_4cuda_7ccudart_cudaArray_t __pyx_v_dst, size_t __pyx_v_wOffsetDst, size_t __pyx_v_hOffsetDst, __pyx_t_4cuda_7ccudart_cudaArray_const_t __pyx_v_src, size_t __pyx_v_wOffsetSrc, size_t __pyx_v_hOffsetSrc, size_t __pyx_v_count, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind __pyx_v_kind) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemcpyArrayToArray", __pyx_f[0], 1216, 1, __PYX_ERR(0, 1216, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1217
 * 
 * cdef cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemcpyArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, count, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyArrayToArray(__pyx_v_dst, __pyx_v_wOffsetDst, __pyx_v_hOffsetDst, __pyx_v_src, __pyx_v_wOffsetSrc, __pyx_v_hOffsetSrc, __pyx_v_count, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1217, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1216
 *     return _cudaMemcpyFromArray(dst, src, wOffset, hOffset, count, kind)
 * 
 * cdef cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, count, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemcpyArrayToArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1219
 *     return _cudaMemcpyArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, count, kind)
 * 
 * cdef cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyToArrayAsync(dst, wOffset, hOffset, src, count, kind, stream)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpyToArrayAsync(__pyx_t_4cuda_7ccudart_cudaArray_t __pyx_v_dst, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, void const *__pyx_v_src, size_t __pyx_v_count, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind __pyx_v_kind, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemcpyToArrayAsync", __pyx_f[0], 1219, 1, __PYX_ERR(0, 1219, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1220
 * 
 * cdef cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemcpyToArrayAsync(dst, wOffset, hOffset, src, count, kind, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpyFromArrayAsync(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyToArrayAsync(__pyx_v_dst, __pyx_v_wOffset, __pyx_v_hOffset, __pyx_v_src, __pyx_v_count, __pyx_v_kind, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1220, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1219
 *     return _cudaMemcpyArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, count, kind)
 * 
 * cdef cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyToArrayAsync(dst, wOffset, hOffset, src, count, kind, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemcpyToArrayAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1222
 *     return _cudaMemcpyToArrayAsync(dst, wOffset, hOffset, src, count, kind, stream)
 * 
 * cdef cudaError_t cudaMemcpyFromArrayAsync(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyFromArrayAsync(dst, src, wOffset, hOffset, count, kind, stream)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpyFromArrayAsync(void *__pyx_v_dst, __pyx_t_4cuda_7ccudart_cudaArray_const_t __pyx_v_src, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, size_t __pyx_v_count, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind __pyx_v_kind, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemcpyFromArrayAsync", __pyx_f[0], 1222, 1, __PYX_ERR(0, 1222, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1223
 * 
 * cdef cudaError_t cudaMemcpyFromArrayAsync(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemcpyFromArrayAsync(dst, src, wOffset, hOffset, count, kind, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMallocAsync(void** devPtr, size_t size, cudaStream_t hStream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyFromArrayAsync(__pyx_v_dst, __pyx_v_src, __pyx_v_wOffset, __pyx_v_hOffset, __pyx_v_count, __pyx_v_kind, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1223, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1222
 *     return _cudaMemcpyToArrayAsync(dst, wOffset, hOffset, src, count, kind, stream)
 * 
 * cdef cudaError_t cudaMemcpyFromArrayAsync(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyFromArrayAsync(dst, src, wOffset, hOffset, count, kind, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemcpyFromArrayAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1225
 *     return _cudaMemcpyFromArrayAsync(dst, src, wOffset, hOffset, count, kind, stream)
 * 
 * cdef cudaError_t cudaMallocAsync(void** devPtr, size_t size, cudaStream_t hStream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMallocAsync(void **__pyx_v_devPtr, size_t __pyx_v_size, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_hStream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMallocAsync", __pyx_f[0], 1225, 1, __PYX_ERR(0, 1225, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1227
 * cdef cudaError_t cudaMallocAsync(void** devPtr, size_t size, cudaStream_t hStream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1228
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemAllocAsync(<ccuda.CUdeviceptr*>devPtr, size, <ccuda.CUstream>hStream)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1229
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemAllocAsync(<ccuda.CUdeviceptr*>devPtr, size, <ccuda.CUstream>hStream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1228
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemAllocAsync(<ccuda.CUdeviceptr*>devPtr, size, <ccuda.CUstream>hStream)
 */
  }

  /* "cuda/ccudart.pyx":1230
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemAllocAsync(<ccuda.CUdeviceptr*>devPtr, size, <ccuda.CUstream>hStream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemAllocAsync(((__pyx_t_4cuda_5ccuda_CUdeviceptr *)__pyx_v_devPtr), __pyx_v_size, ((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_hStream)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1230, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1231
 *         return err
 *     err = <cudaError_t>ccuda._cuMemAllocAsync(<ccuda.CUdeviceptr*>devPtr, size, <ccuda.CUstream>hStream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1232
 *     err = <cudaError_t>ccuda._cuMemAllocAsync(<ccuda.CUdeviceptr*>devPtr, size, <ccuda.CUstream>hStream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1231
 *         return err
 *     err = <cudaError_t>ccuda._cuMemAllocAsync(<ccuda.CUdeviceptr*>devPtr, size, <ccuda.CUstream>hStream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1233
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaFreeAsync(void* devPtr, cudaStream_t hStream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1225
 *     return _cudaMemcpyFromArrayAsync(dst, src, wOffset, hOffset, count, kind, stream)
 * 
 * cdef cudaError_t cudaMallocAsync(void** devPtr, size_t size, cudaStream_t hStream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMallocAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1235
 *     return err
 * 
 * cdef cudaError_t cudaFreeAsync(void* devPtr, cudaStream_t hStream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaFreeAsync(void *__pyx_v_devPtr, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_hStream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaFreeAsync", __pyx_f[0], 1235, 1, __PYX_ERR(0, 1235, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1237
 * cdef cudaError_t cudaFreeAsync(void* devPtr, cudaStream_t hStream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1238
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemFreeAsync(<ccuda.CUdeviceptr>devPtr, <ccuda.CUstream>hStream)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1239
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemFreeAsync(<ccuda.CUdeviceptr>devPtr, <ccuda.CUstream>hStream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1238
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemFreeAsync(<ccuda.CUdeviceptr>devPtr, <ccuda.CUstream>hStream)
 */
  }

  /* "cuda/ccudart.pyx":1240
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemFreeAsync(<ccuda.CUdeviceptr>devPtr, <ccuda.CUstream>hStream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemFreeAsync(((__pyx_t_4cuda_5ccuda_CUdeviceptr)__pyx_v_devPtr), ((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_hStream)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1240, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1241
 *         return err
 *     err = <cudaError_t>ccuda._cuMemFreeAsync(<ccuda.CUdeviceptr>devPtr, <ccuda.CUstream>hStream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1242
 *     err = <cudaError_t>ccuda._cuMemFreeAsync(<ccuda.CUdeviceptr>devPtr, <ccuda.CUstream>hStream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1241
 *         return err
 *     err = <cudaError_t>ccuda._cuMemFreeAsync(<ccuda.CUdeviceptr>devPtr, <ccuda.CUstream>hStream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1243
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1235
 *     return err
 * 
 * cdef cudaError_t cudaFreeAsync(void* devPtr, cudaStream_t hStream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaFreeAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1245
 *     return err
 * 
 * cdef cudaError_t cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolTrimTo(__pyx_t_4cuda_7ccudart_cudaMemPool_t __pyx_v_memPool, size_t __pyx_v_minBytesToKeep) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemPoolTrimTo", __pyx_f[0], 1245, 1, __PYX_ERR(0, 1245, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1247
 * cdef cudaError_t cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1248
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolTrimTo(<ccuda.CUmemoryPool>memPool, minBytesToKeep)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1249
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemPoolTrimTo(<ccuda.CUmemoryPool>memPool, minBytesToKeep)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1248
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolTrimTo(<ccuda.CUmemoryPool>memPool, minBytesToKeep)
 */
  }

  /* "cuda/ccudart.pyx":1250
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolTrimTo(<ccuda.CUmemoryPool>memPool, minBytesToKeep)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolTrimTo(((__pyx_t_4cuda_5ccuda_CUmemoryPool)__pyx_v_memPool), __pyx_v_minBytesToKeep); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1250, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1251
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolTrimTo(<ccuda.CUmemoryPool>memPool, minBytesToKeep)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1252
 *     err = <cudaError_t>ccuda._cuMemPoolTrimTo(<ccuda.CUmemoryPool>memPool, minBytesToKeep)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1251
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolTrimTo(<ccuda.CUmemoryPool>memPool, minBytesToKeep)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1253
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1245
 *     return err
 * 
 * cdef cudaError_t cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolTrimTo", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1255
 *     return err
 * 
 * cdef cudaError_t cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolSetAttribute(__pyx_t_4cuda_7ccudart_cudaMemPool_t __pyx_v_memPool, enum __pyx_t_4cuda_7ccudart_cudaMemPoolAttr __pyx_v_attr, void *__pyx_v_value) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemPoolSetAttribute", __pyx_f[0], 1255, 1, __PYX_ERR(0, 1255, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1257
 * cdef cudaError_t cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1258
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolSetAttribute(<ccuda.CUmemoryPool>memPool, <ccuda.CUmemPool_attribute>attr, value)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1259
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemPoolSetAttribute(<ccuda.CUmemoryPool>memPool, <ccuda.CUmemPool_attribute>attr, value)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1258
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolSetAttribute(<ccuda.CUmemoryPool>memPool, <ccuda.CUmemPool_attribute>attr, value)
 */
  }

  /* "cuda/ccudart.pyx":1260
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolSetAttribute(<ccuda.CUmemoryPool>memPool, <ccuda.CUmemPool_attribute>attr, value)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolSetAttribute(((__pyx_t_4cuda_5ccuda_CUmemoryPool)__pyx_v_memPool), ((__pyx_t_4cuda_5ccuda_CUmemPool_attribute)__pyx_v_attr), __pyx_v_value); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1260, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1261
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolSetAttribute(<ccuda.CUmemoryPool>memPool, <ccuda.CUmemPool_attribute>attr, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1262
 *     err = <cudaError_t>ccuda._cuMemPoolSetAttribute(<ccuda.CUmemoryPool>memPool, <ccuda.CUmemPool_attribute>attr, value)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1261
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolSetAttribute(<ccuda.CUmemoryPool>memPool, <ccuda.CUmemPool_attribute>attr, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1263
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1255
 *     return err
 * 
 * cdef cudaError_t cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolSetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1265
 *     return err
 * 
 * cdef cudaError_t cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolGetAttribute(__pyx_t_4cuda_7ccudart_cudaMemPool_t __pyx_v_memPool, enum __pyx_t_4cuda_7ccudart_cudaMemPoolAttr __pyx_v_attr, void *__pyx_v_value) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemPoolGetAttribute", __pyx_f[0], 1265, 1, __PYX_ERR(0, 1265, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1267
 * cdef cudaError_t cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1268
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolGetAttribute(<ccuda.CUmemoryPool>memPool, <ccuda.CUmemPool_attribute>attr, value)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1269
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemPoolGetAttribute(<ccuda.CUmemoryPool>memPool, <ccuda.CUmemPool_attribute>attr, value)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1268
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolGetAttribute(<ccuda.CUmemoryPool>memPool, <ccuda.CUmemPool_attribute>attr, value)
 */
  }

  /* "cuda/ccudart.pyx":1270
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolGetAttribute(<ccuda.CUmemoryPool>memPool, <ccuda.CUmemPool_attribute>attr, value)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolGetAttribute(((__pyx_t_4cuda_5ccuda_CUmemoryPool)__pyx_v_memPool), ((__pyx_t_4cuda_5ccuda_CUmemPool_attribute)__pyx_v_attr), __pyx_v_value); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1270, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1271
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolGetAttribute(<ccuda.CUmemoryPool>memPool, <ccuda.CUmemPool_attribute>attr, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1272
 *     err = <cudaError_t>ccuda._cuMemPoolGetAttribute(<ccuda.CUmemoryPool>memPool, <ccuda.CUmemPool_attribute>attr, value)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1271
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolGetAttribute(<ccuda.CUmemoryPool>memPool, <ccuda.CUmemPool_attribute>attr, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1273
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc* descList, size_t count) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1265
 *     return err
 * 
 * cdef cudaError_t cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolGetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1275
 *     return err
 * 
 * cdef cudaError_t cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc* descList, size_t count) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolSetAccess(memPool, descList, count)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolSetAccess(__pyx_t_4cuda_7ccudart_cudaMemPool_t __pyx_v_memPool, struct __pyx_t_4cuda_7ccudart_cudaMemAccessDesc const *__pyx_v_descList, size_t __pyx_v_count) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemPoolSetAccess", __pyx_f[0], 1275, 1, __PYX_ERR(0, 1275, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1276
 * 
 * cdef cudaError_t cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc* descList, size_t count) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaMemPoolSetAccess(memPool, descList, count)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolGetAccess(cudaMemAccessFlags* flags, cudaMemPool_t memPool, cudaMemLocation* location) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolSetAccess(__pyx_v_memPool, __pyx_v_descList, __pyx_v_count); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1276, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1275
 *     return err
 * 
 * cdef cudaError_t cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc* descList, size_t count) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolSetAccess(memPool, descList, count)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolSetAccess", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1278
 *     return _cudaMemPoolSetAccess(memPool, descList, count)
 * 
 * cdef cudaError_t cudaMemPoolGetAccess(cudaMemAccessFlags* flags, cudaMemPool_t memPool, cudaMemLocation* location) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolGetAccess(enum __pyx_t_4cuda_7ccudart_cudaMemAccessFlags *__pyx_v_flags, __pyx_t_4cuda_7ccudart_cudaMemPool_t __pyx_v_memPool, struct __pyx_t_4cuda_7ccudart_cudaMemLocation *__pyx_v_location) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemPoolGetAccess", __pyx_f[0], 1278, 1, __PYX_ERR(0, 1278, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1280
 * cdef cudaError_t cudaMemPoolGetAccess(cudaMemAccessFlags* flags, cudaMemPool_t memPool, cudaMemLocation* location) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1281
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolGetAccess(<ccuda.CUmemAccess_flags*>flags, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemLocation*>location)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1282
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemPoolGetAccess(<ccuda.CUmemAccess_flags*>flags, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemLocation*>location)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1281
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolGetAccess(<ccuda.CUmemAccess_flags*>flags, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemLocation*>location)
 */
  }

  /* "cuda/ccudart.pyx":1283
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolGetAccess(<ccuda.CUmemAccess_flags*>flags, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemLocation*>location)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolGetAccess(((__pyx_t_4cuda_5ccuda_CUmemAccess_flags *)__pyx_v_flags), ((__pyx_t_4cuda_5ccuda_CUmemoryPool)__pyx_v_memPool), ((__pyx_t_4cuda_5ccuda_CUmemLocation *)__pyx_v_location)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1283, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1284
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolGetAccess(<ccuda.CUmemAccess_flags*>flags, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemLocation*>location)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1285
 *     err = <cudaError_t>ccuda._cuMemPoolGetAccess(<ccuda.CUmemAccess_flags*>flags, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemLocation*>location)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1284
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolGetAccess(<ccuda.CUmemAccess_flags*>flags, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemLocation*>location)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1286
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolCreate(cudaMemPool_t* memPool, const cudaMemPoolProps* poolProps) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1278
 *     return _cudaMemPoolSetAccess(memPool, descList, count)
 * 
 * cdef cudaError_t cudaMemPoolGetAccess(cudaMemAccessFlags* flags, cudaMemPool_t memPool, cudaMemLocation* location) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolGetAccess", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1288
 *     return err
 * 
 * cdef cudaError_t cudaMemPoolCreate(cudaMemPool_t* memPool, const cudaMemPoolProps* poolProps) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolCreate(__pyx_t_4cuda_7ccudart_cudaMemPool_t *__pyx_v_memPool, struct __pyx_t_4cuda_7ccudart_cudaMemPoolProps const *__pyx_v_poolProps) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemPoolCreate", __pyx_f[0], 1288, 1, __PYX_ERR(0, 1288, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1290
 * cdef cudaError_t cudaMemPoolCreate(cudaMemPool_t* memPool, const cudaMemPoolProps* poolProps) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1291
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolCreate(<ccuda.CUmemoryPool*>memPool, <ccuda.CUmemPoolProps*>poolProps)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1292
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemPoolCreate(<ccuda.CUmemoryPool*>memPool, <ccuda.CUmemPoolProps*>poolProps)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1291
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolCreate(<ccuda.CUmemoryPool*>memPool, <ccuda.CUmemPoolProps*>poolProps)
 */
  }

  /* "cuda/ccudart.pyx":1293
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolCreate(<ccuda.CUmemoryPool*>memPool, <ccuda.CUmemPoolProps*>poolProps)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolCreate(((__pyx_t_4cuda_5ccuda_CUmemoryPool *)__pyx_v_memPool), ((__pyx_t_4cuda_5ccuda_CUmemPoolProps *)__pyx_v_poolProps)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1293, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1294
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolCreate(<ccuda.CUmemoryPool*>memPool, <ccuda.CUmemPoolProps*>poolProps)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1295
 *     err = <cudaError_t>ccuda._cuMemPoolCreate(<ccuda.CUmemoryPool*>memPool, <ccuda.CUmemPoolProps*>poolProps)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1294
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolCreate(<ccuda.CUmemoryPool*>memPool, <ccuda.CUmemPoolProps*>poolProps)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1296
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolDestroy(cudaMemPool_t memPool) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1288
 *     return err
 * 
 * cdef cudaError_t cudaMemPoolCreate(cudaMemPool_t* memPool, const cudaMemPoolProps* poolProps) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolCreate", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1298
 *     return err
 * 
 * cdef cudaError_t cudaMemPoolDestroy(cudaMemPool_t memPool) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolDestroy(__pyx_t_4cuda_7ccudart_cudaMemPool_t __pyx_v_memPool) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemPoolDestroy", __pyx_f[0], 1298, 1, __PYX_ERR(0, 1298, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1300
 * cdef cudaError_t cudaMemPoolDestroy(cudaMemPool_t memPool) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1301
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolDestroy(<ccuda.CUmemoryPool>memPool)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1302
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemPoolDestroy(<ccuda.CUmemoryPool>memPool)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1301
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolDestroy(<ccuda.CUmemoryPool>memPool)
 */
  }

  /* "cuda/ccudart.pyx":1303
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolDestroy(<ccuda.CUmemoryPool>memPool)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolDestroy(((__pyx_t_4cuda_5ccuda_CUmemoryPool)__pyx_v_memPool)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1303, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1304
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolDestroy(<ccuda.CUmemoryPool>memPool)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1305
 *     err = <cudaError_t>ccuda._cuMemPoolDestroy(<ccuda.CUmemoryPool>memPool)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1304
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolDestroy(<ccuda.CUmemoryPool>memPool)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1306
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMallocFromPoolAsync(void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1298
 *     return err
 * 
 * cdef cudaError_t cudaMemPoolDestroy(cudaMemPool_t memPool) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolDestroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1308
 *     return err
 * 
 * cdef cudaError_t cudaMallocFromPoolAsync(void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMallocFromPoolAsync(void **__pyx_v_ptr, size_t __pyx_v_size, __pyx_t_4cuda_7ccudart_cudaMemPool_t __pyx_v_memPool, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMallocFromPoolAsync", __pyx_f[0], 1308, 1, __PYX_ERR(0, 1308, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1310
 * cdef cudaError_t cudaMallocFromPoolAsync(void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1311
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemAllocFromPoolAsync(<ccuda.CUdeviceptr*>ptr, size, <ccuda.CUmemoryPool>memPool, <ccuda.CUstream>stream)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1312
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemAllocFromPoolAsync(<ccuda.CUdeviceptr*>ptr, size, <ccuda.CUmemoryPool>memPool, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1311
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemAllocFromPoolAsync(<ccuda.CUdeviceptr*>ptr, size, <ccuda.CUmemoryPool>memPool, <ccuda.CUstream>stream)
 */
  }

  /* "cuda/ccudart.pyx":1313
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemAllocFromPoolAsync(<ccuda.CUdeviceptr*>ptr, size, <ccuda.CUmemoryPool>memPool, <ccuda.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemAllocFromPoolAsync(((__pyx_t_4cuda_5ccuda_CUdeviceptr *)__pyx_v_ptr), __pyx_v_size, ((__pyx_t_4cuda_5ccuda_CUmemoryPool)__pyx_v_memPool), ((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1313, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1314
 *         return err
 *     err = <cudaError_t>ccuda._cuMemAllocFromPoolAsync(<ccuda.CUdeviceptr*>ptr, size, <ccuda.CUmemoryPool>memPool, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1315
 *     err = <cudaError_t>ccuda._cuMemAllocFromPoolAsync(<ccuda.CUdeviceptr*>ptr, size, <ccuda.CUmemoryPool>memPool, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1314
 *         return err
 *     err = <cudaError_t>ccuda._cuMemAllocFromPoolAsync(<ccuda.CUdeviceptr*>ptr, size, <ccuda.CUmemoryPool>memPool, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1316
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolExportToShareableHandle(void* shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1308
 *     return err
 * 
 * cdef cudaError_t cudaMallocFromPoolAsync(void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMallocFromPoolAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1318
 *     return err
 * 
 * cdef cudaError_t cudaMemPoolExportToShareableHandle(void* shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolExportToShareableHandle(void *__pyx_v_shareableHandle, __pyx_t_4cuda_7ccudart_cudaMemPool_t __pyx_v_memPool, enum __pyx_t_4cuda_7ccudart_cudaMemAllocationHandleType __pyx_v_handleType, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemPoolExportToShareableHandle", __pyx_f[0], 1318, 1, __PYX_ERR(0, 1318, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1320
 * cdef cudaError_t cudaMemPoolExportToShareableHandle(void* shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1321
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolExportToShareableHandle(shareableHandle, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1322
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemPoolExportToShareableHandle(shareableHandle, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1321
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolExportToShareableHandle(shareableHandle, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 */
  }

  /* "cuda/ccudart.pyx":1323
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolExportToShareableHandle(shareableHandle, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemAllocationHandleType>handleType, <unsigned long long>flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolExportToShareableHandle(__pyx_v_shareableHandle, ((__pyx_t_4cuda_5ccuda_CUmemoryPool)__pyx_v_memPool), ((__pyx_t_4cuda_5ccuda_CUmemAllocationHandleType)__pyx_v_handleType), ((unsigned PY_LONG_LONG)__pyx_v_flags)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1323, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1324
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolExportToShareableHandle(shareableHandle, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1325
 *     err = <cudaError_t>ccuda._cuMemPoolExportToShareableHandle(shareableHandle, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1324
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolExportToShareableHandle(shareableHandle, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1326
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolImportFromShareableHandle(cudaMemPool_t* memPool, void* shareableHandle, cudaMemAllocationHandleType handleType, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1318
 *     return err
 * 
 * cdef cudaError_t cudaMemPoolExportToShareableHandle(void* shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolExportToShareableHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1328
 *     return err
 * 
 * cdef cudaError_t cudaMemPoolImportFromShareableHandle(cudaMemPool_t* memPool, void* shareableHandle, cudaMemAllocationHandleType handleType, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolImportFromShareableHandle(__pyx_t_4cuda_7ccudart_cudaMemPool_t *__pyx_v_memPool, void *__pyx_v_shareableHandle, enum __pyx_t_4cuda_7ccudart_cudaMemAllocationHandleType __pyx_v_handleType, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemPoolImportFromShareableHandle", __pyx_f[0], 1328, 1, __PYX_ERR(0, 1328, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1330
 * cdef cudaError_t cudaMemPoolImportFromShareableHandle(cudaMemPool_t* memPool, void* shareableHandle, cudaMemAllocationHandleType handleType, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1331
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolImportFromShareableHandle(<ccuda.CUmemoryPool*>memPool, shareableHandle, <ccuda.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1332
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemPoolImportFromShareableHandle(<ccuda.CUmemoryPool*>memPool, shareableHandle, <ccuda.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1331
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolImportFromShareableHandle(<ccuda.CUmemoryPool*>memPool, shareableHandle, <ccuda.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 */
  }

  /* "cuda/ccudart.pyx":1333
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolImportFromShareableHandle(<ccuda.CUmemoryPool*>memPool, shareableHandle, <ccuda.CUmemAllocationHandleType>handleType, <unsigned long long>flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolImportFromShareableHandle(((__pyx_t_4cuda_5ccuda_CUmemoryPool *)__pyx_v_memPool), __pyx_v_shareableHandle, ((__pyx_t_4cuda_5ccuda_CUmemAllocationHandleType)__pyx_v_handleType), ((unsigned PY_LONG_LONG)__pyx_v_flags)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1333, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1334
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolImportFromShareableHandle(<ccuda.CUmemoryPool*>memPool, shareableHandle, <ccuda.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1335
 *     err = <cudaError_t>ccuda._cuMemPoolImportFromShareableHandle(<ccuda.CUmemoryPool*>memPool, shareableHandle, <ccuda.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1334
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolImportFromShareableHandle(<ccuda.CUmemoryPool*>memPool, shareableHandle, <ccuda.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1336
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolExportPointer(cudaMemPoolPtrExportData* exportData, void* ptr) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1328
 *     return err
 * 
 * cdef cudaError_t cudaMemPoolImportFromShareableHandle(cudaMemPool_t* memPool, void* shareableHandle, cudaMemAllocationHandleType handleType, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolImportFromShareableHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1338
 *     return err
 * 
 * cdef cudaError_t cudaMemPoolExportPointer(cudaMemPoolPtrExportData* exportData, void* ptr) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolExportPointer(struct __pyx_t_4cuda_7ccudart_cudaMemPoolPtrExportData *__pyx_v_exportData, void *__pyx_v_ptr) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemPoolExportPointer", __pyx_f[0], 1338, 1, __PYX_ERR(0, 1338, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1340
 * cdef cudaError_t cudaMemPoolExportPointer(cudaMemPoolPtrExportData* exportData, void* ptr) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1341
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolExportPointer(<ccuda.CUmemPoolPtrExportData*>exportData, <ccuda.CUdeviceptr>ptr)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1342
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemPoolExportPointer(<ccuda.CUmemPoolPtrExportData*>exportData, <ccuda.CUdeviceptr>ptr)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1341
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolExportPointer(<ccuda.CUmemPoolPtrExportData*>exportData, <ccuda.CUdeviceptr>ptr)
 */
  }

  /* "cuda/ccudart.pyx":1343
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolExportPointer(<ccuda.CUmemPoolPtrExportData*>exportData, <ccuda.CUdeviceptr>ptr)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolExportPointer(((__pyx_t_4cuda_5ccuda_CUmemPoolPtrExportData *)__pyx_v_exportData), ((__pyx_t_4cuda_5ccuda_CUdeviceptr)__pyx_v_ptr)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1343, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1344
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolExportPointer(<ccuda.CUmemPoolPtrExportData*>exportData, <ccuda.CUdeviceptr>ptr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1345
 *     err = <cudaError_t>ccuda._cuMemPoolExportPointer(<ccuda.CUmemPoolPtrExportData*>exportData, <ccuda.CUdeviceptr>ptr)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1344
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolExportPointer(<ccuda.CUmemPoolPtrExportData*>exportData, <ccuda.CUdeviceptr>ptr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1346
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolImportPointer(void** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData* exportData) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1338
 *     return err
 * 
 * cdef cudaError_t cudaMemPoolExportPointer(cudaMemPoolPtrExportData* exportData, void* ptr) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolExportPointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1348
 *     return err
 * 
 * cdef cudaError_t cudaMemPoolImportPointer(void** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData* exportData) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolImportPointer(void **__pyx_v_ptr, __pyx_t_4cuda_7ccudart_cudaMemPool_t __pyx_v_memPool, struct __pyx_t_4cuda_7ccudart_cudaMemPoolPtrExportData *__pyx_v_exportData) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaMemPoolImportPointer", __pyx_f[0], 1348, 1, __PYX_ERR(0, 1348, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1350
 * cdef cudaError_t cudaMemPoolImportPointer(void** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData* exportData) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1351
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolImportPointer(<ccuda.CUdeviceptr*>ptr, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemPoolPtrExportData*>exportData)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1352
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuMemPoolImportPointer(<ccuda.CUdeviceptr*>ptr, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemPoolPtrExportData*>exportData)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1351
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolImportPointer(<ccuda.CUdeviceptr*>ptr, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemPoolPtrExportData*>exportData)
 */
  }

  /* "cuda/ccudart.pyx":1353
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolImportPointer(<ccuda.CUdeviceptr*>ptr, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemPoolPtrExportData*>exportData)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolImportPointer(((__pyx_t_4cuda_5ccuda_CUdeviceptr *)__pyx_v_ptr), ((__pyx_t_4cuda_5ccuda_CUmemoryPool)__pyx_v_memPool), ((__pyx_t_4cuda_5ccuda_CUmemPoolPtrExportData *)__pyx_v_exportData)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1353, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1354
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolImportPointer(<ccuda.CUdeviceptr*>ptr, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemPoolPtrExportData*>exportData)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1355
 *     err = <cudaError_t>ccuda._cuMemPoolImportPointer(<ccuda.CUdeviceptr*>ptr, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemPoolPtrExportData*>exportData)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1354
 *         return err
 *     err = <cudaError_t>ccuda._cuMemPoolImportPointer(<ccuda.CUdeviceptr*>ptr, <ccuda.CUmemoryPool>memPool, <ccuda.CUmemPoolPtrExportData*>exportData)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1356
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaPointerGetAttributes(cudaPointerAttributes* attributes, const void* ptr) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1348
 *     return err
 * 
 * cdef cudaError_t cudaMemPoolImportPointer(void** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData* exportData) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolImportPointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1358
 *     return err
 * 
 * cdef cudaError_t cudaPointerGetAttributes(cudaPointerAttributes* attributes, const void* ptr) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaPointerGetAttributes(attributes, ptr)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaPointerGetAttributes(struct __pyx_t_4cuda_7ccudart_cudaPointerAttributes *__pyx_v_attributes, void const *__pyx_v_ptr) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaPointerGetAttributes", __pyx_f[0], 1358, 1, __PYX_ERR(0, 1358, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1359
 * 
 * cdef cudaError_t cudaPointerGetAttributes(cudaPointerAttributes* attributes, const void* ptr) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaPointerGetAttributes(attributes, ptr)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceCanAccessPeer(int* canAccessPeer, int device, int peerDevice) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaPointerGetAttributes(__pyx_v_attributes, __pyx_v_ptr); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1359, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1358
 *     return err
 * 
 * cdef cudaError_t cudaPointerGetAttributes(cudaPointerAttributes* attributes, const void* ptr) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaPointerGetAttributes(attributes, ptr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaPointerGetAttributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1361
 *     return _cudaPointerGetAttributes(attributes, ptr)
 * 
 * cdef cudaError_t cudaDeviceCanAccessPeer(int* canAccessPeer, int device, int peerDevice) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceCanAccessPeer(canAccessPeer, device, peerDevice)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceCanAccessPeer(int *__pyx_v_canAccessPeer, int __pyx_v_device, int __pyx_v_peerDevice) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceCanAccessPeer", __pyx_f[0], 1361, 1, __PYX_ERR(0, 1361, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1362
 * 
 * cdef cudaError_t cudaDeviceCanAccessPeer(int* canAccessPeer, int device, int peerDevice) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaDeviceCanAccessPeer(canAccessPeer, device, peerDevice)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceCanAccessPeer(__pyx_v_canAccessPeer, __pyx_v_device, __pyx_v_peerDevice); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1362, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1361
 *     return _cudaPointerGetAttributes(attributes, ptr)
 * 
 * cdef cudaError_t cudaDeviceCanAccessPeer(int* canAccessPeer, int device, int peerDevice) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceCanAccessPeer(canAccessPeer, device, peerDevice)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceCanAccessPeer", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1364
 *     return _cudaDeviceCanAccessPeer(canAccessPeer, device, peerDevice)
 * 
 * cdef cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceEnablePeerAccess(peerDevice, flags)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceEnablePeerAccess(int __pyx_v_peerDevice, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceEnablePeerAccess", __pyx_f[0], 1364, 1, __PYX_ERR(0, 1364, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1365
 * 
 * cdef cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaDeviceEnablePeerAccess(peerDevice, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceDisablePeerAccess(int peerDevice) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceEnablePeerAccess(__pyx_v_peerDevice, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1365, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1364
 *     return _cudaDeviceCanAccessPeer(canAccessPeer, device, peerDevice)
 * 
 * cdef cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceEnablePeerAccess(peerDevice, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceEnablePeerAccess", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1367
 *     return _cudaDeviceEnablePeerAccess(peerDevice, flags)
 * 
 * cdef cudaError_t cudaDeviceDisablePeerAccess(int peerDevice) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceDisablePeerAccess(peerDevice)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceDisablePeerAccess(int __pyx_v_peerDevice) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceDisablePeerAccess", __pyx_f[0], 1367, 1, __PYX_ERR(0, 1367, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1368
 * 
 * cdef cudaError_t cudaDeviceDisablePeerAccess(int peerDevice) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaDeviceDisablePeerAccess(peerDevice)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceDisablePeerAccess(__pyx_v_peerDevice); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1368, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1367
 *     return _cudaDeviceEnablePeerAccess(peerDevice, flags)
 * 
 * cdef cudaError_t cudaDeviceDisablePeerAccess(int peerDevice) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceDisablePeerAccess(peerDevice)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceDisablePeerAccess", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1370
 *     return _cudaDeviceDisablePeerAccess(peerDevice)
 * 
 * cdef cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsUnregisterResource(__pyx_t_4cuda_7ccudart_cudaGraphicsResource_t __pyx_v_resource) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphicsUnregisterResource", __pyx_f[0], 1370, 1, __PYX_ERR(0, 1370, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1372
 * cdef cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1373
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsUnregisterResource(<ccuda.CUgraphicsResource>resource)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1374
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphicsUnregisterResource(<ccuda.CUgraphicsResource>resource)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1373
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsUnregisterResource(<ccuda.CUgraphicsResource>resource)
 */
  }

  /* "cuda/ccudart.pyx":1375
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsUnregisterResource(<ccuda.CUgraphicsResource>resource)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsUnregisterResource(((__pyx_t_4cuda_5ccuda_CUgraphicsResource)__pyx_v_resource)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1375, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1376
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsUnregisterResource(<ccuda.CUgraphicsResource>resource)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1377
 *     err = <cudaError_t>ccuda._cuGraphicsUnregisterResource(<ccuda.CUgraphicsResource>resource)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1376
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsUnregisterResource(<ccuda.CUgraphicsResource>resource)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1378
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1370
 *     return _cudaDeviceDisablePeerAccess(peerDevice)
 * 
 * cdef cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsUnregisterResource", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1380
 *     return err
 * 
 * cdef cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsResourceSetMapFlags(__pyx_t_4cuda_7ccudart_cudaGraphicsResource_t __pyx_v_resource, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphicsResourceSetMapFlags", __pyx_f[0], 1380, 1, __PYX_ERR(0, 1380, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1382
 * cdef cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1383
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsResourceSetMapFlags_v2(<ccuda.CUgraphicsResource>resource, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1384
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphicsResourceSetMapFlags_v2(<ccuda.CUgraphicsResource>resource, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1383
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsResourceSetMapFlags_v2(<ccuda.CUgraphicsResource>resource, flags)
 */
  }

  /* "cuda/ccudart.pyx":1385
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsResourceSetMapFlags_v2(<ccuda.CUgraphicsResource>resource, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsResourceSetMapFlags_v2(((__pyx_t_4cuda_5ccuda_CUgraphicsResource)__pyx_v_resource), __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1385, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1386
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsResourceSetMapFlags_v2(<ccuda.CUgraphicsResource>resource, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1387
 *     err = <cudaError_t>ccuda._cuGraphicsResourceSetMapFlags_v2(<ccuda.CUgraphicsResource>resource, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1386
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsResourceSetMapFlags_v2(<ccuda.CUgraphicsResource>resource, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1388
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1380
 *     return err
 * 
 * cdef cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsResourceSetMapFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1390
 *     return err
 * 
 * cdef cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsMapResources(int __pyx_v_count, __pyx_t_4cuda_7ccudart_cudaGraphicsResource_t *__pyx_v_resources, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphicsMapResources", __pyx_f[0], 1390, 1, __PYX_ERR(0, 1390, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1392
 * cdef cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1393
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsMapResources(<unsigned int>count, <ccuda.CUgraphicsResource*>resources, <ccuda.CUstream>stream)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1394
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphicsMapResources(<unsigned int>count, <ccuda.CUgraphicsResource*>resources, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1393
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsMapResources(<unsigned int>count, <ccuda.CUgraphicsResource*>resources, <ccuda.CUstream>stream)
 */
  }

  /* "cuda/ccudart.pyx":1395
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsMapResources(<unsigned int>count, <ccuda.CUgraphicsResource*>resources, <ccuda.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsMapResources(((unsigned int)__pyx_v_count), ((__pyx_t_4cuda_5ccuda_CUgraphicsResource *)__pyx_v_resources), ((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1395, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1396
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsMapResources(<unsigned int>count, <ccuda.CUgraphicsResource*>resources, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1397
 *     err = <cudaError_t>ccuda._cuGraphicsMapResources(<unsigned int>count, <ccuda.CUgraphicsResource*>resources, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1396
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsMapResources(<unsigned int>count, <ccuda.CUgraphicsResource*>resources, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1398
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1390
 *     return err
 * 
 * cdef cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsMapResources", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1400
 *     return err
 * 
 * cdef cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsUnmapResources(int __pyx_v_count, __pyx_t_4cuda_7ccudart_cudaGraphicsResource_t *__pyx_v_resources, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphicsUnmapResources", __pyx_f[0], 1400, 1, __PYX_ERR(0, 1400, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1402
 * cdef cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1403
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsUnmapResources(<unsigned int>count, <ccuda.CUgraphicsResource*>resources, <ccuda.CUstream>stream)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1404
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphicsUnmapResources(<unsigned int>count, <ccuda.CUgraphicsResource*>resources, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1403
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsUnmapResources(<unsigned int>count, <ccuda.CUgraphicsResource*>resources, <ccuda.CUstream>stream)
 */
  }

  /* "cuda/ccudart.pyx":1405
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsUnmapResources(<unsigned int>count, <ccuda.CUgraphicsResource*>resources, <ccuda.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsUnmapResources(((unsigned int)__pyx_v_count), ((__pyx_t_4cuda_5ccuda_CUgraphicsResource *)__pyx_v_resources), ((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1405, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1406
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsUnmapResources(<unsigned int>count, <ccuda.CUgraphicsResource*>resources, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1407
 *     err = <cudaError_t>ccuda._cuGraphicsUnmapResources(<unsigned int>count, <ccuda.CUgraphicsResource*>resources, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1406
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsUnmapResources(<unsigned int>count, <ccuda.CUgraphicsResource*>resources, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1408
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedPointer(void** devPtr, size_t* size, cudaGraphicsResource_t resource) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1400
 *     return err
 * 
 * cdef cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsUnmapResources", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1410
 *     return err
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedPointer(void** devPtr, size_t* size, cudaGraphicsResource_t resource) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsResourceGetMappedPointer(void **__pyx_v_devPtr, size_t *__pyx_v_size, __pyx_t_4cuda_7ccudart_cudaGraphicsResource_t __pyx_v_resource) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphicsResourceGetMappedPointer", __pyx_f[0], 1410, 1, __PYX_ERR(0, 1410, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1412
 * cdef cudaError_t cudaGraphicsResourceGetMappedPointer(void** devPtr, size_t* size, cudaGraphicsResource_t resource) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1413
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsResourceGetMappedPointer_v2(<ccuda.CUdeviceptr*>devPtr, size, <ccuda.CUgraphicsResource>resource)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1414
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphicsResourceGetMappedPointer_v2(<ccuda.CUdeviceptr*>devPtr, size, <ccuda.CUgraphicsResource>resource)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1413
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsResourceGetMappedPointer_v2(<ccuda.CUdeviceptr*>devPtr, size, <ccuda.CUgraphicsResource>resource)
 */
  }

  /* "cuda/ccudart.pyx":1415
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsResourceGetMappedPointer_v2(<ccuda.CUdeviceptr*>devPtr, size, <ccuda.CUgraphicsResource>resource)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsResourceGetMappedPointer_v2(((__pyx_t_4cuda_5ccuda_CUdeviceptr *)__pyx_v_devPtr), __pyx_v_size, ((__pyx_t_4cuda_5ccuda_CUgraphicsResource)__pyx_v_resource)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1415, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1416
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsResourceGetMappedPointer_v2(<ccuda.CUdeviceptr*>devPtr, size, <ccuda.CUgraphicsResource>resource)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1417
 *     err = <cudaError_t>ccuda._cuGraphicsResourceGetMappedPointer_v2(<ccuda.CUdeviceptr*>devPtr, size, <ccuda.CUgraphicsResource>resource)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1416
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsResourceGetMappedPointer_v2(<ccuda.CUdeviceptr*>devPtr, size, <ccuda.CUgraphicsResource>resource)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1418
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t* array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1410
 *     return err
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedPointer(void** devPtr, size_t* size, cudaGraphicsResource_t resource) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsResourceGetMappedPointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1420
 *     return err
 * 
 * cdef cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t* array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsSubResourceGetMappedArray(__pyx_t_4cuda_7ccudart_cudaArray_t *__pyx_v_array, __pyx_t_4cuda_7ccudart_cudaGraphicsResource_t __pyx_v_resource, unsigned int __pyx_v_arrayIndex, unsigned int __pyx_v_mipLevel) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphicsSubResourceGetMappedArray", __pyx_f[0], 1420, 1, __PYX_ERR(0, 1420, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1422
 * cdef cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t* array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1423
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsSubResourceGetMappedArray(<ccuda.CUarray*>array, <ccuda.CUgraphicsResource>resource, arrayIndex, mipLevel)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1424
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphicsSubResourceGetMappedArray(<ccuda.CUarray*>array, <ccuda.CUgraphicsResource>resource, arrayIndex, mipLevel)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1423
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsSubResourceGetMappedArray(<ccuda.CUarray*>array, <ccuda.CUgraphicsResource>resource, arrayIndex, mipLevel)
 */
  }

  /* "cuda/ccudart.pyx":1425
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsSubResourceGetMappedArray(<ccuda.CUarray*>array, <ccuda.CUgraphicsResource>resource, arrayIndex, mipLevel)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsSubResourceGetMappedArray(((__pyx_t_4cuda_5ccuda_CUarray *)__pyx_v_array), ((__pyx_t_4cuda_5ccuda_CUgraphicsResource)__pyx_v_resource), __pyx_v_arrayIndex, __pyx_v_mipLevel); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1425, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1426
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsSubResourceGetMappedArray(<ccuda.CUarray*>array, <ccuda.CUgraphicsResource>resource, arrayIndex, mipLevel)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1427
 *     err = <cudaError_t>ccuda._cuGraphicsSubResourceGetMappedArray(<ccuda.CUarray*>array, <ccuda.CUgraphicsResource>resource, arrayIndex, mipLevel)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1426
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsSubResourceGetMappedArray(<ccuda.CUarray*>array, <ccuda.CUgraphicsResource>resource, arrayIndex, mipLevel)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1428
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t* mipmappedArray, cudaGraphicsResource_t resource) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1420
 *     return err
 * 
 * cdef cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t* array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsSubResourceGetMappedArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1430
 *     return err
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t* mipmappedArray, cudaGraphicsResource_t resource) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsResourceGetMappedMipmappedArray(__pyx_t_4cuda_7ccudart_cudaMipmappedArray_t *__pyx_v_mipmappedArray, __pyx_t_4cuda_7ccudart_cudaGraphicsResource_t __pyx_v_resource) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphicsResourceGetMappedMipmappedArray", __pyx_f[0], 1430, 1, __PYX_ERR(0, 1430, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1432
 * cdef cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t* mipmappedArray, cudaGraphicsResource_t resource) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1433
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsResourceGetMappedMipmappedArray(<ccuda.CUmipmappedArray*>mipmappedArray, <ccuda.CUgraphicsResource>resource)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1434
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphicsResourceGetMappedMipmappedArray(<ccuda.CUmipmappedArray*>mipmappedArray, <ccuda.CUgraphicsResource>resource)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1433
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsResourceGetMappedMipmappedArray(<ccuda.CUmipmappedArray*>mipmappedArray, <ccuda.CUgraphicsResource>resource)
 */
  }

  /* "cuda/ccudart.pyx":1435
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsResourceGetMappedMipmappedArray(<ccuda.CUmipmappedArray*>mipmappedArray, <ccuda.CUgraphicsResource>resource)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsResourceGetMappedMipmappedArray(((__pyx_t_4cuda_5ccuda_CUmipmappedArray *)__pyx_v_mipmappedArray), ((__pyx_t_4cuda_5ccuda_CUgraphicsResource)__pyx_v_resource)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1435, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1436
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsResourceGetMappedMipmappedArray(<ccuda.CUmipmappedArray*>mipmappedArray, <ccuda.CUgraphicsResource>resource)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1437
 *     err = <cudaError_t>ccuda._cuGraphicsResourceGetMappedMipmappedArray(<ccuda.CUmipmappedArray*>mipmappedArray, <ccuda.CUgraphicsResource>resource)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1436
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsResourceGetMappedMipmappedArray(<ccuda.CUmipmappedArray*>mipmappedArray, <ccuda.CUgraphicsResource>resource)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1438
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc* desc, cudaArray_const_t array) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1430
 *     return err
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t* mipmappedArray, cudaGraphicsResource_t resource) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsResourceGetMappedMipmappedArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1440
 *     return err
 * 
 * cdef cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc* desc, cudaArray_const_t array) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetChannelDesc(desc, array)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGetChannelDesc(struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc *__pyx_v_desc, __pyx_t_4cuda_7ccudart_cudaArray_const_t __pyx_v_array) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGetChannelDesc", __pyx_f[0], 1440, 1, __PYX_ERR(0, 1440, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1441
 * 
 * cdef cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc* desc, cudaArray_const_t array) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGetChannelDesc(desc, array)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f) nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetChannelDesc(__pyx_v_desc, __pyx_v_array); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1441, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1440
 *     return err
 * 
 * cdef cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc* desc, cudaArray_const_t array) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetChannelDesc(desc, array)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGetChannelDesc", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1443
 *     return _cudaGetChannelDesc(desc, array)
 * 
 * cdef cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f) nogil:             # <<<<<<<<<<<<<<
 *     return _cudaCreateChannelDesc(x, y, z, w, f)
 * 
 */

static struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc __pyx_f_4cuda_7ccudart_cudaCreateChannelDesc(int __pyx_v_x, int __pyx_v_y, int __pyx_v_z, int __pyx_v_w, enum __pyx_t_4cuda_7ccudart_cudaChannelFormatKind __pyx_v_f) {
  struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaCreateChannelDesc", __pyx_f[0], 1443, 1, __PYX_ERR(0, 1443, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1444
 * 
 * cdef cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f) nogil:
 *     return _cudaCreateChannelDesc(x, y, z, w, f)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaCreateTextureObject(cudaTextureObject_t* pTexObject, const cudaResourceDesc* pResDesc, const cudaTextureDesc* pTexDesc, const cudaResourceViewDesc* pResViewDesc) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCreateChannelDesc(__pyx_v_x, __pyx_v_y, __pyx_v_z, __pyx_v_w, __pyx_v_f);
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1443
 *     return _cudaGetChannelDesc(desc, array)
 * 
 * cdef cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f) nogil:             # <<<<<<<<<<<<<<
 *     return _cudaCreateChannelDesc(x, y, z, w, f)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cuda.ccudart.cudaCreateChannelDesc", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1446
 *     return _cudaCreateChannelDesc(x, y, z, w, f)
 * 
 * cdef cudaError_t cudaCreateTextureObject(cudaTextureObject_t* pTexObject, const cudaResourceDesc* pResDesc, const cudaTextureDesc* pTexDesc, const cudaResourceViewDesc* pResViewDesc) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaCreateTextureObject(pTexObject, pResDesc, pTexDesc, pResViewDesc)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaCreateTextureObject(__pyx_t_4cuda_7ccudart_cudaTextureObject_t *__pyx_v_pTexObject, struct __pyx_t_4cuda_7ccudart_cudaResourceDesc const *__pyx_v_pResDesc, struct __pyx_t_4cuda_7ccudart_cudaTextureDesc const *__pyx_v_pTexDesc, struct __pyx_t_4cuda_7ccudart_cudaResourceViewDesc const *__pyx_v_pResViewDesc) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaCreateTextureObject", __pyx_f[0], 1446, 1, __PYX_ERR(0, 1446, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1447
 * 
 * cdef cudaError_t cudaCreateTextureObject(cudaTextureObject_t* pTexObject, const cudaResourceDesc* pResDesc, const cudaTextureDesc* pTexDesc, const cudaResourceViewDesc* pResViewDesc) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaCreateTextureObject(pTexObject, pResDesc, pTexDesc, pResViewDesc)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCreateTextureObject(__pyx_v_pTexObject, __pyx_v_pResDesc, __pyx_v_pTexDesc, __pyx_v_pResViewDesc); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1447, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1446
 *     return _cudaCreateChannelDesc(x, y, z, w, f)
 * 
 * cdef cudaError_t cudaCreateTextureObject(cudaTextureObject_t* pTexObject, const cudaResourceDesc* pResDesc, const cudaTextureDesc* pTexDesc, const cudaResourceViewDesc* pResViewDesc) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaCreateTextureObject(pTexObject, pResDesc, pTexDesc, pResViewDesc)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaCreateTextureObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1449
 *     return _cudaCreateTextureObject(pTexObject, pResDesc, pTexDesc, pResViewDesc)
 * 
 * cdef cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDestroyTextureObject(__pyx_t_4cuda_7ccudart_cudaTextureObject_t __pyx_v_texObject) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDestroyTextureObject", __pyx_f[0], 1449, 1, __PYX_ERR(0, 1449, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1451
 * cdef cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1452
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuTexObjectDestroy(<ccuda.CUtexObject>texObject)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1453
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuTexObjectDestroy(<ccuda.CUtexObject>texObject)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1452
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuTexObjectDestroy(<ccuda.CUtexObject>texObject)
 */
  }

  /* "cuda/ccudart.pyx":1454
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuTexObjectDestroy(<ccuda.CUtexObject>texObject)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuTexObjectDestroy(((__pyx_t_4cuda_5ccuda_CUtexObject)__pyx_v_texObject)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1454, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1455
 *         return err
 *     err = <cudaError_t>ccuda._cuTexObjectDestroy(<ccuda.CUtexObject>texObject)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1456
 *     err = <cudaError_t>ccuda._cuTexObjectDestroy(<ccuda.CUtexObject>texObject)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1455
 *         return err
 *     err = <cudaError_t>ccuda._cuTexObjectDestroy(<ccuda.CUtexObject>texObject)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1457
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc* pResDesc, cudaTextureObject_t texObject) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1449
 *     return _cudaCreateTextureObject(pTexObject, pResDesc, pTexDesc, pResViewDesc)
 * 
 * cdef cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDestroyTextureObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1459
 *     return err
 * 
 * cdef cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc* pResDesc, cudaTextureObject_t texObject) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetTextureObjectResourceDesc(pResDesc, texObject)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGetTextureObjectResourceDesc(struct __pyx_t_4cuda_7ccudart_cudaResourceDesc *__pyx_v_pResDesc, __pyx_t_4cuda_7ccudart_cudaTextureObject_t __pyx_v_texObject) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGetTextureObjectResourceDesc", __pyx_f[0], 1459, 1, __PYX_ERR(0, 1459, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1460
 * 
 * cdef cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc* pResDesc, cudaTextureObject_t texObject) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGetTextureObjectResourceDesc(pResDesc, texObject)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc* pTexDesc, cudaTextureObject_t texObject) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetTextureObjectResourceDesc(__pyx_v_pResDesc, __pyx_v_texObject); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1460, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1459
 *     return err
 * 
 * cdef cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc* pResDesc, cudaTextureObject_t texObject) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetTextureObjectResourceDesc(pResDesc, texObject)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGetTextureObjectResourceDesc", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1462
 *     return _cudaGetTextureObjectResourceDesc(pResDesc, texObject)
 * 
 * cdef cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc* pTexDesc, cudaTextureObject_t texObject) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetTextureObjectTextureDesc(pTexDesc, texObject)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGetTextureObjectTextureDesc(struct __pyx_t_4cuda_7ccudart_cudaTextureDesc *__pyx_v_pTexDesc, __pyx_t_4cuda_7ccudart_cudaTextureObject_t __pyx_v_texObject) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGetTextureObjectTextureDesc", __pyx_f[0], 1462, 1, __PYX_ERR(0, 1462, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1463
 * 
 * cdef cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc* pTexDesc, cudaTextureObject_t texObject) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGetTextureObjectTextureDesc(pTexDesc, texObject)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc* pResViewDesc, cudaTextureObject_t texObject) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetTextureObjectTextureDesc(__pyx_v_pTexDesc, __pyx_v_texObject); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1463, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1462
 *     return _cudaGetTextureObjectResourceDesc(pResDesc, texObject)
 * 
 * cdef cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc* pTexDesc, cudaTextureObject_t texObject) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetTextureObjectTextureDesc(pTexDesc, texObject)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGetTextureObjectTextureDesc", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1465
 *     return _cudaGetTextureObjectTextureDesc(pTexDesc, texObject)
 * 
 * cdef cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc* pResViewDesc, cudaTextureObject_t texObject) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetTextureObjectResourceViewDesc(pResViewDesc, texObject)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGetTextureObjectResourceViewDesc(struct __pyx_t_4cuda_7ccudart_cudaResourceViewDesc *__pyx_v_pResViewDesc, __pyx_t_4cuda_7ccudart_cudaTextureObject_t __pyx_v_texObject) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGetTextureObjectResourceViewDesc", __pyx_f[0], 1465, 1, __PYX_ERR(0, 1465, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1466
 * 
 * cdef cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc* pResViewDesc, cudaTextureObject_t texObject) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGetTextureObjectResourceViewDesc(pResViewDesc, texObject)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t* pSurfObject, const cudaResourceDesc* pResDesc) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetTextureObjectResourceViewDesc(__pyx_v_pResViewDesc, __pyx_v_texObject); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1466, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1465
 *     return _cudaGetTextureObjectTextureDesc(pTexDesc, texObject)
 * 
 * cdef cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc* pResViewDesc, cudaTextureObject_t texObject) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetTextureObjectResourceViewDesc(pResViewDesc, texObject)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGetTextureObjectResourceViewDesc", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1468
 *     return _cudaGetTextureObjectResourceViewDesc(pResViewDesc, texObject)
 * 
 * cdef cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t* pSurfObject, const cudaResourceDesc* pResDesc) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaCreateSurfaceObject(pSurfObject, pResDesc)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaCreateSurfaceObject(__pyx_t_4cuda_7ccudart_cudaSurfaceObject_t *__pyx_v_pSurfObject, struct __pyx_t_4cuda_7ccudart_cudaResourceDesc const *__pyx_v_pResDesc) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaCreateSurfaceObject", __pyx_f[0], 1468, 1, __PYX_ERR(0, 1468, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1469
 * 
 * cdef cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t* pSurfObject, const cudaResourceDesc* pResDesc) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaCreateSurfaceObject(pSurfObject, pResDesc)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCreateSurfaceObject(__pyx_v_pSurfObject, __pyx_v_pResDesc); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1469, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1468
 *     return _cudaGetTextureObjectResourceViewDesc(pResViewDesc, texObject)
 * 
 * cdef cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t* pSurfObject, const cudaResourceDesc* pResDesc) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaCreateSurfaceObject(pSurfObject, pResDesc)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaCreateSurfaceObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1471
 *     return _cudaCreateSurfaceObject(pSurfObject, pResDesc)
 * 
 * cdef cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDestroySurfaceObject(__pyx_t_4cuda_7ccudart_cudaSurfaceObject_t __pyx_v_surfObject) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDestroySurfaceObject", __pyx_f[0], 1471, 1, __PYX_ERR(0, 1471, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1473
 * cdef cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1474
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuSurfObjectDestroy(<ccuda.CUsurfObject>surfObject)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1475
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuSurfObjectDestroy(<ccuda.CUsurfObject>surfObject)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1474
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuSurfObjectDestroy(<ccuda.CUsurfObject>surfObject)
 */
  }

  /* "cuda/ccudart.pyx":1476
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuSurfObjectDestroy(<ccuda.CUsurfObject>surfObject)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuSurfObjectDestroy(((__pyx_t_4cuda_5ccuda_CUsurfObject)__pyx_v_surfObject)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1476, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1477
 *         return err
 *     err = <cudaError_t>ccuda._cuSurfObjectDestroy(<ccuda.CUsurfObject>surfObject)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1478
 *     err = <cudaError_t>ccuda._cuSurfObjectDestroy(<ccuda.CUsurfObject>surfObject)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1477
 *         return err
 *     err = <cudaError_t>ccuda._cuSurfObjectDestroy(<ccuda.CUsurfObject>surfObject)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1479
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc* pResDesc, cudaSurfaceObject_t surfObject) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1471
 *     return _cudaCreateSurfaceObject(pSurfObject, pResDesc)
 * 
 * cdef cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDestroySurfaceObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1481
 *     return err
 * 
 * cdef cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc* pResDesc, cudaSurfaceObject_t surfObject) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetSurfaceObjectResourceDesc(pResDesc, surfObject)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGetSurfaceObjectResourceDesc(struct __pyx_t_4cuda_7ccudart_cudaResourceDesc *__pyx_v_pResDesc, __pyx_t_4cuda_7ccudart_cudaSurfaceObject_t __pyx_v_surfObject) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGetSurfaceObjectResourceDesc", __pyx_f[0], 1481, 1, __PYX_ERR(0, 1481, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1482
 * 
 * cdef cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc* pResDesc, cudaSurfaceObject_t surfObject) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGetSurfaceObjectResourceDesc(pResDesc, surfObject)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDriverGetVersion(int* driverVersion) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetSurfaceObjectResourceDesc(__pyx_v_pResDesc, __pyx_v_surfObject); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1482, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1481
 *     return err
 * 
 * cdef cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc* pResDesc, cudaSurfaceObject_t surfObject) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetSurfaceObjectResourceDesc(pResDesc, surfObject)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGetSurfaceObjectResourceDesc", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1484
 *     return _cudaGetSurfaceObjectResourceDesc(pResDesc, surfObject)
 * 
 * cdef cudaError_t cudaDriverGetVersion(int* driverVersion) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaDriverGetVersion(driverVersion)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDriverGetVersion(int *__pyx_v_driverVersion) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDriverGetVersion", __pyx_f[0], 1484, 1, __PYX_ERR(0, 1484, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1485
 * 
 * cdef cudaError_t cudaDriverGetVersion(int* driverVersion) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaDriverGetVersion(driverVersion)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaRuntimeGetVersion(int* runtimeVersion) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDriverGetVersion(__pyx_v_driverVersion); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1485, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1484
 *     return _cudaGetSurfaceObjectResourceDesc(pResDesc, surfObject)
 * 
 * cdef cudaError_t cudaDriverGetVersion(int* driverVersion) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaDriverGetVersion(driverVersion)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDriverGetVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1487
 *     return _cudaDriverGetVersion(driverVersion)
 * 
 * cdef cudaError_t cudaRuntimeGetVersion(int* runtimeVersion) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaRuntimeGetVersion(runtimeVersion)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaRuntimeGetVersion(int *__pyx_v_runtimeVersion) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaRuntimeGetVersion", __pyx_f[0], 1487, 1, __PYX_ERR(0, 1487, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1488
 * 
 * cdef cudaError_t cudaRuntimeGetVersion(int* runtimeVersion) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaRuntimeGetVersion(runtimeVersion)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphCreate(cudaGraph_t* pGraph, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaRuntimeGetVersion(__pyx_v_runtimeVersion); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1488, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1487
 *     return _cudaDriverGetVersion(driverVersion)
 * 
 * cdef cudaError_t cudaRuntimeGetVersion(int* runtimeVersion) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaRuntimeGetVersion(runtimeVersion)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaRuntimeGetVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1490
 *     return _cudaRuntimeGetVersion(runtimeVersion)
 * 
 * cdef cudaError_t cudaGraphCreate(cudaGraph_t* pGraph, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphCreate(__pyx_t_4cuda_7ccudart_cudaGraph_t *__pyx_v_pGraph, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphCreate", __pyx_f[0], 1490, 1, __PYX_ERR(0, 1490, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1492
 * cdef cudaError_t cudaGraphCreate(cudaGraph_t* pGraph, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1493
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphCreate(<ccuda.CUgraph*>pGraph, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1494
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphCreate(<ccuda.CUgraph*>pGraph, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1493
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphCreate(<ccuda.CUgraph*>pGraph, flags)
 */
  }

  /* "cuda/ccudart.pyx":1495
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphCreate(<ccuda.CUgraph*>pGraph, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphCreate(((__pyx_t_4cuda_5ccuda_CUgraph *)__pyx_v_pGraph), __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1495, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1496
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphCreate(<ccuda.CUgraph*>pGraph, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1497
 *     err = <cudaError_t>ccuda._cuGraphCreate(<ccuda.CUgraph*>pGraph, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1496
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphCreate(<ccuda.CUgraph*>pGraph, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1498
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaKernelNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1490
 *     return _cudaRuntimeGetVersion(runtimeVersion)
 * 
 * cdef cudaError_t cudaGraphCreate(cudaGraph_t* pGraph, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphCreate", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1500
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaKernelNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddKernelNode(__pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_pGraphNode, __pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct __pyx_t_4cuda_7ccudart_cudaKernelNodeParams const *__pyx_v_pNodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_5ccuda_CUDA_KERNEL_NODE_PARAMS __pyx_v__driver_pNodeParams;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  unsigned int __pyx_t_1;
  void **__pyx_t_2;
  int __pyx_t_3;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphAddKernelNode", __pyx_f[0], 1500, 1, __PYX_ERR(0, 1500, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1502
 * cdef cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaKernelNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     cdef ccuda.CUDA_KERNEL_NODE_PARAMS _driver_pNodeParams
 *     _driver_pNodeParams.func = <ccuda.CUfunction>pNodeParams[0].func
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1504
 *     err = m_global.lazyInit()
 *     cdef ccuda.CUDA_KERNEL_NODE_PARAMS _driver_pNodeParams
 *     _driver_pNodeParams.func = <ccuda.CUfunction>pNodeParams[0].func             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.gridDimX = pNodeParams[0].gridDim.x
 *     _driver_pNodeParams.gridDimY = pNodeParams[0].gridDim.y
 */
  __pyx_v__driver_pNodeParams.func = ((__pyx_t_4cuda_5ccuda_CUfunction)(__pyx_v_pNodeParams[0]).func);

  /* "cuda/ccudart.pyx":1505
 *     cdef ccuda.CUDA_KERNEL_NODE_PARAMS _driver_pNodeParams
 *     _driver_pNodeParams.func = <ccuda.CUfunction>pNodeParams[0].func
 *     _driver_pNodeParams.gridDimX = pNodeParams[0].gridDim.x             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.gridDimY = pNodeParams[0].gridDim.y
 *     _driver_pNodeParams.gridDimZ = pNodeParams[0].gridDim.z
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).gridDim.x;
  __pyx_v__driver_pNodeParams.gridDimX = __pyx_t_1;

  /* "cuda/ccudart.pyx":1506
 *     _driver_pNodeParams.func = <ccuda.CUfunction>pNodeParams[0].func
 *     _driver_pNodeParams.gridDimX = pNodeParams[0].gridDim.x
 *     _driver_pNodeParams.gridDimY = pNodeParams[0].gridDim.y             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.gridDimZ = pNodeParams[0].gridDim.z
 *     _driver_pNodeParams.blockDimX = pNodeParams[0].blockDim.x
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).gridDim.y;
  __pyx_v__driver_pNodeParams.gridDimY = __pyx_t_1;

  /* "cuda/ccudart.pyx":1507
 *     _driver_pNodeParams.gridDimX = pNodeParams[0].gridDim.x
 *     _driver_pNodeParams.gridDimY = pNodeParams[0].gridDim.y
 *     _driver_pNodeParams.gridDimZ = pNodeParams[0].gridDim.z             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.blockDimX = pNodeParams[0].blockDim.x
 *     _driver_pNodeParams.blockDimY = pNodeParams[0].blockDim.y
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).gridDim.z;
  __pyx_v__driver_pNodeParams.gridDimZ = __pyx_t_1;

  /* "cuda/ccudart.pyx":1508
 *     _driver_pNodeParams.gridDimY = pNodeParams[0].gridDim.y
 *     _driver_pNodeParams.gridDimZ = pNodeParams[0].gridDim.z
 *     _driver_pNodeParams.blockDimX = pNodeParams[0].blockDim.x             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.blockDimY = pNodeParams[0].blockDim.y
 *     _driver_pNodeParams.blockDimZ = pNodeParams[0].blockDim.z
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).blockDim.x;
  __pyx_v__driver_pNodeParams.blockDimX = __pyx_t_1;

  /* "cuda/ccudart.pyx":1509
 *     _driver_pNodeParams.gridDimZ = pNodeParams[0].gridDim.z
 *     _driver_pNodeParams.blockDimX = pNodeParams[0].blockDim.x
 *     _driver_pNodeParams.blockDimY = pNodeParams[0].blockDim.y             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.blockDimZ = pNodeParams[0].blockDim.z
 *     _driver_pNodeParams.sharedMemBytes = pNodeParams[0].sharedMemBytes
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).blockDim.y;
  __pyx_v__driver_pNodeParams.blockDimY = __pyx_t_1;

  /* "cuda/ccudart.pyx":1510
 *     _driver_pNodeParams.blockDimX = pNodeParams[0].blockDim.x
 *     _driver_pNodeParams.blockDimY = pNodeParams[0].blockDim.y
 *     _driver_pNodeParams.blockDimZ = pNodeParams[0].blockDim.z             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.sharedMemBytes = pNodeParams[0].sharedMemBytes
 *     _driver_pNodeParams.kernelParams = pNodeParams[0].kernelParams
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).blockDim.z;
  __pyx_v__driver_pNodeParams.blockDimZ = __pyx_t_1;

  /* "cuda/ccudart.pyx":1511
 *     _driver_pNodeParams.blockDimY = pNodeParams[0].blockDim.y
 *     _driver_pNodeParams.blockDimZ = pNodeParams[0].blockDim.z
 *     _driver_pNodeParams.sharedMemBytes = pNodeParams[0].sharedMemBytes             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.kernelParams = pNodeParams[0].kernelParams
 *     _driver_pNodeParams.extra = pNodeParams[0].extra
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).sharedMemBytes;
  __pyx_v__driver_pNodeParams.sharedMemBytes = __pyx_t_1;

  /* "cuda/ccudart.pyx":1512
 *     _driver_pNodeParams.blockDimZ = pNodeParams[0].blockDim.z
 *     _driver_pNodeParams.sharedMemBytes = pNodeParams[0].sharedMemBytes
 *     _driver_pNodeParams.kernelParams = pNodeParams[0].kernelParams             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.extra = pNodeParams[0].extra
 * 
 */
  __pyx_t_2 = (__pyx_v_pNodeParams[0]).kernelParams;
  __pyx_v__driver_pNodeParams.kernelParams = __pyx_t_2;

  /* "cuda/ccudart.pyx":1513
 *     _driver_pNodeParams.sharedMemBytes = pNodeParams[0].sharedMemBytes
 *     _driver_pNodeParams.kernelParams = pNodeParams[0].kernelParams
 *     _driver_pNodeParams.extra = pNodeParams[0].extra             # <<<<<<<<<<<<<<
 * 
 *     if err != cudaSuccess:
 */
  __pyx_t_2 = (__pyx_v_pNodeParams[0]).extra;
  __pyx_v__driver_pNodeParams.extra = __pyx_t_2;

  /* "cuda/ccudart.pyx":1515
 *     _driver_pNodeParams.extra = pNodeParams[0].extra
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddKernelNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, &_driver_pNodeParams)
 */
  __pyx_t_3 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_3) {

    /* "cuda/ccudart.pyx":1516
 * 
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphAddKernelNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, &_driver_pNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1515
 *     _driver_pNodeParams.extra = pNodeParams[0].extra
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddKernelNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, &_driver_pNodeParams)
 */
  }

  /* "cuda/ccudart.pyx":1517
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddKernelNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, &_driver_pNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_4 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddKernelNode(((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pGraphNode), ((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_graph), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pDependencies), __pyx_v_numDependencies, (&__pyx_v__driver_pNodeParams)); if (unlikely(__pyx_t_4 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1517, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_4);

  /* "cuda/ccudart.pyx":1518
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddKernelNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, &_driver_pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_3 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_3) {

    /* "cuda/ccudart.pyx":1519
 *     err = <cudaError_t>ccuda._cuGraphAddKernelNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, &_driver_pNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1518
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddKernelNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, &_driver_pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1520
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1500
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaKernelNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddKernelNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1522
 *     return err
 * 
 * cdef cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphKernelNodeGetParams(node, pNodeParams)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphKernelNodeGetParams(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, struct __pyx_t_4cuda_7ccudart_cudaKernelNodeParams *__pyx_v_pNodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphKernelNodeGetParams", __pyx_f[0], 1522, 1, __PYX_ERR(0, 1522, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1523
 * 
 * cdef cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGraphKernelNodeGetParams(node, pNodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphKernelNodeGetParams(__pyx_v_node, __pyx_v_pNodeParams); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1523, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1522
 *     return err
 * 
 * cdef cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphKernelNodeGetParams(node, pNodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphKernelNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1525
 *     return _cudaGraphKernelNodeGetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphKernelNodeSetParams(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, struct __pyx_t_4cuda_7ccudart_cudaKernelNodeParams const *__pyx_v_pNodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_5ccuda_CUDA_KERNEL_NODE_PARAMS __pyx_v__driver_pNodeParams;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  unsigned int __pyx_t_1;
  void **__pyx_t_2;
  int __pyx_t_3;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphKernelNodeSetParams", __pyx_f[0], 1525, 1, __PYX_ERR(0, 1525, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1527
 * cdef cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     cdef ccuda.CUDA_KERNEL_NODE_PARAMS _driver_pNodeParams
 *     _driver_pNodeParams.func = <ccuda.CUfunction>pNodeParams[0].func
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1529
 *     err = m_global.lazyInit()
 *     cdef ccuda.CUDA_KERNEL_NODE_PARAMS _driver_pNodeParams
 *     _driver_pNodeParams.func = <ccuda.CUfunction>pNodeParams[0].func             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.gridDimX = pNodeParams[0].gridDim.x
 *     _driver_pNodeParams.gridDimY = pNodeParams[0].gridDim.y
 */
  __pyx_v__driver_pNodeParams.func = ((__pyx_t_4cuda_5ccuda_CUfunction)(__pyx_v_pNodeParams[0]).func);

  /* "cuda/ccudart.pyx":1530
 *     cdef ccuda.CUDA_KERNEL_NODE_PARAMS _driver_pNodeParams
 *     _driver_pNodeParams.func = <ccuda.CUfunction>pNodeParams[0].func
 *     _driver_pNodeParams.gridDimX = pNodeParams[0].gridDim.x             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.gridDimY = pNodeParams[0].gridDim.y
 *     _driver_pNodeParams.gridDimZ = pNodeParams[0].gridDim.z
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).gridDim.x;
  __pyx_v__driver_pNodeParams.gridDimX = __pyx_t_1;

  /* "cuda/ccudart.pyx":1531
 *     _driver_pNodeParams.func = <ccuda.CUfunction>pNodeParams[0].func
 *     _driver_pNodeParams.gridDimX = pNodeParams[0].gridDim.x
 *     _driver_pNodeParams.gridDimY = pNodeParams[0].gridDim.y             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.gridDimZ = pNodeParams[0].gridDim.z
 *     _driver_pNodeParams.blockDimX = pNodeParams[0].blockDim.x
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).gridDim.y;
  __pyx_v__driver_pNodeParams.gridDimY = __pyx_t_1;

  /* "cuda/ccudart.pyx":1532
 *     _driver_pNodeParams.gridDimX = pNodeParams[0].gridDim.x
 *     _driver_pNodeParams.gridDimY = pNodeParams[0].gridDim.y
 *     _driver_pNodeParams.gridDimZ = pNodeParams[0].gridDim.z             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.blockDimX = pNodeParams[0].blockDim.x
 *     _driver_pNodeParams.blockDimY = pNodeParams[0].blockDim.y
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).gridDim.z;
  __pyx_v__driver_pNodeParams.gridDimZ = __pyx_t_1;

  /* "cuda/ccudart.pyx":1533
 *     _driver_pNodeParams.gridDimY = pNodeParams[0].gridDim.y
 *     _driver_pNodeParams.gridDimZ = pNodeParams[0].gridDim.z
 *     _driver_pNodeParams.blockDimX = pNodeParams[0].blockDim.x             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.blockDimY = pNodeParams[0].blockDim.y
 *     _driver_pNodeParams.blockDimZ = pNodeParams[0].blockDim.z
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).blockDim.x;
  __pyx_v__driver_pNodeParams.blockDimX = __pyx_t_1;

  /* "cuda/ccudart.pyx":1534
 *     _driver_pNodeParams.gridDimZ = pNodeParams[0].gridDim.z
 *     _driver_pNodeParams.blockDimX = pNodeParams[0].blockDim.x
 *     _driver_pNodeParams.blockDimY = pNodeParams[0].blockDim.y             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.blockDimZ = pNodeParams[0].blockDim.z
 *     _driver_pNodeParams.sharedMemBytes = pNodeParams[0].sharedMemBytes
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).blockDim.y;
  __pyx_v__driver_pNodeParams.blockDimY = __pyx_t_1;

  /* "cuda/ccudart.pyx":1535
 *     _driver_pNodeParams.blockDimX = pNodeParams[0].blockDim.x
 *     _driver_pNodeParams.blockDimY = pNodeParams[0].blockDim.y
 *     _driver_pNodeParams.blockDimZ = pNodeParams[0].blockDim.z             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.sharedMemBytes = pNodeParams[0].sharedMemBytes
 *     _driver_pNodeParams.kernelParams = pNodeParams[0].kernelParams
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).blockDim.z;
  __pyx_v__driver_pNodeParams.blockDimZ = __pyx_t_1;

  /* "cuda/ccudart.pyx":1536
 *     _driver_pNodeParams.blockDimY = pNodeParams[0].blockDim.y
 *     _driver_pNodeParams.blockDimZ = pNodeParams[0].blockDim.z
 *     _driver_pNodeParams.sharedMemBytes = pNodeParams[0].sharedMemBytes             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.kernelParams = pNodeParams[0].kernelParams
 *     _driver_pNodeParams.extra = pNodeParams[0].extra
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).sharedMemBytes;
  __pyx_v__driver_pNodeParams.sharedMemBytes = __pyx_t_1;

  /* "cuda/ccudart.pyx":1537
 *     _driver_pNodeParams.blockDimZ = pNodeParams[0].blockDim.z
 *     _driver_pNodeParams.sharedMemBytes = pNodeParams[0].sharedMemBytes
 *     _driver_pNodeParams.kernelParams = pNodeParams[0].kernelParams             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.extra = pNodeParams[0].extra
 * 
 */
  __pyx_t_2 = (__pyx_v_pNodeParams[0]).kernelParams;
  __pyx_v__driver_pNodeParams.kernelParams = __pyx_t_2;

  /* "cuda/ccudart.pyx":1538
 *     _driver_pNodeParams.sharedMemBytes = pNodeParams[0].sharedMemBytes
 *     _driver_pNodeParams.kernelParams = pNodeParams[0].kernelParams
 *     _driver_pNodeParams.extra = pNodeParams[0].extra             # <<<<<<<<<<<<<<
 * 
 *     if err != cudaSuccess:
 */
  __pyx_t_2 = (__pyx_v_pNodeParams[0]).extra;
  __pyx_v__driver_pNodeParams.extra = __pyx_t_2;

  /* "cuda/ccudart.pyx":1540
 *     _driver_pNodeParams.extra = pNodeParams[0].extra
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeSetParams(<ccuda.CUgraphNode>node, &_driver_pNodeParams)
 */
  __pyx_t_3 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_3) {

    /* "cuda/ccudart.pyx":1541
 * 
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeSetParams(<ccuda.CUgraphNode>node, &_driver_pNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1540
 *     _driver_pNodeParams.extra = pNodeParams[0].extra
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeSetParams(<ccuda.CUgraphNode>node, &_driver_pNodeParams)
 */
  }

  /* "cuda/ccudart.pyx":1542
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeSetParams(<ccuda.CUgraphNode>node, &_driver_pNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_4 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphKernelNodeSetParams(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_node), (&__pyx_v__driver_pNodeParams)); if (unlikely(__pyx_t_4 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1542, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_4);

  /* "cuda/ccudart.pyx":1543
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeSetParams(<ccuda.CUgraphNode>node, &_driver_pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_3 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_3) {

    /* "cuda/ccudart.pyx":1544
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeSetParams(<ccuda.CUgraphNode>node, &_driver_pNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1543
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeSetParams(<ccuda.CUgraphNode>node, &_driver_pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1545
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1525
 *     return _cudaGraphKernelNodeGetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphKernelNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1547
 *     return err
 * 
 * cdef cudaError_t cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphKernelNodeCopyAttributes(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_hSrc, __pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_hDst) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphKernelNodeCopyAttributes", __pyx_f[0], 1547, 1, __PYX_ERR(0, 1547, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1549
 * cdef cudaError_t cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1550
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeCopyAttributes(<ccuda.CUgraphNode>hSrc, <ccuda.CUgraphNode>hDst)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1551
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeCopyAttributes(<ccuda.CUgraphNode>hSrc, <ccuda.CUgraphNode>hDst)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1550
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeCopyAttributes(<ccuda.CUgraphNode>hSrc, <ccuda.CUgraphNode>hDst)
 */
  }

  /* "cuda/ccudart.pyx":1552
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeCopyAttributes(<ccuda.CUgraphNode>hSrc, <ccuda.CUgraphNode>hDst)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphKernelNodeCopyAttributes(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_hSrc), ((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_hDst)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1552, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1553
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeCopyAttributes(<ccuda.CUgraphNode>hSrc, <ccuda.CUgraphNode>hDst)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1554
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeCopyAttributes(<ccuda.CUgraphNode>hSrc, <ccuda.CUgraphNode>hDst)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1553
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeCopyAttributes(<ccuda.CUgraphNode>hSrc, <ccuda.CUgraphNode>hDst)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1555
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, cudaKernelNodeAttrValue* value_out) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1547
 *     return err
 * 
 * cdef cudaError_t cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphKernelNodeCopyAttributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1557
 *     return err
 * 
 * cdef cudaError_t cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, cudaKernelNodeAttrValue* value_out) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphKernelNodeGetAttribute(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_hNode, enum __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrID __pyx_v_attr, union __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrValue *__pyx_v_value_out) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphKernelNodeGetAttribute", __pyx_f[0], 1557, 1, __PYX_ERR(0, 1557, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1559
 * cdef cudaError_t cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, cudaKernelNodeAttrValue* value_out) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1560
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeGetAttribute(<ccuda.CUgraphNode>hNode, <ccuda.CUkernelNodeAttrID>attr, <ccuda.CUkernelNodeAttrValue*>value_out)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1561
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeGetAttribute(<ccuda.CUgraphNode>hNode, <ccuda.CUkernelNodeAttrID>attr, <ccuda.CUkernelNodeAttrValue*>value_out)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1560
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeGetAttribute(<ccuda.CUgraphNode>hNode, <ccuda.CUkernelNodeAttrID>attr, <ccuda.CUkernelNodeAttrValue*>value_out)
 */
  }

  /* "cuda/ccudart.pyx":1562
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeGetAttribute(<ccuda.CUgraphNode>hNode, <ccuda.CUkernelNodeAttrID>attr, <ccuda.CUkernelNodeAttrValue*>value_out)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphKernelNodeGetAttribute(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_hNode), ((__pyx_t_4cuda_5ccuda_CUkernelNodeAttrID)__pyx_v_attr), ((__pyx_t_4cuda_5ccuda_CUkernelNodeAttrValue *)__pyx_v_value_out)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1562, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1563
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeGetAttribute(<ccuda.CUgraphNode>hNode, <ccuda.CUkernelNodeAttrID>attr, <ccuda.CUkernelNodeAttrValue*>value_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1564
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeGetAttribute(<ccuda.CUgraphNode>hNode, <ccuda.CUkernelNodeAttrID>attr, <ccuda.CUkernelNodeAttrValue*>value_out)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1563
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeGetAttribute(<ccuda.CUgraphNode>hNode, <ccuda.CUkernelNodeAttrID>attr, <ccuda.CUkernelNodeAttrValue*>value_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1565
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, const cudaKernelNodeAttrValue* value) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1557
 *     return err
 * 
 * cdef cudaError_t cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, cudaKernelNodeAttrValue* value_out) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphKernelNodeGetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1567
 *     return err
 * 
 * cdef cudaError_t cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, const cudaKernelNodeAttrValue* value) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphKernelNodeSetAttribute(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_hNode, enum __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrID __pyx_v_attr, union __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrValue const *__pyx_v_value) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphKernelNodeSetAttribute", __pyx_f[0], 1567, 1, __PYX_ERR(0, 1567, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1569
 * cdef cudaError_t cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, const cudaKernelNodeAttrValue* value) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1570
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeSetAttribute(<ccuda.CUgraphNode>hNode, <ccuda.CUkernelNodeAttrID>attr, <ccuda.CUkernelNodeAttrValue*>value)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1571
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeSetAttribute(<ccuda.CUgraphNode>hNode, <ccuda.CUkernelNodeAttrID>attr, <ccuda.CUkernelNodeAttrValue*>value)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1570
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeSetAttribute(<ccuda.CUgraphNode>hNode, <ccuda.CUkernelNodeAttrID>attr, <ccuda.CUkernelNodeAttrValue*>value)
 */
  }

  /* "cuda/ccudart.pyx":1572
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeSetAttribute(<ccuda.CUgraphNode>hNode, <ccuda.CUkernelNodeAttrID>attr, <ccuda.CUkernelNodeAttrValue*>value)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphKernelNodeSetAttribute(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_hNode), ((__pyx_t_4cuda_5ccuda_CUkernelNodeAttrID)__pyx_v_attr), ((__pyx_t_4cuda_5ccuda_CUkernelNodeAttrValue *)__pyx_v_value)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1572, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1573
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeSetAttribute(<ccuda.CUgraphNode>hNode, <ccuda.CUkernelNodeAttrID>attr, <ccuda.CUkernelNodeAttrValue*>value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1574
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeSetAttribute(<ccuda.CUgraphNode>hNode, <ccuda.CUkernelNodeAttrID>attr, <ccuda.CUkernelNodeAttrValue*>value)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1573
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphKernelNodeSetAttribute(<ccuda.CUgraphNode>hNode, <ccuda.CUkernelNodeAttrID>attr, <ccuda.CUkernelNodeAttrValue*>value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1575
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemcpy3DParms* pCopyParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1567
 *     return err
 * 
 * cdef cudaError_t cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, const cudaKernelNodeAttrValue* value) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphKernelNodeSetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1577
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemcpy3DParms* pCopyParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddMemcpyNode(pGraphNode, graph, pDependencies, numDependencies, pCopyParams)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddMemcpyNode(__pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_pGraphNode, __pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms const *__pyx_v_pCopyParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphAddMemcpyNode", __pyx_f[0], 1577, 1, __PYX_ERR(0, 1577, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1578
 * 
 * cdef cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemcpy3DParms* pCopyParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGraphAddMemcpyNode(pGraphNode, graph, pDependencies, numDependencies, pCopyParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddMemcpyNode1D(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* src, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemcpyNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, __pyx_v_pCopyParams); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1578, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1577
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemcpy3DParms* pCopyParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddMemcpyNode(pGraphNode, graph, pDependencies, numDependencies, pCopyParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddMemcpyNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1580
 *     return _cudaGraphAddMemcpyNode(pGraphNode, graph, pDependencies, numDependencies, pCopyParams)
 * 
 * cdef cudaError_t cudaGraphAddMemcpyNode1D(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* src, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddMemcpyNode1D(pGraphNode, graph, pDependencies, numDependencies, dst, src, count, kind)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddMemcpyNode1D(__pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_pGraphNode, __pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, void *__pyx_v_dst, void const *__pyx_v_src, size_t __pyx_v_count, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind __pyx_v_kind) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphAddMemcpyNode1D", __pyx_f[0], 1580, 1, __PYX_ERR(0, 1580, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1581
 * 
 * cdef cudaError_t cudaGraphAddMemcpyNode1D(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* src, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGraphAddMemcpyNode1D(pGraphNode, graph, pDependencies, numDependencies, dst, src, count, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemcpyNode1D(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, __pyx_v_dst, __pyx_v_src, __pyx_v_count, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1581, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1580
 *     return _cudaGraphAddMemcpyNode(pGraphNode, graph, pDependencies, numDependencies, pCopyParams)
 * 
 * cdef cudaError_t cudaGraphAddMemcpyNode1D(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* src, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddMemcpyNode1D(pGraphNode, graph, pDependencies, numDependencies, dst, src, count, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddMemcpyNode1D", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1583
 *     return _cudaGraphAddMemcpyNode1D(pGraphNode, graph, pDependencies, numDependencies, dst, src, count, kind)
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemcpyNodeGetParams(node, pNodeParams)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphMemcpyNodeGetParams(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms *__pyx_v_pNodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphMemcpyNodeGetParams", __pyx_f[0], 1583, 1, __PYX_ERR(0, 1583, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1584
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGraphMemcpyNodeGetParams(node, pNodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemcpyNodeGetParams(__pyx_v_node, __pyx_v_pNodeParams); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1584, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1583
 *     return _cudaGraphAddMemcpyNode1D(pGraphNode, graph, pDependencies, numDependencies, dst, src, count, kind)
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemcpyNodeGetParams(node, pNodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphMemcpyNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1586
 *     return _cudaGraphMemcpyNodeGetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemcpyNodeSetParams(node, pNodeParams)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphMemcpyNodeSetParams(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms const *__pyx_v_pNodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphMemcpyNodeSetParams", __pyx_f[0], 1586, 1, __PYX_ERR(0, 1586, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1587
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGraphMemcpyNodeSetParams(node, pNodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemcpyNodeSetParams(__pyx_v_node, __pyx_v_pNodeParams); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1587, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1586
 *     return _cudaGraphMemcpyNodeGetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemcpyNodeSetParams(node, pNodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphMemcpyNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1589
 *     return _cudaGraphMemcpyNodeSetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemcpyNodeSetParams1D(node, dst, src, count, kind)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphMemcpyNodeSetParams1D(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, void *__pyx_v_dst, void const *__pyx_v_src, size_t __pyx_v_count, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind __pyx_v_kind) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphMemcpyNodeSetParams1D", __pyx_f[0], 1589, 1, __PYX_ERR(0, 1589, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1590
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGraphMemcpyNodeSetParams1D(node, dst, src, count, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemsetParams* pMemsetParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemcpyNodeSetParams1D(__pyx_v_node, __pyx_v_dst, __pyx_v_src, __pyx_v_count, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1590, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1589
 *     return _cudaGraphMemcpyNodeSetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemcpyNodeSetParams1D(node, dst, src, count, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphMemcpyNodeSetParams1D", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1592
 *     return _cudaGraphMemcpyNodeSetParams1D(node, dst, src, count, kind)
 * 
 * cdef cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemsetParams* pMemsetParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddMemsetNode(pGraphNode, graph, pDependencies, numDependencies, pMemsetParams)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddMemsetNode(__pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_pGraphNode, __pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct __pyx_t_4cuda_7ccudart_cudaMemsetParams const *__pyx_v_pMemsetParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphAddMemsetNode", __pyx_f[0], 1592, 1, __PYX_ERR(0, 1592, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1593
 * 
 * cdef cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemsetParams* pMemsetParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGraphAddMemsetNode(pGraphNode, graph, pDependencies, numDependencies, pMemsetParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemsetNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, __pyx_v_pMemsetParams); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1593, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1592
 *     return _cudaGraphMemcpyNodeSetParams1D(node, dst, src, count, kind)
 * 
 * cdef cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemsetParams* pMemsetParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddMemsetNode(pGraphNode, graph, pDependencies, numDependencies, pMemsetParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddMemsetNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1595
 *     return _cudaGraphAddMemsetNode(pGraphNode, graph, pDependencies, numDependencies, pMemsetParams)
 * 
 * cdef cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphMemsetNodeGetParams(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, struct __pyx_t_4cuda_7ccudart_cudaMemsetParams *__pyx_v_pNodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphMemsetNodeGetParams", __pyx_f[0], 1595, 1, __PYX_ERR(0, 1595, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1597
 * cdef cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1598
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphMemsetNodeGetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1599
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphMemsetNodeGetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1598
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphMemsetNodeGetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 */
  }

  /* "cuda/ccudart.pyx":1600
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphMemsetNodeGetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphMemsetNodeGetParams(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_node), ((__pyx_t_4cuda_5ccuda_CUDA_MEMSET_NODE_PARAMS *)__pyx_v_pNodeParams)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1600, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1601
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphMemsetNodeGetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1602
 *     err = <cudaError_t>ccuda._cuGraphMemsetNodeGetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1601
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphMemsetNodeGetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1603
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1595
 *     return _cudaGraphAddMemsetNode(pGraphNode, graph, pDependencies, numDependencies, pMemsetParams)
 * 
 * cdef cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphMemsetNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1605
 *     return err
 * 
 * cdef cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphMemsetNodeSetParams(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, struct __pyx_t_4cuda_7ccudart_cudaMemsetParams const *__pyx_v_pNodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphMemsetNodeSetParams", __pyx_f[0], 1605, 1, __PYX_ERR(0, 1605, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1607
 * cdef cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1608
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphMemsetNodeSetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1609
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphMemsetNodeSetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1608
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphMemsetNodeSetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 */
  }

  /* "cuda/ccudart.pyx":1610
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphMemsetNodeSetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphMemsetNodeSetParams(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_node), ((__pyx_t_4cuda_5ccuda_CUDA_MEMSET_NODE_PARAMS *)__pyx_v_pNodeParams)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1610, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1611
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphMemsetNodeSetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1612
 *     err = <cudaError_t>ccuda._cuGraphMemsetNodeSetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1611
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphMemsetNodeSetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1613
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddHostNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaHostNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1605
 *     return err
 * 
 * cdef cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphMemsetNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1615
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddHostNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaHostNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddHostNode(__pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_pGraphNode, __pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct __pyx_t_4cuda_7ccudart_cudaHostNodeParams const *__pyx_v_pNodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphAddHostNode", __pyx_f[0], 1615, 1, __PYX_ERR(0, 1615, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1617
 * cdef cudaError_t cudaGraphAddHostNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaHostNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1618
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddHostNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1619
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphAddHostNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1618
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddHostNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 */
  }

  /* "cuda/ccudart.pyx":1620
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddHostNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddHostNode(((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pGraphNode), ((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_graph), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pDependencies), __pyx_v_numDependencies, ((__pyx_t_4cuda_5ccuda_CUDA_HOST_NODE_PARAMS *)__pyx_v_pNodeParams)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1620, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1621
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddHostNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1622
 *     err = <cudaError_t>ccuda._cuGraphAddHostNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1621
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddHostNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1623
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1615
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddHostNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaHostNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddHostNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1625
 *     return err
 * 
 * cdef cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphHostNodeGetParams(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, struct __pyx_t_4cuda_7ccudart_cudaHostNodeParams *__pyx_v_pNodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphHostNodeGetParams", __pyx_f[0], 1625, 1, __PYX_ERR(0, 1625, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1627
 * cdef cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1628
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphHostNodeGetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1629
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphHostNodeGetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1628
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphHostNodeGetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 */
  }

  /* "cuda/ccudart.pyx":1630
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphHostNodeGetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphHostNodeGetParams(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_node), ((__pyx_t_4cuda_5ccuda_CUDA_HOST_NODE_PARAMS *)__pyx_v_pNodeParams)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1630, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1631
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphHostNodeGetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1632
 *     err = <cudaError_t>ccuda._cuGraphHostNodeGetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1631
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphHostNodeGetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1633
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1625
 *     return err
 * 
 * cdef cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphHostNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1635
 *     return err
 * 
 * cdef cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphHostNodeSetParams(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, struct __pyx_t_4cuda_7ccudart_cudaHostNodeParams const *__pyx_v_pNodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphHostNodeSetParams", __pyx_f[0], 1635, 1, __PYX_ERR(0, 1635, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1637
 * cdef cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1638
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphHostNodeSetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1639
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphHostNodeSetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1638
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphHostNodeSetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 */
  }

  /* "cuda/ccudart.pyx":1640
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphHostNodeSetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphHostNodeSetParams(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_node), ((__pyx_t_4cuda_5ccuda_CUDA_HOST_NODE_PARAMS *)__pyx_v_pNodeParams)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1640, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1641
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphHostNodeSetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1642
 *     err = <cudaError_t>ccuda._cuGraphHostNodeSetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1641
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphHostNodeSetParams(<ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1643
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraph_t childGraph) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1635
 *     return err
 * 
 * cdef cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphHostNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1645
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraph_t childGraph) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddChildGraphNode(__pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_pGraphNode, __pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, __pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_childGraph) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphAddChildGraphNode", __pyx_f[0], 1645, 1, __PYX_ERR(0, 1645, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1647
 * cdef cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraph_t childGraph) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1648
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddChildGraphNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUgraph>childGraph)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1649
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphAddChildGraphNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUgraph>childGraph)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1648
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddChildGraphNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUgraph>childGraph)
 */
  }

  /* "cuda/ccudart.pyx":1650
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddChildGraphNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUgraph>childGraph)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddChildGraphNode(((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pGraphNode), ((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_graph), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pDependencies), __pyx_v_numDependencies, ((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_childGraph)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1650, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1651
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddChildGraphNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUgraph>childGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1652
 *     err = <cudaError_t>ccuda._cuGraphAddChildGraphNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUgraph>childGraph)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1651
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddChildGraphNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUgraph>childGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1653
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t* pGraph) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1645
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraph_t childGraph) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddChildGraphNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1655
 *     return err
 * 
 * cdef cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t* pGraph) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphChildGraphNodeGetGraph(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, __pyx_t_4cuda_7ccudart_cudaGraph_t *__pyx_v_pGraph) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphChildGraphNodeGetGraph", __pyx_f[0], 1655, 1, __PYX_ERR(0, 1655, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1657
 * cdef cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t* pGraph) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1658
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphChildGraphNodeGetGraph(<ccuda.CUgraphNode>node, <ccuda.CUgraph*>pGraph)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1659
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphChildGraphNodeGetGraph(<ccuda.CUgraphNode>node, <ccuda.CUgraph*>pGraph)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1658
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphChildGraphNodeGetGraph(<ccuda.CUgraphNode>node, <ccuda.CUgraph*>pGraph)
 */
  }

  /* "cuda/ccudart.pyx":1660
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphChildGraphNodeGetGraph(<ccuda.CUgraphNode>node, <ccuda.CUgraph*>pGraph)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphChildGraphNodeGetGraph(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_node), ((__pyx_t_4cuda_5ccuda_CUgraph *)__pyx_v_pGraph)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1660, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1661
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphChildGraphNodeGetGraph(<ccuda.CUgraphNode>node, <ccuda.CUgraph*>pGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1662
 *     err = <cudaError_t>ccuda._cuGraphChildGraphNodeGetGraph(<ccuda.CUgraphNode>node, <ccuda.CUgraph*>pGraph)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1661
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphChildGraphNodeGetGraph(<ccuda.CUgraphNode>node, <ccuda.CUgraph*>pGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1663
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1655
 *     return err
 * 
 * cdef cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t* pGraph) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphChildGraphNodeGetGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1665
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddEmptyNode(__pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_pGraphNode, __pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphAddEmptyNode", __pyx_f[0], 1665, 1, __PYX_ERR(0, 1665, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1667
 * cdef cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1668
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddEmptyNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1669
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphAddEmptyNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1668
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddEmptyNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies)
 */
  }

  /* "cuda/ccudart.pyx":1670
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddEmptyNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddEmptyNode(((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pGraphNode), ((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_graph), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pDependencies), __pyx_v_numDependencies); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1670, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1671
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddEmptyNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1672
 *     err = <cudaError_t>ccuda._cuGraphAddEmptyNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1671
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddEmptyNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1673
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddEventRecordNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1665
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddEmptyNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1675
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddEventRecordNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddEventRecordNode(__pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_pGraphNode, __pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, __pyx_t_4cuda_7ccudart_cudaEvent_t __pyx_v_event) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphAddEventRecordNode", __pyx_f[0], 1675, 1, __PYX_ERR(0, 1675, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1677
 * cdef cudaError_t cudaGraphAddEventRecordNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1678
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddEventRecordNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUevent>event)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1679
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphAddEventRecordNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUevent>event)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1678
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddEventRecordNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUevent>event)
 */
  }

  /* "cuda/ccudart.pyx":1680
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddEventRecordNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUevent>event)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddEventRecordNode(((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pGraphNode), ((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_graph), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pDependencies), __pyx_v_numDependencies, ((__pyx_t_4cuda_5ccuda_CUevent)__pyx_v_event)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1680, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1681
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddEventRecordNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1682
 *     err = <cudaError_t>ccuda._cuGraphAddEventRecordNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUevent>event)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1681
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddEventRecordNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1683
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1675
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddEventRecordNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddEventRecordNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1685
 *     return err
 * 
 * cdef cudaError_t cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphEventRecordNodeGetEvent(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, __pyx_t_4cuda_7ccudart_cudaEvent_t *__pyx_v_event_out) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphEventRecordNodeGetEvent", __pyx_f[0], 1685, 1, __PYX_ERR(0, 1685, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1687
 * cdef cudaError_t cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1688
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphEventRecordNodeGetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent*>event_out)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1689
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphEventRecordNodeGetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent*>event_out)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1688
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphEventRecordNodeGetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent*>event_out)
 */
  }

  /* "cuda/ccudart.pyx":1690
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphEventRecordNodeGetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent*>event_out)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphEventRecordNodeGetEvent(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_node), ((__pyx_t_4cuda_5ccuda_CUevent *)__pyx_v_event_out)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1690, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1691
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphEventRecordNodeGetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent*>event_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1692
 *     err = <cudaError_t>ccuda._cuGraphEventRecordNodeGetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent*>event_out)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1691
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphEventRecordNodeGetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent*>event_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1693
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1685
 *     return err
 * 
 * cdef cudaError_t cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphEventRecordNodeGetEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1695
 *     return err
 * 
 * cdef cudaError_t cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphEventRecordNodeSetEvent(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, __pyx_t_4cuda_7ccudart_cudaEvent_t __pyx_v_event) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphEventRecordNodeSetEvent", __pyx_f[0], 1695, 1, __PYX_ERR(0, 1695, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1697
 * cdef cudaError_t cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1698
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphEventRecordNodeSetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent>event)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1699
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphEventRecordNodeSetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent>event)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1698
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphEventRecordNodeSetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent>event)
 */
  }

  /* "cuda/ccudart.pyx":1700
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphEventRecordNodeSetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent>event)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphEventRecordNodeSetEvent(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_node), ((__pyx_t_4cuda_5ccuda_CUevent)__pyx_v_event)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1700, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1701
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphEventRecordNodeSetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1702
 *     err = <cudaError_t>ccuda._cuGraphEventRecordNodeSetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent>event)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1701
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphEventRecordNodeSetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1703
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddEventWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1695
 *     return err
 * 
 * cdef cudaError_t cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphEventRecordNodeSetEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1705
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddEventWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddEventWaitNode(__pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_pGraphNode, __pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, __pyx_t_4cuda_7ccudart_cudaEvent_t __pyx_v_event) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphAddEventWaitNode", __pyx_f[0], 1705, 1, __PYX_ERR(0, 1705, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1707
 * cdef cudaError_t cudaGraphAddEventWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1708
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddEventWaitNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUevent>event)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1709
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphAddEventWaitNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUevent>event)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1708
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddEventWaitNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUevent>event)
 */
  }

  /* "cuda/ccudart.pyx":1710
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddEventWaitNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUevent>event)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddEventWaitNode(((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pGraphNode), ((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_graph), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pDependencies), __pyx_v_numDependencies, ((__pyx_t_4cuda_5ccuda_CUevent)__pyx_v_event)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1710, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1711
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddEventWaitNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1712
 *     err = <cudaError_t>ccuda._cuGraphAddEventWaitNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUevent>event)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1711
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddEventWaitNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1713
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1705
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddEventWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddEventWaitNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1715
 *     return err
 * 
 * cdef cudaError_t cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphEventWaitNodeGetEvent(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, __pyx_t_4cuda_7ccudart_cudaEvent_t *__pyx_v_event_out) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphEventWaitNodeGetEvent", __pyx_f[0], 1715, 1, __PYX_ERR(0, 1715, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1717
 * cdef cudaError_t cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1718
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphEventWaitNodeGetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent*>event_out)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1719
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphEventWaitNodeGetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent*>event_out)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1718
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphEventWaitNodeGetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent*>event_out)
 */
  }

  /* "cuda/ccudart.pyx":1720
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphEventWaitNodeGetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent*>event_out)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphEventWaitNodeGetEvent(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_node), ((__pyx_t_4cuda_5ccuda_CUevent *)__pyx_v_event_out)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1720, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1721
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphEventWaitNodeGetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent*>event_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1722
 *     err = <cudaError_t>ccuda._cuGraphEventWaitNodeGetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent*>event_out)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1721
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphEventWaitNodeGetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent*>event_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1723
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1715
 *     return err
 * 
 * cdef cudaError_t cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphEventWaitNodeGetEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1725
 *     return err
 * 
 * cdef cudaError_t cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphEventWaitNodeSetEvent(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, __pyx_t_4cuda_7ccudart_cudaEvent_t __pyx_v_event) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphEventWaitNodeSetEvent", __pyx_f[0], 1725, 1, __PYX_ERR(0, 1725, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1727
 * cdef cudaError_t cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1728
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphEventWaitNodeSetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent>event)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1729
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphEventWaitNodeSetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent>event)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1728
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphEventWaitNodeSetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent>event)
 */
  }

  /* "cuda/ccudart.pyx":1730
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphEventWaitNodeSetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent>event)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphEventWaitNodeSetEvent(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_node), ((__pyx_t_4cuda_5ccuda_CUevent)__pyx_v_event)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1730, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1731
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphEventWaitNodeSetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1732
 *     err = <cudaError_t>ccuda._cuGraphEventWaitNodeSetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent>event)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1731
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphEventWaitNodeSetEvent(<ccuda.CUgraphNode>node, <ccuda.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1733
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1725
 *     return err
 * 
 * cdef cudaError_t cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphEventWaitNodeSetEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1735
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddExternalSemaphoresSignalNode(__pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_pGraphNode, __pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreSignalNodeParams const *__pyx_v_nodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphAddExternalSemaphoresSignalNode", __pyx_f[0], 1735, 1, __PYX_ERR(0, 1735, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1737
 * cdef cudaError_t cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1738
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddExternalSemaphoresSignalNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1739
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphAddExternalSemaphoresSignalNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1738
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddExternalSemaphoresSignalNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 */
  }

  /* "cuda/ccudart.pyx":1740
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddExternalSemaphoresSignalNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddExternalSemaphoresSignalNode(((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pGraphNode), ((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_graph), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pDependencies), __pyx_v_numDependencies, ((__pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *)__pyx_v_nodeParams)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1740, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1741
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddExternalSemaphoresSignalNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1742
 *     err = <cudaError_t>ccuda._cuGraphAddExternalSemaphoresSignalNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1741
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddExternalSemaphoresSignalNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1743
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams* params_out) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1735
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddExternalSemaphoresSignalNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1745
 *     return err
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams* params_out) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExternalSemaphoresSignalNodeGetParams(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_hNode, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreSignalNodeParams *__pyx_v_params_out) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphExternalSemaphoresSignalNodeGetParams", __pyx_f[0], 1745, 1, __PYX_ERR(0, 1745, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1747
 * cdef cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams* params_out) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1748
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresSignalNodeGetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>params_out)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1749
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresSignalNodeGetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>params_out)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1748
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresSignalNodeGetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>params_out)
 */
  }

  /* "cuda/ccudart.pyx":1750
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresSignalNodeGetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>params_out)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphExternalSemaphoresSignalNodeGetParams(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_hNode), ((__pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *)__pyx_v_params_out)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1750, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1751
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresSignalNodeGetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>params_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1752
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresSignalNodeGetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>params_out)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1751
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresSignalNodeGetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>params_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1753
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1745
 *     return err
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams* params_out) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphExternalSemaphoresSignalNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1755
 *     return err
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExternalSemaphoresSignalNodeSetParams(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_hNode, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreSignalNodeParams const *__pyx_v_nodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphExternalSemaphoresSignalNodeSetParams", __pyx_f[0], 1755, 1, __PYX_ERR(0, 1755, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1757
 * cdef cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1758
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresSignalNodeSetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1759
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresSignalNodeSetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1758
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresSignalNodeSetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 */
  }

  /* "cuda/ccudart.pyx":1760
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresSignalNodeSetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphExternalSemaphoresSignalNodeSetParams(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_hNode), ((__pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *)__pyx_v_nodeParams)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1760, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1761
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresSignalNodeSetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1762
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresSignalNodeSetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1761
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresSignalNodeSetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1763
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1755
 *     return err
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphExternalSemaphoresSignalNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1765
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddExternalSemaphoresWaitNode(__pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_pGraphNode, __pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreWaitNodeParams const *__pyx_v_nodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphAddExternalSemaphoresWaitNode", __pyx_f[0], 1765, 1, __PYX_ERR(0, 1765, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1767
 * cdef cudaError_t cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1768
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddExternalSemaphoresWaitNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1769
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphAddExternalSemaphoresWaitNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1768
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddExternalSemaphoresWaitNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 */
  }

  /* "cuda/ccudart.pyx":1770
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddExternalSemaphoresWaitNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddExternalSemaphoresWaitNode(((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pGraphNode), ((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_graph), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pDependencies), __pyx_v_numDependencies, ((__pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS *)__pyx_v_nodeParams)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1770, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1771
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddExternalSemaphoresWaitNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1772
 *     err = <cudaError_t>ccuda._cuGraphAddExternalSemaphoresWaitNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1771
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddExternalSemaphoresWaitNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1773
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams* params_out) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1765
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddExternalSemaphoresWaitNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1775
 *     return err
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams* params_out) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExternalSemaphoresWaitNodeGetParams(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_hNode, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreWaitNodeParams *__pyx_v_params_out) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphExternalSemaphoresWaitNodeGetParams", __pyx_f[0], 1775, 1, __PYX_ERR(0, 1775, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1777
 * cdef cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams* params_out) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1778
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresWaitNodeGetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>params_out)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1779
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresWaitNodeGetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>params_out)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1778
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresWaitNodeGetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>params_out)
 */
  }

  /* "cuda/ccudart.pyx":1780
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresWaitNodeGetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>params_out)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphExternalSemaphoresWaitNodeGetParams(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_hNode), ((__pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS *)__pyx_v_params_out)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1780, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1781
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresWaitNodeGetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>params_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1782
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresWaitNodeGetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>params_out)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1781
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresWaitNodeGetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>params_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1783
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1775
 *     return err
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams* params_out) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphExternalSemaphoresWaitNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1785
 *     return err
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExternalSemaphoresWaitNodeSetParams(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_hNode, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreWaitNodeParams const *__pyx_v_nodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphExternalSemaphoresWaitNodeSetParams", __pyx_f[0], 1785, 1, __PYX_ERR(0, 1785, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1787
 * cdef cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1788
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresWaitNodeSetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1789
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresWaitNodeSetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1788
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresWaitNodeSetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 */
  }

  /* "cuda/ccudart.pyx":1790
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresWaitNodeSetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphExternalSemaphoresWaitNodeSetParams(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_hNode), ((__pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS *)__pyx_v_nodeParams)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1790, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1791
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresWaitNodeSetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1792
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresWaitNodeSetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1791
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExternalSemaphoresWaitNodeSetParams(<ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1793
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddMemAllocNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaMemAllocNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1785
 *     return err
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphExternalSemaphoresWaitNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1795
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddMemAllocNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaMemAllocNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddMemAllocNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddMemAllocNode(__pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_pGraphNode, __pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct __pyx_t_4cuda_7ccudart_cudaMemAllocNodeParams *__pyx_v_nodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphAddMemAllocNode", __pyx_f[0], 1795, 1, __PYX_ERR(0, 1795, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1796
 * 
 * cdef cudaError_t cudaGraphAddMemAllocNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaMemAllocNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGraphAddMemAllocNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams* params_out) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemAllocNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, __pyx_v_nodeParams); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1796, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1795
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddMemAllocNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaMemAllocNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddMemAllocNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddMemAllocNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1798
 *     return _cudaGraphAddMemAllocNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)
 * 
 * cdef cudaError_t cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams* params_out) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemAllocNodeGetParams(node, params_out)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphMemAllocNodeGetParams(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, struct __pyx_t_4cuda_7ccudart_cudaMemAllocNodeParams *__pyx_v_params_out) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphMemAllocNodeGetParams", __pyx_f[0], 1798, 1, __PYX_ERR(0, 1798, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1799
 * 
 * cdef cudaError_t cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams* params_out) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGraphMemAllocNodeGetParams(node, params_out)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddMemFreeNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dptr) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemAllocNodeGetParams(__pyx_v_node, __pyx_v_params_out); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1799, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1798
 *     return _cudaGraphAddMemAllocNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)
 * 
 * cdef cudaError_t cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams* params_out) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemAllocNodeGetParams(node, params_out)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphMemAllocNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1801
 *     return _cudaGraphMemAllocNodeGetParams(node, params_out)
 * 
 * cdef cudaError_t cudaGraphAddMemFreeNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dptr) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddMemFreeNode(__pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_pGraphNode, __pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, void *__pyx_v_dptr) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphAddMemFreeNode", __pyx_f[0], 1801, 1, __PYX_ERR(0, 1801, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1803
 * cdef cudaError_t cudaGraphAddMemFreeNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dptr) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1804
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddMemFreeNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUdeviceptr>dptr)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1805
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphAddMemFreeNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUdeviceptr>dptr)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1804
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddMemFreeNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUdeviceptr>dptr)
 */
  }

  /* "cuda/ccudart.pyx":1806
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddMemFreeNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUdeviceptr>dptr)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddMemFreeNode(((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pGraphNode), ((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_graph), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pDependencies), __pyx_v_numDependencies, ((__pyx_t_4cuda_5ccuda_CUdeviceptr)__pyx_v_dptr)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1806, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1807
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddMemFreeNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUdeviceptr>dptr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1808
 *     err = <cudaError_t>ccuda._cuGraphAddMemFreeNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUdeviceptr>dptr)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1807
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddMemFreeNode(<ccuda.CUgraphNode*>pGraphNode, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pDependencies, numDependencies, <ccuda.CUdeviceptr>dptr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1809
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void* dptr_out) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1801
 *     return _cudaGraphMemAllocNodeGetParams(node, params_out)
 * 
 * cdef cudaError_t cudaGraphAddMemFreeNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dptr) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddMemFreeNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1811
 *     return err
 * 
 * cdef cudaError_t cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void* dptr_out) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemFreeNodeGetParams(node, dptr_out)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphMemFreeNodeGetParams(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, void *__pyx_v_dptr_out) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphMemFreeNodeGetParams", __pyx_f[0], 1811, 1, __PYX_ERR(0, 1811, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1812
 * 
 * cdef cudaError_t cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void* dptr_out) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGraphMemFreeNodeGetParams(node, dptr_out)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGraphMemTrim(int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemFreeNodeGetParams(__pyx_v_node, __pyx_v_dptr_out); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1812, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1811
 *     return err
 * 
 * cdef cudaError_t cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void* dptr_out) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemFreeNodeGetParams(node, dptr_out)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphMemFreeNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1814
 *     return _cudaGraphMemFreeNodeGetParams(node, dptr_out)
 * 
 * cdef cudaError_t cudaDeviceGraphMemTrim(int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGraphMemTrim(int __pyx_v_device) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceGraphMemTrim", __pyx_f[0], 1814, 1, __PYX_ERR(0, 1814, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1816
 * cdef cudaError_t cudaDeviceGraphMemTrim(int device) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1817
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGraphMemTrim(<ccuda.CUdevice>device)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1818
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuDeviceGraphMemTrim(<ccuda.CUdevice>device)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1817
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGraphMemTrim(<ccuda.CUdevice>device)
 */
  }

  /* "cuda/ccudart.pyx":1819
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGraphMemTrim(<ccuda.CUdevice>device)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuDeviceGraphMemTrim(((__pyx_t_4cuda_5ccuda_CUdevice)__pyx_v_device)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1819, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1820
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGraphMemTrim(<ccuda.CUdevice>device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1821
 *     err = <cudaError_t>ccuda._cuDeviceGraphMemTrim(<ccuda.CUdevice>device)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1820
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGraphMemTrim(<ccuda.CUdevice>device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1822
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1814
 *     return _cudaGraphMemFreeNodeGetParams(node, dptr_out)
 * 
 * cdef cudaError_t cudaDeviceGraphMemTrim(int device) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGraphMemTrim", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1824
 *     return err
 * 
 * cdef cudaError_t cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetGraphMemAttribute(int __pyx_v_device, enum __pyx_t_4cuda_7ccudart_cudaGraphMemAttributeType __pyx_v_attr, void *__pyx_v_value) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceGetGraphMemAttribute", __pyx_f[0], 1824, 1, __PYX_ERR(0, 1824, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1826
 * cdef cudaError_t cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1827
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGetGraphMemAttribute(<ccuda.CUdevice>device, <ccuda.CUgraphMem_attribute>attr, value)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1828
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuDeviceGetGraphMemAttribute(<ccuda.CUdevice>device, <ccuda.CUgraphMem_attribute>attr, value)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1827
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGetGraphMemAttribute(<ccuda.CUdevice>device, <ccuda.CUgraphMem_attribute>attr, value)
 */
  }

  /* "cuda/ccudart.pyx":1829
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGetGraphMemAttribute(<ccuda.CUdevice>device, <ccuda.CUgraphMem_attribute>attr, value)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuDeviceGetGraphMemAttribute(((__pyx_t_4cuda_5ccuda_CUdevice)__pyx_v_device), ((__pyx_t_4cuda_5ccuda_CUgraphMem_attribute)__pyx_v_attr), __pyx_v_value); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1829, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1830
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGetGraphMemAttribute(<ccuda.CUdevice>device, <ccuda.CUgraphMem_attribute>attr, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1831
 *     err = <cudaError_t>ccuda._cuDeviceGetGraphMemAttribute(<ccuda.CUdevice>device, <ccuda.CUgraphMem_attribute>attr, value)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1830
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceGetGraphMemAttribute(<ccuda.CUdevice>device, <ccuda.CUgraphMem_attribute>attr, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1832
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1824
 *     return err
 * 
 * cdef cudaError_t cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetGraphMemAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1834
 *     return err
 * 
 * cdef cudaError_t cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceSetGraphMemAttribute(int __pyx_v_device, enum __pyx_t_4cuda_7ccudart_cudaGraphMemAttributeType __pyx_v_attr, void *__pyx_v_value) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaDeviceSetGraphMemAttribute", __pyx_f[0], 1834, 1, __PYX_ERR(0, 1834, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1836
 * cdef cudaError_t cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1837
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceSetGraphMemAttribute(<ccuda.CUdevice>device, <ccuda.CUgraphMem_attribute>attr, value)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1838
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuDeviceSetGraphMemAttribute(<ccuda.CUdevice>device, <ccuda.CUgraphMem_attribute>attr, value)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1837
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceSetGraphMemAttribute(<ccuda.CUdevice>device, <ccuda.CUgraphMem_attribute>attr, value)
 */
  }

  /* "cuda/ccudart.pyx":1839
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceSetGraphMemAttribute(<ccuda.CUdevice>device, <ccuda.CUgraphMem_attribute>attr, value)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuDeviceSetGraphMemAttribute(((__pyx_t_4cuda_5ccuda_CUdevice)__pyx_v_device), ((__pyx_t_4cuda_5ccuda_CUgraphMem_attribute)__pyx_v_attr), __pyx_v_value); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1839, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1840
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceSetGraphMemAttribute(<ccuda.CUdevice>device, <ccuda.CUgraphMem_attribute>attr, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1841
 *     err = <cudaError_t>ccuda._cuDeviceSetGraphMemAttribute(<ccuda.CUdevice>device, <ccuda.CUgraphMem_attribute>attr, value)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1840
 *         return err
 *     err = <cudaError_t>ccuda._cuDeviceSetGraphMemAttribute(<ccuda.CUdevice>device, <ccuda.CUgraphMem_attribute>attr, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1842
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphClone(cudaGraph_t* pGraphClone, cudaGraph_t originalGraph) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1834
 *     return err
 * 
 * cdef cudaError_t cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaDeviceSetGraphMemAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1844
 *     return err
 * 
 * cdef cudaError_t cudaGraphClone(cudaGraph_t* pGraphClone, cudaGraph_t originalGraph) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphClone(__pyx_t_4cuda_7ccudart_cudaGraph_t *__pyx_v_pGraphClone, __pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_originalGraph) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphClone", __pyx_f[0], 1844, 1, __PYX_ERR(0, 1844, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1846
 * cdef cudaError_t cudaGraphClone(cudaGraph_t* pGraphClone, cudaGraph_t originalGraph) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1847
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphClone(<ccuda.CUgraph*>pGraphClone, <ccuda.CUgraph>originalGraph)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1848
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphClone(<ccuda.CUgraph*>pGraphClone, <ccuda.CUgraph>originalGraph)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1847
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphClone(<ccuda.CUgraph*>pGraphClone, <ccuda.CUgraph>originalGraph)
 */
  }

  /* "cuda/ccudart.pyx":1849
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphClone(<ccuda.CUgraph*>pGraphClone, <ccuda.CUgraph>originalGraph)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphClone(((__pyx_t_4cuda_5ccuda_CUgraph *)__pyx_v_pGraphClone), ((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_originalGraph)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1849, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1850
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphClone(<ccuda.CUgraph*>pGraphClone, <ccuda.CUgraph>originalGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1851
 *     err = <cudaError_t>ccuda._cuGraphClone(<ccuda.CUgraph*>pGraphClone, <ccuda.CUgraph>originalGraph)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1850
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphClone(<ccuda.CUgraph*>pGraphClone, <ccuda.CUgraph>originalGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1852
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t* pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1844
 *     return err
 * 
 * cdef cudaError_t cudaGraphClone(cudaGraph_t* pGraphClone, cudaGraph_t originalGraph) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphClone", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1854
 *     return err
 * 
 * cdef cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t* pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphNodeFindInClone(__pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_pNode, __pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_originalNode, __pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_clonedGraph) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphNodeFindInClone", __pyx_f[0], 1854, 1, __PYX_ERR(0, 1854, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1856
 * cdef cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t* pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1857
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeFindInClone(<ccuda.CUgraphNode*>pNode, <ccuda.CUgraphNode>originalNode, <ccuda.CUgraph>clonedGraph)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1858
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphNodeFindInClone(<ccuda.CUgraphNode*>pNode, <ccuda.CUgraphNode>originalNode, <ccuda.CUgraph>clonedGraph)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1857
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeFindInClone(<ccuda.CUgraphNode*>pNode, <ccuda.CUgraphNode>originalNode, <ccuda.CUgraph>clonedGraph)
 */
  }

  /* "cuda/ccudart.pyx":1859
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeFindInClone(<ccuda.CUgraphNode*>pNode, <ccuda.CUgraphNode>originalNode, <ccuda.CUgraph>clonedGraph)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphNodeFindInClone(((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pNode), ((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_originalNode), ((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_clonedGraph)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1859, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1860
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeFindInClone(<ccuda.CUgraphNode*>pNode, <ccuda.CUgraphNode>originalNode, <ccuda.CUgraph>clonedGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1861
 *     err = <cudaError_t>ccuda._cuGraphNodeFindInClone(<ccuda.CUgraphNode*>pNode, <ccuda.CUgraphNode>originalNode, <ccuda.CUgraph>clonedGraph)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1860
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeFindInClone(<ccuda.CUgraphNode*>pNode, <ccuda.CUgraphNode>originalNode, <ccuda.CUgraph>clonedGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1862
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType* pType) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1854
 *     return err
 * 
 * cdef cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t* pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphNodeFindInClone", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1864
 *     return err
 * 
 * cdef cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType* pType) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphNodeGetType(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, enum __pyx_t_4cuda_7ccudart_cudaGraphNodeType *__pyx_v_pType) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphNodeGetType", __pyx_f[0], 1864, 1, __PYX_ERR(0, 1864, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1866
 * cdef cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType* pType) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1867
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeGetType(<ccuda.CUgraphNode>node, <ccuda.CUgraphNodeType*>pType)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1868
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphNodeGetType(<ccuda.CUgraphNode>node, <ccuda.CUgraphNodeType*>pType)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1867
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeGetType(<ccuda.CUgraphNode>node, <ccuda.CUgraphNodeType*>pType)
 */
  }

  /* "cuda/ccudart.pyx":1869
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeGetType(<ccuda.CUgraphNode>node, <ccuda.CUgraphNodeType*>pType)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphNodeGetType(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_node), ((__pyx_t_4cuda_5ccuda_CUgraphNodeType *)__pyx_v_pType)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1869, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1870
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeGetType(<ccuda.CUgraphNode>node, <ccuda.CUgraphNodeType*>pType)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1871
 *     err = <cudaError_t>ccuda._cuGraphNodeGetType(<ccuda.CUgraphNode>node, <ccuda.CUgraphNodeType*>pType)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1870
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeGetType(<ccuda.CUgraphNode>node, <ccuda.CUgraphNodeType*>pType)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1872
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t* nodes, size_t* numNodes) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1864
 *     return err
 * 
 * cdef cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType* pType) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphNodeGetType", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1874
 *     return err
 * 
 * cdef cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t* nodes, size_t* numNodes) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphGetNodes(__pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_nodes, size_t *__pyx_v_numNodes) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphGetNodes", __pyx_f[0], 1874, 1, __PYX_ERR(0, 1874, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1876
 * cdef cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t* nodes, size_t* numNodes) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1877
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphGetNodes(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>nodes, numNodes)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1878
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphGetNodes(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>nodes, numNodes)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1877
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphGetNodes(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>nodes, numNodes)
 */
  }

  /* "cuda/ccudart.pyx":1879
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphGetNodes(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>nodes, numNodes)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphGetNodes(((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_graph), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_nodes), __pyx_v_numNodes); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1879, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1880
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphGetNodes(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>nodes, numNodes)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1881
 *     err = <cudaError_t>ccuda._cuGraphGetNodes(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>nodes, numNodes)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1880
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphGetNodes(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>nodes, numNodes)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1882
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t* pRootNodes, size_t* pNumRootNodes) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1874
 *     return err
 * 
 * cdef cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t* nodes, size_t* numNodes) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphGetNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1884
 *     return err
 * 
 * cdef cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t* pRootNodes, size_t* pNumRootNodes) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphGetRootNodes(__pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_pRootNodes, size_t *__pyx_v_pNumRootNodes) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphGetRootNodes", __pyx_f[0], 1884, 1, __PYX_ERR(0, 1884, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1886
 * cdef cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t* pRootNodes, size_t* pNumRootNodes) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1887
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphGetRootNodes(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pRootNodes, pNumRootNodes)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1888
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphGetRootNodes(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pRootNodes, pNumRootNodes)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1887
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphGetRootNodes(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pRootNodes, pNumRootNodes)
 */
  }

  /* "cuda/ccudart.pyx":1889
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphGetRootNodes(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pRootNodes, pNumRootNodes)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphGetRootNodes(((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_graph), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pRootNodes), __pyx_v_pNumRootNodes); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1889, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1890
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphGetRootNodes(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pRootNodes, pNumRootNodes)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1891
 *     err = <cudaError_t>ccuda._cuGraphGetRootNodes(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pRootNodes, pNumRootNodes)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1890
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphGetRootNodes(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pRootNodes, pNumRootNodes)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1892
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, size_t* numEdges) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1884
 *     return err
 * 
 * cdef cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t* pRootNodes, size_t* pNumRootNodes) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphGetRootNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1894
 *     return err
 * 
 * cdef cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, size_t* numEdges) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphGetEdges(__pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_from_, __pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_to, size_t *__pyx_v_numEdges) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphGetEdges", __pyx_f[0], 1894, 1, __PYX_ERR(0, 1894, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1896
 * cdef cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, size_t* numEdges) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1897
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphGetEdges(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numEdges)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1898
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphGetEdges(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numEdges)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1897
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphGetEdges(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numEdges)
 */
  }

  /* "cuda/ccudart.pyx":1899
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphGetEdges(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numEdges)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphGetEdges(((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_graph), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_from_), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_to), __pyx_v_numEdges); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1899, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1900
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphGetEdges(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numEdges)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1901
 *     err = <cudaError_t>ccuda._cuGraphGetEdges(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numEdges)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1900
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphGetEdges(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numEdges)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1902
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, size_t* pNumDependencies) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1894
 *     return err
 * 
 * cdef cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, size_t* numEdges) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphGetEdges", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1904
 *     return err
 * 
 * cdef cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, size_t* pNumDependencies) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphNodeGetDependencies(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, __pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_pDependencies, size_t *__pyx_v_pNumDependencies) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphNodeGetDependencies", __pyx_f[0], 1904, 1, __PYX_ERR(0, 1904, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1906
 * cdef cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, size_t* pNumDependencies) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1907
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeGetDependencies(<ccuda.CUgraphNode>node, <ccuda.CUgraphNode*>pDependencies, pNumDependencies)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1908
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphNodeGetDependencies(<ccuda.CUgraphNode>node, <ccuda.CUgraphNode*>pDependencies, pNumDependencies)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1907
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeGetDependencies(<ccuda.CUgraphNode>node, <ccuda.CUgraphNode*>pDependencies, pNumDependencies)
 */
  }

  /* "cuda/ccudart.pyx":1909
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeGetDependencies(<ccuda.CUgraphNode>node, <ccuda.CUgraphNode*>pDependencies, pNumDependencies)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphNodeGetDependencies(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_node), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pDependencies), __pyx_v_pNumDependencies); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1909, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1910
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeGetDependencies(<ccuda.CUgraphNode>node, <ccuda.CUgraphNode*>pDependencies, pNumDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1911
 *     err = <cudaError_t>ccuda._cuGraphNodeGetDependencies(<ccuda.CUgraphNode>node, <ccuda.CUgraphNode*>pDependencies, pNumDependencies)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1910
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeGetDependencies(<ccuda.CUgraphNode>node, <ccuda.CUgraphNode*>pDependencies, pNumDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1912
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, size_t* pNumDependentNodes) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1904
 *     return err
 * 
 * cdef cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, size_t* pNumDependencies) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphNodeGetDependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1914
 *     return err
 * 
 * cdef cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, size_t* pNumDependentNodes) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphNodeGetDependentNodes(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, __pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_pDependentNodes, size_t *__pyx_v_pNumDependentNodes) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphNodeGetDependentNodes", __pyx_f[0], 1914, 1, __PYX_ERR(0, 1914, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1916
 * cdef cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, size_t* pNumDependentNodes) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1917
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeGetDependentNodes(<ccuda.CUgraphNode>node, <ccuda.CUgraphNode*>pDependentNodes, pNumDependentNodes)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1918
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphNodeGetDependentNodes(<ccuda.CUgraphNode>node, <ccuda.CUgraphNode*>pDependentNodes, pNumDependentNodes)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1917
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeGetDependentNodes(<ccuda.CUgraphNode>node, <ccuda.CUgraphNode*>pDependentNodes, pNumDependentNodes)
 */
  }

  /* "cuda/ccudart.pyx":1919
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeGetDependentNodes(<ccuda.CUgraphNode>node, <ccuda.CUgraphNode*>pDependentNodes, pNumDependentNodes)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphNodeGetDependentNodes(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_node), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pDependentNodes), __pyx_v_pNumDependentNodes); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1919, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1920
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeGetDependentNodes(<ccuda.CUgraphNode>node, <ccuda.CUgraphNode*>pDependentNodes, pNumDependentNodes)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1921
 *     err = <cudaError_t>ccuda._cuGraphNodeGetDependentNodes(<ccuda.CUgraphNode>node, <ccuda.CUgraphNode*>pDependentNodes, pNumDependentNodes)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1920
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeGetDependentNodes(<ccuda.CUgraphNode>node, <ccuda.CUgraphNode*>pDependentNodes, pNumDependentNodes)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1922
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1914
 *     return err
 * 
 * cdef cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, size_t* pNumDependentNodes) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphNodeGetDependentNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1924
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddDependencies(__pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *__pyx_v_from_, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *__pyx_v_to, size_t __pyx_v_numDependencies) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphAddDependencies", __pyx_f[0], 1924, 1, __PYX_ERR(0, 1924, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1926
 * cdef cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1927
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddDependencies(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numDependencies)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1928
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphAddDependencies(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numDependencies)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1927
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddDependencies(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numDependencies)
 */
  }

  /* "cuda/ccudart.pyx":1929
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddDependencies(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numDependencies)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddDependencies(((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_graph), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_from_), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_to), __pyx_v_numDependencies); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1929, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1930
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddDependencies(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1931
 *     err = <cudaError_t>ccuda._cuGraphAddDependencies(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numDependencies)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1930
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphAddDependencies(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1932
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1924
 *     return err
 * 
 * cdef cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddDependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1934
 *     return err
 * 
 * cdef cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphRemoveDependencies(__pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *__pyx_v_from_, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *__pyx_v_to, size_t __pyx_v_numDependencies) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphRemoveDependencies", __pyx_f[0], 1934, 1, __PYX_ERR(0, 1934, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1936
 * cdef cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1937
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphRemoveDependencies(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numDependencies)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1938
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphRemoveDependencies(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numDependencies)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1937
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphRemoveDependencies(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numDependencies)
 */
  }

  /* "cuda/ccudart.pyx":1939
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphRemoveDependencies(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numDependencies)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphRemoveDependencies(((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_graph), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_from_), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_to), __pyx_v_numDependencies); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1939, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1940
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphRemoveDependencies(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1941
 *     err = <cudaError_t>ccuda._cuGraphRemoveDependencies(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numDependencies)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1940
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphRemoveDependencies(<ccuda.CUgraph>graph, <ccuda.CUgraphNode*>from_, <ccuda.CUgraphNode*>to, numDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1942
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1934
 *     return err
 * 
 * cdef cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphRemoveDependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1944
 *     return err
 * 
 * cdef cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphDestroyNode(__pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphDestroyNode", __pyx_f[0], 1944, 1, __PYX_ERR(0, 1944, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1946
 * cdef cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1947
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphDestroyNode(<ccuda.CUgraphNode>node)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1948
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphDestroyNode(<ccuda.CUgraphNode>node)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1947
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphDestroyNode(<ccuda.CUgraphNode>node)
 */
  }

  /* "cuda/ccudart.pyx":1949
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphDestroyNode(<ccuda.CUgraphNode>node)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphDestroyNode(((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_node)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1949, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1950
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphDestroyNode(<ccuda.CUgraphNode>node)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1951
 *     err = <cudaError_t>ccuda._cuGraphDestroyNode(<ccuda.CUgraphNode>node)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1950
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphDestroyNode(<ccuda.CUgraphNode>node)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1952
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphInstantiate(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, cudaGraphNode_t* pErrorNode, char* pLogBuffer, size_t bufferSize) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1944
 *     return err
 * 
 * cdef cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphDestroyNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1954
 *     return err
 * 
 * cdef cudaError_t cudaGraphInstantiate(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, cudaGraphNode_t* pErrorNode, char* pLogBuffer, size_t bufferSize) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphInstantiate(__pyx_t_4cuda_7ccudart_cudaGraphExec_t *__pyx_v_pGraphExec, __pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_pErrorNode, char *__pyx_v_pLogBuffer, size_t __pyx_v_bufferSize) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphInstantiate", __pyx_f[0], 1954, 1, __PYX_ERR(0, 1954, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1956
 * cdef cudaError_t cudaGraphInstantiate(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, cudaGraphNode_t* pErrorNode, char* pLogBuffer, size_t bufferSize) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1957
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphInstantiate_v2(<ccuda.CUgraphExec*>pGraphExec, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pErrorNode, pLogBuffer, bufferSize)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1958
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphInstantiate_v2(<ccuda.CUgraphExec*>pGraphExec, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pErrorNode, pLogBuffer, bufferSize)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1957
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphInstantiate_v2(<ccuda.CUgraphExec*>pGraphExec, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pErrorNode, pLogBuffer, bufferSize)
 */
  }

  /* "cuda/ccudart.pyx":1959
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphInstantiate_v2(<ccuda.CUgraphExec*>pGraphExec, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pErrorNode, pLogBuffer, bufferSize)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphInstantiate_v2(((__pyx_t_4cuda_5ccuda_CUgraphExec *)__pyx_v_pGraphExec), ((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_graph), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_pErrorNode), __pyx_v_pLogBuffer, __pyx_v_bufferSize); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1959, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1960
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphInstantiate_v2(<ccuda.CUgraphExec*>pGraphExec, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pErrorNode, pLogBuffer, bufferSize)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1961
 *     err = <cudaError_t>ccuda._cuGraphInstantiate_v2(<ccuda.CUgraphExec*>pGraphExec, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pErrorNode, pLogBuffer, bufferSize)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1960
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphInstantiate_v2(<ccuda.CUgraphExec*>pGraphExec, <ccuda.CUgraph>graph, <ccuda.CUgraphNode*>pErrorNode, pLogBuffer, bufferSize)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1962
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphInstantiateWithFlags(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1954
 *     return err
 * 
 * cdef cudaError_t cudaGraphInstantiate(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, cudaGraphNode_t* pErrorNode, char* pLogBuffer, size_t bufferSize) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphInstantiate", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1964
 *     return err
 * 
 * cdef cudaError_t cudaGraphInstantiateWithFlags(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphInstantiateWithFlags(__pyx_t_4cuda_7ccudart_cudaGraphExec_t *__pyx_v_pGraphExec, __pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, unsigned PY_LONG_LONG __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphInstantiateWithFlags", __pyx_f[0], 1964, 1, __PYX_ERR(0, 1964, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1966
 * cdef cudaError_t cudaGraphInstantiateWithFlags(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1967
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphInstantiateWithFlags(<ccuda.CUgraphExec*>pGraphExec, <ccuda.CUgraph>graph, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1968
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphInstantiateWithFlags(<ccuda.CUgraphExec*>pGraphExec, <ccuda.CUgraph>graph, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1967
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphInstantiateWithFlags(<ccuda.CUgraphExec*>pGraphExec, <ccuda.CUgraph>graph, flags)
 */
  }

  /* "cuda/ccudart.pyx":1969
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphInstantiateWithFlags(<ccuda.CUgraphExec*>pGraphExec, <ccuda.CUgraph>graph, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphInstantiateWithFlags(((__pyx_t_4cuda_5ccuda_CUgraphExec *)__pyx_v_pGraphExec), ((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_graph), __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1969, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":1970
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphInstantiateWithFlags(<ccuda.CUgraphExec*>pGraphExec, <ccuda.CUgraph>graph, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":1971
 *     err = <cudaError_t>ccuda._cuGraphInstantiateWithFlags(<ccuda.CUgraphExec*>pGraphExec, <ccuda.CUgraph>graph, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1970
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphInstantiateWithFlags(<ccuda.CUgraphExec*>pGraphExec, <ccuda.CUgraph>graph, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1972
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1964
 *     return err
 * 
 * cdef cudaError_t cudaGraphInstantiateWithFlags(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphInstantiateWithFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1974
 *     return err
 * 
 * cdef cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecKernelNodeSetParams(__pyx_t_4cuda_7ccudart_cudaGraphExec_t __pyx_v_hGraphExec, __pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, struct __pyx_t_4cuda_7ccudart_cudaKernelNodeParams const *__pyx_v_pNodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_5ccuda_CUDA_KERNEL_NODE_PARAMS __pyx_v__driver_pNodeParams;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  unsigned int __pyx_t_1;
  void **__pyx_t_2;
  int __pyx_t_3;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphExecKernelNodeSetParams", __pyx_f[0], 1974, 1, __PYX_ERR(0, 1974, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1976
 * cdef cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     cdef ccuda.CUDA_KERNEL_NODE_PARAMS _driver_pNodeParams
 *     _driver_pNodeParams.func = <ccuda.CUfunction>pNodeParams[0].func
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":1978
 *     err = m_global.lazyInit()
 *     cdef ccuda.CUDA_KERNEL_NODE_PARAMS _driver_pNodeParams
 *     _driver_pNodeParams.func = <ccuda.CUfunction>pNodeParams[0].func             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.gridDimX = pNodeParams[0].gridDim.x
 *     _driver_pNodeParams.gridDimY = pNodeParams[0].gridDim.y
 */
  __pyx_v__driver_pNodeParams.func = ((__pyx_t_4cuda_5ccuda_CUfunction)(__pyx_v_pNodeParams[0]).func);

  /* "cuda/ccudart.pyx":1979
 *     cdef ccuda.CUDA_KERNEL_NODE_PARAMS _driver_pNodeParams
 *     _driver_pNodeParams.func = <ccuda.CUfunction>pNodeParams[0].func
 *     _driver_pNodeParams.gridDimX = pNodeParams[0].gridDim.x             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.gridDimY = pNodeParams[0].gridDim.y
 *     _driver_pNodeParams.gridDimZ = pNodeParams[0].gridDim.z
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).gridDim.x;
  __pyx_v__driver_pNodeParams.gridDimX = __pyx_t_1;

  /* "cuda/ccudart.pyx":1980
 *     _driver_pNodeParams.func = <ccuda.CUfunction>pNodeParams[0].func
 *     _driver_pNodeParams.gridDimX = pNodeParams[0].gridDim.x
 *     _driver_pNodeParams.gridDimY = pNodeParams[0].gridDim.y             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.gridDimZ = pNodeParams[0].gridDim.z
 *     _driver_pNodeParams.blockDimX = pNodeParams[0].blockDim.x
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).gridDim.y;
  __pyx_v__driver_pNodeParams.gridDimY = __pyx_t_1;

  /* "cuda/ccudart.pyx":1981
 *     _driver_pNodeParams.gridDimX = pNodeParams[0].gridDim.x
 *     _driver_pNodeParams.gridDimY = pNodeParams[0].gridDim.y
 *     _driver_pNodeParams.gridDimZ = pNodeParams[0].gridDim.z             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.blockDimX = pNodeParams[0].blockDim.x
 *     _driver_pNodeParams.blockDimY = pNodeParams[0].blockDim.y
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).gridDim.z;
  __pyx_v__driver_pNodeParams.gridDimZ = __pyx_t_1;

  /* "cuda/ccudart.pyx":1982
 *     _driver_pNodeParams.gridDimY = pNodeParams[0].gridDim.y
 *     _driver_pNodeParams.gridDimZ = pNodeParams[0].gridDim.z
 *     _driver_pNodeParams.blockDimX = pNodeParams[0].blockDim.x             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.blockDimY = pNodeParams[0].blockDim.y
 *     _driver_pNodeParams.blockDimZ = pNodeParams[0].blockDim.z
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).blockDim.x;
  __pyx_v__driver_pNodeParams.blockDimX = __pyx_t_1;

  /* "cuda/ccudart.pyx":1983
 *     _driver_pNodeParams.gridDimZ = pNodeParams[0].gridDim.z
 *     _driver_pNodeParams.blockDimX = pNodeParams[0].blockDim.x
 *     _driver_pNodeParams.blockDimY = pNodeParams[0].blockDim.y             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.blockDimZ = pNodeParams[0].blockDim.z
 *     _driver_pNodeParams.sharedMemBytes = pNodeParams[0].sharedMemBytes
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).blockDim.y;
  __pyx_v__driver_pNodeParams.blockDimY = __pyx_t_1;

  /* "cuda/ccudart.pyx":1984
 *     _driver_pNodeParams.blockDimX = pNodeParams[0].blockDim.x
 *     _driver_pNodeParams.blockDimY = pNodeParams[0].blockDim.y
 *     _driver_pNodeParams.blockDimZ = pNodeParams[0].blockDim.z             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.sharedMemBytes = pNodeParams[0].sharedMemBytes
 *     _driver_pNodeParams.kernelParams = pNodeParams[0].kernelParams
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).blockDim.z;
  __pyx_v__driver_pNodeParams.blockDimZ = __pyx_t_1;

  /* "cuda/ccudart.pyx":1985
 *     _driver_pNodeParams.blockDimY = pNodeParams[0].blockDim.y
 *     _driver_pNodeParams.blockDimZ = pNodeParams[0].blockDim.z
 *     _driver_pNodeParams.sharedMemBytes = pNodeParams[0].sharedMemBytes             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.kernelParams = pNodeParams[0].kernelParams
 *     _driver_pNodeParams.extra = pNodeParams[0].extra
 */
  __pyx_t_1 = (__pyx_v_pNodeParams[0]).sharedMemBytes;
  __pyx_v__driver_pNodeParams.sharedMemBytes = __pyx_t_1;

  /* "cuda/ccudart.pyx":1986
 *     _driver_pNodeParams.blockDimZ = pNodeParams[0].blockDim.z
 *     _driver_pNodeParams.sharedMemBytes = pNodeParams[0].sharedMemBytes
 *     _driver_pNodeParams.kernelParams = pNodeParams[0].kernelParams             # <<<<<<<<<<<<<<
 *     _driver_pNodeParams.extra = pNodeParams[0].extra
 * 
 */
  __pyx_t_2 = (__pyx_v_pNodeParams[0]).kernelParams;
  __pyx_v__driver_pNodeParams.kernelParams = __pyx_t_2;

  /* "cuda/ccudart.pyx":1987
 *     _driver_pNodeParams.sharedMemBytes = pNodeParams[0].sharedMemBytes
 *     _driver_pNodeParams.kernelParams = pNodeParams[0].kernelParams
 *     _driver_pNodeParams.extra = pNodeParams[0].extra             # <<<<<<<<<<<<<<
 * 
 *     if err != cudaSuccess:
 */
  __pyx_t_2 = (__pyx_v_pNodeParams[0]).extra;
  __pyx_v__driver_pNodeParams.extra = __pyx_t_2;

  /* "cuda/ccudart.pyx":1989
 *     _driver_pNodeParams.extra = pNodeParams[0].extra
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecKernelNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, &_driver_pNodeParams)
 */
  __pyx_t_3 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_3) {

    /* "cuda/ccudart.pyx":1990
 * 
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphExecKernelNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, &_driver_pNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":1989
 *     _driver_pNodeParams.extra = pNodeParams[0].extra
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecKernelNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, &_driver_pNodeParams)
 */
  }

  /* "cuda/ccudart.pyx":1991
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecKernelNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, &_driver_pNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_4 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecKernelNodeSetParams(((__pyx_t_4cuda_5ccuda_CUgraphExec)__pyx_v_hGraphExec), ((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_node), (&__pyx_v__driver_pNodeParams)); if (unlikely(__pyx_t_4 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1991, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_4);

  /* "cuda/ccudart.pyx":1992
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecKernelNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, &_driver_pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_3 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_3) {

    /* "cuda/ccudart.pyx":1993
 *     err = <cudaError_t>ccuda._cuGraphExecKernelNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, &_driver_pNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":1992
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecKernelNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, &_driver_pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":1994
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1974
 *     return err
 * 
 * cdef cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecKernelNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1996
 *     return err
 * 
 * cdef cudaError_t cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecMemcpyNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecMemcpyNodeSetParams(__pyx_t_4cuda_7ccudart_cudaGraphExec_t __pyx_v_hGraphExec, __pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms const *__pyx_v_pNodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphExecMemcpyNodeSetParams", __pyx_f[0], 1996, 1, __PYX_ERR(0, 1996, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1997
 * 
 * cdef cudaError_t cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGraphExecMemcpyNodeSetParams(hGraphExec, node, pNodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecMemcpyNodeSetParams(__pyx_v_hGraphExec, __pyx_v_node, __pyx_v_pNodeParams); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1997, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1996
 *     return err
 * 
 * cdef cudaError_t cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecMemcpyNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecMemcpyNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1999
 *     return _cudaGraphExecMemcpyNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecMemcpyNodeSetParams1D(hGraphExec, node, dst, src, count, kind)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecMemcpyNodeSetParams1D(__pyx_t_4cuda_7ccudart_cudaGraphExec_t __pyx_v_hGraphExec, __pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, void *__pyx_v_dst, void const *__pyx_v_src, size_t __pyx_v_count, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind __pyx_v_kind) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphExecMemcpyNodeSetParams1D", __pyx_f[0], 1999, 1, __PYX_ERR(0, 1999, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2000
 * 
 * cdef cudaError_t cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGraphExecMemcpyNodeSetParams1D(hGraphExec, node, dst, src, count, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecMemcpyNodeSetParams1D(__pyx_v_hGraphExec, __pyx_v_node, __pyx_v_dst, __pyx_v_src, __pyx_v_count, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2000, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1999
 *     return _cudaGraphExecMemcpyNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecMemcpyNodeSetParams1D(hGraphExec, node, dst, src, count, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecMemcpyNodeSetParams1D", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2002
 *     return _cudaGraphExecMemcpyNodeSetParams1D(hGraphExec, node, dst, src, count, kind)
 * 
 * cdef cudaError_t cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecMemsetNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecMemsetNodeSetParams(__pyx_t_4cuda_7ccudart_cudaGraphExec_t __pyx_v_hGraphExec, __pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, struct __pyx_t_4cuda_7ccudart_cudaMemsetParams const *__pyx_v_pNodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphExecMemsetNodeSetParams", __pyx_f[0], 2002, 1, __PYX_ERR(0, 2002, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2003
 * 
 * cdef cudaError_t cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGraphExecMemsetNodeSetParams(hGraphExec, node, pNodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecMemsetNodeSetParams(__pyx_v_hGraphExec, __pyx_v_node, __pyx_v_pNodeParams); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2003, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2002
 *     return _cudaGraphExecMemcpyNodeSetParams1D(hGraphExec, node, dst, src, count, kind)
 * 
 * cdef cudaError_t cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecMemsetNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecMemsetNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2005
 *     return _cudaGraphExecMemsetNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecHostNodeSetParams(__pyx_t_4cuda_7ccudart_cudaGraphExec_t __pyx_v_hGraphExec, __pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, struct __pyx_t_4cuda_7ccudart_cudaHostNodeParams const *__pyx_v_pNodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphExecHostNodeSetParams", __pyx_f[0], 2005, 1, __PYX_ERR(0, 2005, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2007
 * cdef cudaError_t cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2008
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecHostNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2009
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphExecHostNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2008
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecHostNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 */
  }

  /* "cuda/ccudart.pyx":2010
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecHostNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecHostNodeSetParams(((__pyx_t_4cuda_5ccuda_CUgraphExec)__pyx_v_hGraphExec), ((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_node), ((__pyx_t_4cuda_5ccuda_CUDA_HOST_NODE_PARAMS *)__pyx_v_pNodeParams)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2010, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2011
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecHostNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2012
 *     err = <cudaError_t>ccuda._cuGraphExecHostNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2011
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecHostNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, <ccuda.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2013
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2005
 *     return _cudaGraphExecMemsetNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecHostNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2015
 *     return err
 * 
 * cdef cudaError_t cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecChildGraphNodeSetParams(__pyx_t_4cuda_7ccudart_cudaGraphExec_t __pyx_v_hGraphExec, __pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_node, __pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_childGraph) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphExecChildGraphNodeSetParams", __pyx_f[0], 2015, 1, __PYX_ERR(0, 2015, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2017
 * cdef cudaError_t cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2018
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecChildGraphNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, <ccuda.CUgraph>childGraph)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2019
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphExecChildGraphNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, <ccuda.CUgraph>childGraph)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2018
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecChildGraphNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, <ccuda.CUgraph>childGraph)
 */
  }

  /* "cuda/ccudart.pyx":2020
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecChildGraphNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, <ccuda.CUgraph>childGraph)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecChildGraphNodeSetParams(((__pyx_t_4cuda_5ccuda_CUgraphExec)__pyx_v_hGraphExec), ((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_node), ((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_childGraph)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2020, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2021
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecChildGraphNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, <ccuda.CUgraph>childGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2022
 *     err = <cudaError_t>ccuda._cuGraphExecChildGraphNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, <ccuda.CUgraph>childGraph)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2021
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecChildGraphNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>node, <ccuda.CUgraph>childGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2023
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2015
 *     return err
 * 
 * cdef cudaError_t cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecChildGraphNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2025
 *     return err
 * 
 * cdef cudaError_t cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecEventRecordNodeSetEvent(__pyx_t_4cuda_7ccudart_cudaGraphExec_t __pyx_v_hGraphExec, __pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_hNode, __pyx_t_4cuda_7ccudart_cudaEvent_t __pyx_v_event) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphExecEventRecordNodeSetEvent", __pyx_f[0], 2025, 1, __PYX_ERR(0, 2025, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2027
 * cdef cudaError_t cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2028
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecEventRecordNodeSetEvent(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUevent>event)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2029
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphExecEventRecordNodeSetEvent(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUevent>event)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2028
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecEventRecordNodeSetEvent(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUevent>event)
 */
  }

  /* "cuda/ccudart.pyx":2030
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecEventRecordNodeSetEvent(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUevent>event)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecEventRecordNodeSetEvent(((__pyx_t_4cuda_5ccuda_CUgraphExec)__pyx_v_hGraphExec), ((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_hNode), ((__pyx_t_4cuda_5ccuda_CUevent)__pyx_v_event)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2030, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2031
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecEventRecordNodeSetEvent(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2032
 *     err = <cudaError_t>ccuda._cuGraphExecEventRecordNodeSetEvent(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUevent>event)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2031
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecEventRecordNodeSetEvent(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2033
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2025
 *     return err
 * 
 * cdef cudaError_t cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecEventRecordNodeSetEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2035
 *     return err
 * 
 * cdef cudaError_t cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecEventWaitNodeSetEvent(__pyx_t_4cuda_7ccudart_cudaGraphExec_t __pyx_v_hGraphExec, __pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_hNode, __pyx_t_4cuda_7ccudart_cudaEvent_t __pyx_v_event) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphExecEventWaitNodeSetEvent", __pyx_f[0], 2035, 1, __PYX_ERR(0, 2035, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2037
 * cdef cudaError_t cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2038
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecEventWaitNodeSetEvent(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUevent>event)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2039
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphExecEventWaitNodeSetEvent(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUevent>event)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2038
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecEventWaitNodeSetEvent(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUevent>event)
 */
  }

  /* "cuda/ccudart.pyx":2040
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecEventWaitNodeSetEvent(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUevent>event)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecEventWaitNodeSetEvent(((__pyx_t_4cuda_5ccuda_CUgraphExec)__pyx_v_hGraphExec), ((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_hNode), ((__pyx_t_4cuda_5ccuda_CUevent)__pyx_v_event)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2040, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2041
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecEventWaitNodeSetEvent(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2042
 *     err = <cudaError_t>ccuda._cuGraphExecEventWaitNodeSetEvent(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUevent>event)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2041
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecEventWaitNodeSetEvent(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2043
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2035
 *     return err
 * 
 * cdef cudaError_t cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecEventWaitNodeSetEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2045
 *     return err
 * 
 * cdef cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecExternalSemaphoresSignalNodeSetParams(__pyx_t_4cuda_7ccudart_cudaGraphExec_t __pyx_v_hGraphExec, __pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_hNode, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreSignalNodeParams const *__pyx_v_nodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphExecExternalSemaphoresSignalNodeSetParams", __pyx_f[0], 2045, 1, __PYX_ERR(0, 2045, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2047
 * cdef cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2048
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecExternalSemaphoresSignalNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2049
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphExecExternalSemaphoresSignalNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2048
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecExternalSemaphoresSignalNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 */
  }

  /* "cuda/ccudart.pyx":2050
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecExternalSemaphoresSignalNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecExternalSemaphoresSignalNodeSetParams(((__pyx_t_4cuda_5ccuda_CUgraphExec)__pyx_v_hGraphExec), ((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_hNode), ((__pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *)__pyx_v_nodeParams)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2050, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2051
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecExternalSemaphoresSignalNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2052
 *     err = <cudaError_t>ccuda._cuGraphExecExternalSemaphoresSignalNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2051
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecExternalSemaphoresSignalNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2053
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2045
 *     return err
 * 
 * cdef cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecExternalSemaphoresSignalNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2055
 *     return err
 * 
 * cdef cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecExternalSemaphoresWaitNodeSetParams(__pyx_t_4cuda_7ccudart_cudaGraphExec_t __pyx_v_hGraphExec, __pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_hNode, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreWaitNodeParams const *__pyx_v_nodeParams) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphExecExternalSemaphoresWaitNodeSetParams", __pyx_f[0], 2055, 1, __PYX_ERR(0, 2055, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2057
 * cdef cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2058
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecExternalSemaphoresWaitNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2059
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphExecExternalSemaphoresWaitNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2058
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecExternalSemaphoresWaitNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 */
  }

  /* "cuda/ccudart.pyx":2060
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecExternalSemaphoresWaitNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecExternalSemaphoresWaitNodeSetParams(((__pyx_t_4cuda_5ccuda_CUgraphExec)__pyx_v_hGraphExec), ((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_hNode), ((__pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS *)__pyx_v_nodeParams)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2060, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2061
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecExternalSemaphoresWaitNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2062
 *     err = <cudaError_t>ccuda._cuGraphExecExternalSemaphoresWaitNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2061
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecExternalSemaphoresWaitNodeSetParams(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, <ccuda.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2063
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int isEnabled) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2055
 *     return err
 * 
 * cdef cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecExternalSemaphoresWaitNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2065
 *     return err
 * 
 * cdef cudaError_t cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int isEnabled) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphNodeSetEnabled(__pyx_t_4cuda_7ccudart_cudaGraphExec_t __pyx_v_hGraphExec, __pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_hNode, unsigned int __pyx_v_isEnabled) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphNodeSetEnabled", __pyx_f[0], 2065, 1, __PYX_ERR(0, 2065, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2067
 * cdef cudaError_t cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int isEnabled) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2068
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeSetEnabled(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, isEnabled)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2069
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphNodeSetEnabled(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, isEnabled)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2068
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeSetEnabled(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, isEnabled)
 */
  }

  /* "cuda/ccudart.pyx":2070
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeSetEnabled(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, isEnabled)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphNodeSetEnabled(((__pyx_t_4cuda_5ccuda_CUgraphExec)__pyx_v_hGraphExec), ((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_hNode), __pyx_v_isEnabled); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2070, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2071
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeSetEnabled(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, isEnabled)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2072
 *     err = <cudaError_t>ccuda._cuGraphNodeSetEnabled(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, isEnabled)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2071
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeSetEnabled(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, isEnabled)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2073
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int* isEnabled) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2065
 *     return err
 * 
 * cdef cudaError_t cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int isEnabled) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphNodeSetEnabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2075
 *     return err
 * 
 * cdef cudaError_t cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int* isEnabled) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphNodeGetEnabled(__pyx_t_4cuda_7ccudart_cudaGraphExec_t __pyx_v_hGraphExec, __pyx_t_4cuda_7ccudart_cudaGraphNode_t __pyx_v_hNode, unsigned int *__pyx_v_isEnabled) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphNodeGetEnabled", __pyx_f[0], 2075, 1, __PYX_ERR(0, 2075, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2077
 * cdef cudaError_t cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int* isEnabled) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2078
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeGetEnabled(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, isEnabled)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2079
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphNodeGetEnabled(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, isEnabled)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2078
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeGetEnabled(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, isEnabled)
 */
  }

  /* "cuda/ccudart.pyx":2080
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeGetEnabled(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, isEnabled)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphNodeGetEnabled(((__pyx_t_4cuda_5ccuda_CUgraphExec)__pyx_v_hGraphExec), ((__pyx_t_4cuda_5ccuda_CUgraphNode)__pyx_v_hNode), __pyx_v_isEnabled); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2080, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2081
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeGetEnabled(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, isEnabled)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2082
 *     err = <cudaError_t>ccuda._cuGraphNodeGetEnabled(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, isEnabled)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2081
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphNodeGetEnabled(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraphNode>hNode, isEnabled)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2083
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphNode_t* hErrorNode_out, cudaGraphExecUpdateResult* updateResult_out) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2075
 *     return err
 * 
 * cdef cudaError_t cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int* isEnabled) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphNodeGetEnabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2085
 *     return err
 * 
 * cdef cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphNode_t* hErrorNode_out, cudaGraphExecUpdateResult* updateResult_out) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecUpdate(__pyx_t_4cuda_7ccudart_cudaGraphExec_t __pyx_v_hGraphExec, __pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_hGraph, __pyx_t_4cuda_7ccudart_cudaGraphNode_t *__pyx_v_hErrorNode_out, enum __pyx_t_4cuda_7ccudart_cudaGraphExecUpdateResult *__pyx_v_updateResult_out) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphExecUpdate", __pyx_f[0], 2085, 1, __PYX_ERR(0, 2085, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2087
 * cdef cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphNode_t* hErrorNode_out, cudaGraphExecUpdateResult* updateResult_out) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2088
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecUpdate(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraph>hGraph, <ccuda.CUgraphNode*>hErrorNode_out, <ccuda.CUgraphExecUpdateResult*>updateResult_out)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2089
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphExecUpdate(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraph>hGraph, <ccuda.CUgraphNode*>hErrorNode_out, <ccuda.CUgraphExecUpdateResult*>updateResult_out)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2088
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecUpdate(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraph>hGraph, <ccuda.CUgraphNode*>hErrorNode_out, <ccuda.CUgraphExecUpdateResult*>updateResult_out)
 */
  }

  /* "cuda/ccudart.pyx":2090
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecUpdate(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraph>hGraph, <ccuda.CUgraphNode*>hErrorNode_out, <ccuda.CUgraphExecUpdateResult*>updateResult_out)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecUpdate(((__pyx_t_4cuda_5ccuda_CUgraphExec)__pyx_v_hGraphExec), ((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_hGraph), ((__pyx_t_4cuda_5ccuda_CUgraphNode *)__pyx_v_hErrorNode_out), ((__pyx_t_4cuda_5ccuda_CUgraphExecUpdateResult *)__pyx_v_updateResult_out)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2090, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2091
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecUpdate(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraph>hGraph, <ccuda.CUgraphNode*>hErrorNode_out, <ccuda.CUgraphExecUpdateResult*>updateResult_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2092
 *     err = <cudaError_t>ccuda._cuGraphExecUpdate(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraph>hGraph, <ccuda.CUgraphNode*>hErrorNode_out, <ccuda.CUgraphExecUpdateResult*>updateResult_out)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2091
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecUpdate(<ccuda.CUgraphExec>hGraphExec, <ccuda.CUgraph>hGraph, <ccuda.CUgraphNode*>hErrorNode_out, <ccuda.CUgraphExecUpdateResult*>updateResult_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2093
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2085
 *     return err
 * 
 * cdef cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphNode_t* hErrorNode_out, cudaGraphExecUpdateResult* updateResult_out) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecUpdate", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2095
 *     return err
 * 
 * cdef cudaError_t cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphUpload(__pyx_t_4cuda_7ccudart_cudaGraphExec_t __pyx_v_graphExec, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphUpload", __pyx_f[0], 2095, 1, __PYX_ERR(0, 2095, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2097
 * cdef cudaError_t cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2098
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphUpload(<ccuda.CUgraphExec>graphExec, <ccuda.CUstream>stream)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2099
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphUpload(<ccuda.CUgraphExec>graphExec, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2098
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphUpload(<ccuda.CUgraphExec>graphExec, <ccuda.CUstream>stream)
 */
  }

  /* "cuda/ccudart.pyx":2100
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphUpload(<ccuda.CUgraphExec>graphExec, <ccuda.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphUpload(((__pyx_t_4cuda_5ccuda_CUgraphExec)__pyx_v_graphExec), ((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2100, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2101
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphUpload(<ccuda.CUgraphExec>graphExec, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2102
 *     err = <cudaError_t>ccuda._cuGraphUpload(<ccuda.CUgraphExec>graphExec, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2101
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphUpload(<ccuda.CUgraphExec>graphExec, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2103
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2095
 *     return err
 * 
 * cdef cudaError_t cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphUpload", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2105
 *     return err
 * 
 * cdef cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphLaunch(__pyx_t_4cuda_7ccudart_cudaGraphExec_t __pyx_v_graphExec, __pyx_t_4cuda_7ccudart_cudaStream_t __pyx_v_stream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphLaunch", __pyx_f[0], 2105, 1, __PYX_ERR(0, 2105, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2107
 * cdef cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2108
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphLaunch(<ccuda.CUgraphExec>graphExec, <ccuda.CUstream>stream)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2109
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphLaunch(<ccuda.CUgraphExec>graphExec, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2108
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphLaunch(<ccuda.CUgraphExec>graphExec, <ccuda.CUstream>stream)
 */
  }

  /* "cuda/ccudart.pyx":2110
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphLaunch(<ccuda.CUgraphExec>graphExec, <ccuda.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphLaunch(((__pyx_t_4cuda_5ccuda_CUgraphExec)__pyx_v_graphExec), ((__pyx_t_4cuda_5ccuda_CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2110, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2111
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphLaunch(<ccuda.CUgraphExec>graphExec, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2112
 *     err = <cudaError_t>ccuda._cuGraphLaunch(<ccuda.CUgraphExec>graphExec, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2111
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphLaunch(<ccuda.CUgraphExec>graphExec, <ccuda.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2113
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2105
 *     return err
 * 
 * cdef cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphLaunch", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2115
 *     return err
 * 
 * cdef cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecDestroy(__pyx_t_4cuda_7ccudart_cudaGraphExec_t __pyx_v_graphExec) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphExecDestroy", __pyx_f[0], 2115, 1, __PYX_ERR(0, 2115, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2117
 * cdef cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2118
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecDestroy(<ccuda.CUgraphExec>graphExec)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2119
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphExecDestroy(<ccuda.CUgraphExec>graphExec)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2118
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecDestroy(<ccuda.CUgraphExec>graphExec)
 */
  }

  /* "cuda/ccudart.pyx":2120
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecDestroy(<ccuda.CUgraphExec>graphExec)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecDestroy(((__pyx_t_4cuda_5ccuda_CUgraphExec)__pyx_v_graphExec)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2120, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2121
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecDestroy(<ccuda.CUgraphExec>graphExec)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2122
 *     err = <cudaError_t>ccuda._cuGraphExecDestroy(<ccuda.CUgraphExec>graphExec)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2121
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphExecDestroy(<ccuda.CUgraphExec>graphExec)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2123
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphDestroy(cudaGraph_t graph) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2115
 *     return err
 * 
 * cdef cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecDestroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2125
 *     return err
 * 
 * cdef cudaError_t cudaGraphDestroy(cudaGraph_t graph) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphDestroy(__pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphDestroy", __pyx_f[0], 2125, 1, __PYX_ERR(0, 2125, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2127
 * cdef cudaError_t cudaGraphDestroy(cudaGraph_t graph) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2128
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphDestroy(<ccuda.CUgraph>graph)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2129
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphDestroy(<ccuda.CUgraph>graph)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2128
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphDestroy(<ccuda.CUgraph>graph)
 */
  }

  /* "cuda/ccudart.pyx":2130
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphDestroy(<ccuda.CUgraph>graph)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphDestroy(((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_graph)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2130, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2131
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphDestroy(<ccuda.CUgraph>graph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2132
 *     err = <cudaError_t>ccuda._cuGraphDestroy(<ccuda.CUgraph>graph)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2131
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphDestroy(<ccuda.CUgraph>graph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2133
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphDebugDotPrint(cudaGraph_t graph, const char* path, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2125
 *     return err
 * 
 * cdef cudaError_t cudaGraphDestroy(cudaGraph_t graph) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphDestroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2135
 *     return err
 * 
 * cdef cudaError_t cudaGraphDebugDotPrint(cudaGraph_t graph, const char* path, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphDebugDotPrint(__pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, char const *__pyx_v_path, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphDebugDotPrint", __pyx_f[0], 2135, 1, __PYX_ERR(0, 2135, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2137
 * cdef cudaError_t cudaGraphDebugDotPrint(cudaGraph_t graph, const char* path, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2138
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphDebugDotPrint(<ccuda.CUgraph>graph, path, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2139
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphDebugDotPrint(<ccuda.CUgraph>graph, path, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2138
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphDebugDotPrint(<ccuda.CUgraph>graph, path, flags)
 */
  }

  /* "cuda/ccudart.pyx":2140
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphDebugDotPrint(<ccuda.CUgraph>graph, path, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphDebugDotPrint(((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_graph), __pyx_v_path, __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2140, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2141
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphDebugDotPrint(<ccuda.CUgraph>graph, path, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2142
 *     err = <cudaError_t>ccuda._cuGraphDebugDotPrint(<ccuda.CUgraph>graph, path, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2141
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphDebugDotPrint(<ccuda.CUgraph>graph, path, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2143
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaUserObjectCreate(cudaUserObject_t* object_out, void* ptr, cudaHostFn_t destroy, unsigned int initialRefcount, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2135
 *     return err
 * 
 * cdef cudaError_t cudaGraphDebugDotPrint(cudaGraph_t graph, const char* path, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphDebugDotPrint", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2145
 *     return err
 * 
 * cdef cudaError_t cudaUserObjectCreate(cudaUserObject_t* object_out, void* ptr, cudaHostFn_t destroy, unsigned int initialRefcount, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaUserObjectCreate(__pyx_t_4cuda_7ccudart_cudaUserObject_t *__pyx_v_object_out, void *__pyx_v_ptr, __pyx_t_4cuda_7ccudart_cudaHostFn_t __pyx_v_destroy, unsigned int __pyx_v_initialRefcount, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaUserObjectCreate", __pyx_f[0], 2145, 1, __PYX_ERR(0, 2145, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2147
 * cdef cudaError_t cudaUserObjectCreate(cudaUserObject_t* object_out, void* ptr, cudaHostFn_t destroy, unsigned int initialRefcount, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2148
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuUserObjectCreate(<ccuda.CUuserObject*>object_out, ptr, <ccuda.CUhostFn>destroy, initialRefcount, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2149
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuUserObjectCreate(<ccuda.CUuserObject*>object_out, ptr, <ccuda.CUhostFn>destroy, initialRefcount, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2148
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuUserObjectCreate(<ccuda.CUuserObject*>object_out, ptr, <ccuda.CUhostFn>destroy, initialRefcount, flags)
 */
  }

  /* "cuda/ccudart.pyx":2150
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuUserObjectCreate(<ccuda.CUuserObject*>object_out, ptr, <ccuda.CUhostFn>destroy, initialRefcount, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuUserObjectCreate(((__pyx_t_4cuda_5ccuda_CUuserObject *)__pyx_v_object_out), __pyx_v_ptr, ((__pyx_t_4cuda_5ccuda_CUhostFn)__pyx_v_destroy), __pyx_v_initialRefcount, __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2150, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2151
 *         return err
 *     err = <cudaError_t>ccuda._cuUserObjectCreate(<ccuda.CUuserObject*>object_out, ptr, <ccuda.CUhostFn>destroy, initialRefcount, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2152
 *     err = <cudaError_t>ccuda._cuUserObjectCreate(<ccuda.CUuserObject*>object_out, ptr, <ccuda.CUhostFn>destroy, initialRefcount, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2151
 *         return err
 *     err = <cudaError_t>ccuda._cuUserObjectCreate(<ccuda.CUuserObject*>object_out, ptr, <ccuda.CUhostFn>destroy, initialRefcount, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2153
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaUserObjectRetain(cudaUserObject_t object, unsigned int count) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2145
 *     return err
 * 
 * cdef cudaError_t cudaUserObjectCreate(cudaUserObject_t* object_out, void* ptr, cudaHostFn_t destroy, unsigned int initialRefcount, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaUserObjectCreate", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2155
 *     return err
 * 
 * cdef cudaError_t cudaUserObjectRetain(cudaUserObject_t object, unsigned int count) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaUserObjectRetain(__pyx_t_4cuda_7ccudart_cudaUserObject_t __pyx_v_object, unsigned int __pyx_v_count) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaUserObjectRetain", __pyx_f[0], 2155, 1, __PYX_ERR(0, 2155, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2157
 * cdef cudaError_t cudaUserObjectRetain(cudaUserObject_t object, unsigned int count) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2158
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuUserObjectRetain(<ccuda.CUuserObject>object, count)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2159
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuUserObjectRetain(<ccuda.CUuserObject>object, count)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2158
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuUserObjectRetain(<ccuda.CUuserObject>object, count)
 */
  }

  /* "cuda/ccudart.pyx":2160
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuUserObjectRetain(<ccuda.CUuserObject>object, count)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuUserObjectRetain(((__pyx_t_4cuda_5ccuda_CUuserObject)__pyx_v_object), __pyx_v_count); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2160, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2161
 *         return err
 *     err = <cudaError_t>ccuda._cuUserObjectRetain(<ccuda.CUuserObject>object, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2162
 *     err = <cudaError_t>ccuda._cuUserObjectRetain(<ccuda.CUuserObject>object, count)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2161
 *         return err
 *     err = <cudaError_t>ccuda._cuUserObjectRetain(<ccuda.CUuserObject>object, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2163
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaUserObjectRelease(cudaUserObject_t object, unsigned int count) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2155
 *     return err
 * 
 * cdef cudaError_t cudaUserObjectRetain(cudaUserObject_t object, unsigned int count) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaUserObjectRetain", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2165
 *     return err
 * 
 * cdef cudaError_t cudaUserObjectRelease(cudaUserObject_t object, unsigned int count) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaUserObjectRelease(__pyx_t_4cuda_7ccudart_cudaUserObject_t __pyx_v_object, unsigned int __pyx_v_count) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaUserObjectRelease", __pyx_f[0], 2165, 1, __PYX_ERR(0, 2165, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2167
 * cdef cudaError_t cudaUserObjectRelease(cudaUserObject_t object, unsigned int count) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2168
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuUserObjectRelease(<ccuda.CUuserObject>object, count)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2169
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuUserObjectRelease(<ccuda.CUuserObject>object, count)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2168
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuUserObjectRelease(<ccuda.CUuserObject>object, count)
 */
  }

  /* "cuda/ccudart.pyx":2170
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuUserObjectRelease(<ccuda.CUuserObject>object, count)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuUserObjectRelease(((__pyx_t_4cuda_5ccuda_CUuserObject)__pyx_v_object), __pyx_v_count); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2170, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2171
 *         return err
 *     err = <cudaError_t>ccuda._cuUserObjectRelease(<ccuda.CUuserObject>object, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2172
 *     err = <cudaError_t>ccuda._cuUserObjectRelease(<ccuda.CUuserObject>object, count)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2171
 *         return err
 *     err = <cudaError_t>ccuda._cuUserObjectRelease(<ccuda.CUuserObject>object, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2173
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2165
 *     return err
 * 
 * cdef cudaError_t cudaUserObjectRelease(cudaUserObject_t object, unsigned int count) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaUserObjectRelease", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2175
 *     return err
 * 
 * cdef cudaError_t cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphRetainUserObject(__pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaUserObject_t __pyx_v_object, unsigned int __pyx_v_count, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphRetainUserObject", __pyx_f[0], 2175, 1, __PYX_ERR(0, 2175, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2177
 * cdef cudaError_t cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2178
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphRetainUserObject(<ccuda.CUgraph>graph, <ccuda.CUuserObject>object, count, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2179
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphRetainUserObject(<ccuda.CUgraph>graph, <ccuda.CUuserObject>object, count, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2178
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphRetainUserObject(<ccuda.CUgraph>graph, <ccuda.CUuserObject>object, count, flags)
 */
  }

  /* "cuda/ccudart.pyx":2180
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphRetainUserObject(<ccuda.CUgraph>graph, <ccuda.CUuserObject>object, count, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphRetainUserObject(((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_graph), ((__pyx_t_4cuda_5ccuda_CUuserObject)__pyx_v_object), __pyx_v_count, __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2180, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2181
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphRetainUserObject(<ccuda.CUgraph>graph, <ccuda.CUuserObject>object, count, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2182
 *     err = <cudaError_t>ccuda._cuGraphRetainUserObject(<ccuda.CUgraph>graph, <ccuda.CUuserObject>object, count, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2181
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphRetainUserObject(<ccuda.CUgraph>graph, <ccuda.CUuserObject>object, count, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2183
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2175
 *     return err
 * 
 * cdef cudaError_t cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphRetainUserObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2185
 *     return err
 * 
 * cdef cudaError_t cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphReleaseUserObject(__pyx_t_4cuda_7ccudart_cudaGraph_t __pyx_v_graph, __pyx_t_4cuda_7ccudart_cudaUserObject_t __pyx_v_object, unsigned int __pyx_v_count) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphReleaseUserObject", __pyx_f[0], 2185, 1, __PYX_ERR(0, 2185, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2187
 * cdef cudaError_t cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2188
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphReleaseUserObject(<ccuda.CUgraph>graph, <ccuda.CUuserObject>object, count)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2189
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphReleaseUserObject(<ccuda.CUgraph>graph, <ccuda.CUuserObject>object, count)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2188
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphReleaseUserObject(<ccuda.CUgraph>graph, <ccuda.CUuserObject>object, count)
 */
  }

  /* "cuda/ccudart.pyx":2190
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphReleaseUserObject(<ccuda.CUgraph>graph, <ccuda.CUuserObject>object, count)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphReleaseUserObject(((__pyx_t_4cuda_5ccuda_CUgraph)__pyx_v_graph), ((__pyx_t_4cuda_5ccuda_CUuserObject)__pyx_v_object), __pyx_v_count); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2190, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2191
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphReleaseUserObject(<ccuda.CUgraph>graph, <ccuda.CUuserObject>object, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2192
 *     err = <cudaError_t>ccuda._cuGraphReleaseUserObject(<ccuda.CUgraph>graph, <ccuda.CUuserObject>object, count)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2191
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphReleaseUserObject(<ccuda.CUgraph>graph, <ccuda.CUuserObject>object, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2193
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetDriverEntryPoint(const char* symbol, void** funcPtr, unsigned long long flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2185
 *     return err
 * 
 * cdef cudaError_t cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphReleaseUserObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2195
 *     return err
 * 
 * cdef cudaError_t cudaGetDriverEntryPoint(const char* symbol, void** funcPtr, unsigned long long flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetDriverEntryPoint(symbol, funcPtr, flags)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGetDriverEntryPoint(char const *__pyx_v_symbol, void **__pyx_v_funcPtr, unsigned PY_LONG_LONG __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGetDriverEntryPoint", __pyx_f[0], 2195, 1, __PYX_ERR(0, 2195, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2196
 * 
 * cdef cudaError_t cudaGetDriverEntryPoint(const char* symbol, void** funcPtr, unsigned long long flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGetDriverEntryPoint(symbol, funcPtr, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetExportTable(const void** ppExportTable, const cudaUUID_t* pExportTableId) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDriverEntryPoint(__pyx_v_symbol, __pyx_v_funcPtr, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2196, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2195
 *     return err
 * 
 * cdef cudaError_t cudaGetDriverEntryPoint(const char* symbol, void** funcPtr, unsigned long long flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGetDriverEntryPoint(symbol, funcPtr, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGetDriverEntryPoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2198
 *     return _cudaGetDriverEntryPoint(symbol, funcPtr, flags)
 * 
 * cdef cudaError_t cudaGetExportTable(const void** ppExportTable, const cudaUUID_t* pExportTableId) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGetExportTable(void const **__pyx_v_ppExportTable, __pyx_t_4cuda_7ccudart_cudaUUID_t const *__pyx_v_pExportTableId) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGetExportTable", __pyx_f[0], 2198, 1, __PYX_ERR(0, 2198, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2200
 * cdef cudaError_t cudaGetExportTable(const void** ppExportTable, const cudaUUID_t* pExportTableId) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2201
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGetExportTable(ppExportTable, <ccuda.CUuuid*>pExportTableId)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2202
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGetExportTable(ppExportTable, <ccuda.CUuuid*>pExportTableId)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2201
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGetExportTable(ppExportTable, <ccuda.CUuuid*>pExportTableId)
 */
  }

  /* "cuda/ccudart.pyx":2203
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGetExportTable(ppExportTable, <ccuda.CUuuid*>pExportTableId)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGetExportTable(__pyx_v_ppExportTable, ((__pyx_t_4cuda_5ccuda_CUuuid *)__pyx_v_pExportTableId)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2203, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2204
 *         return err
 *     err = <cudaError_t>ccuda._cuGetExportTable(ppExportTable, <ccuda.CUuuid*>pExportTableId)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2205
 *     err = <cudaError_t>ccuda._cuGetExportTable(ppExportTable, <ccuda.CUuuid*>pExportTableId)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2204
 *         return err
 *     err = <cudaError_t>ccuda._cuGetExportTable(ppExportTable, <ccuda.CUuuid*>pExportTableId)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2206
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaPitchedPtr make_cudaPitchedPtr(void* d, size_t p, size_t xsz, size_t ysz) nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2198
 *     return _cudaGetDriverEntryPoint(symbol, funcPtr, flags)
 * 
 * cdef cudaError_t cudaGetExportTable(const void** ppExportTable, const cudaUUID_t* pExportTableId) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGetExportTable", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2208
 *     return err
 * 
 * cdef cudaPitchedPtr make_cudaPitchedPtr(void* d, size_t p, size_t xsz, size_t ysz) nogil:             # <<<<<<<<<<<<<<
 *     return _make_cudaPitchedPtr(d, p, xsz, ysz)
 * 
 */

static struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr __pyx_f_4cuda_7ccudart_make_cudaPitchedPtr(void *__pyx_v_d, size_t __pyx_v_p, size_t __pyx_v_xsz, size_t __pyx_v_ysz) {
  struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("make_cudaPitchedPtr", __pyx_f[0], 2208, 1, __PYX_ERR(0, 2208, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2209
 * 
 * cdef cudaPitchedPtr make_cudaPitchedPtr(void* d, size_t p, size_t xsz, size_t ysz) nogil:
 *     return _make_cudaPitchedPtr(d, p, xsz, ysz)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaPos make_cudaPos(size_t x, size_t y, size_t z) nogil:
 */
  __pyx_r = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__make_cudaPitchedPtr(__pyx_v_d, __pyx_v_p, __pyx_v_xsz, __pyx_v_ysz);
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2208
 *     return err
 * 
 * cdef cudaPitchedPtr make_cudaPitchedPtr(void* d, size_t p, size_t xsz, size_t ysz) nogil:             # <<<<<<<<<<<<<<
 *     return _make_cudaPitchedPtr(d, p, xsz, ysz)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cuda.ccudart.make_cudaPitchedPtr", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2211
 *     return _make_cudaPitchedPtr(d, p, xsz, ysz)
 * 
 * cdef cudaPos make_cudaPos(size_t x, size_t y, size_t z) nogil:             # <<<<<<<<<<<<<<
 *     return _make_cudaPos(x, y, z)
 * 
 */

static struct __pyx_t_4cuda_7ccudart_cudaPos __pyx_f_4cuda_7ccudart_make_cudaPos(size_t __pyx_v_x, size_t __pyx_v_y, size_t __pyx_v_z) {
  struct __pyx_t_4cuda_7ccudart_cudaPos __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("make_cudaPos", __pyx_f[0], 2211, 1, __PYX_ERR(0, 2211, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2212
 * 
 * cdef cudaPos make_cudaPos(size_t x, size_t y, size_t z) nogil:
 *     return _make_cudaPos(x, y, z)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) nogil:
 */
  __pyx_r = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__make_cudaPos(__pyx_v_x, __pyx_v_y, __pyx_v_z);
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2211
 *     return _make_cudaPitchedPtr(d, p, xsz, ysz)
 * 
 * cdef cudaPos make_cudaPos(size_t x, size_t y, size_t z) nogil:             # <<<<<<<<<<<<<<
 *     return _make_cudaPos(x, y, z)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cuda.ccudart.make_cudaPos", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2214
 *     return _make_cudaPos(x, y, z)
 * 
 * cdef cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) nogil:             # <<<<<<<<<<<<<<
 *     return _make_cudaExtent(w, h, d)
 * 
 */

static struct __pyx_t_4cuda_7ccudart_cudaExtent __pyx_f_4cuda_7ccudart_make_cudaExtent(size_t __pyx_v_w, size_t __pyx_v_h, size_t __pyx_v_d) {
  struct __pyx_t_4cuda_7ccudart_cudaExtent __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("make_cudaExtent", __pyx_f[0], 2214, 1, __PYX_ERR(0, 2214, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2215
 * 
 * cdef cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) nogil:
 *     return _make_cudaExtent(w, h, d)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaProfilerInitialize(const char* configFile, const char* outputFile, cudaOutputMode_t outputMode) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__make_cudaExtent(__pyx_v_w, __pyx_v_h, __pyx_v_d);
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2214
 *     return _make_cudaPos(x, y, z)
 * 
 * cdef cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) nogil:             # <<<<<<<<<<<<<<
 *     return _make_cudaExtent(w, h, d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cuda.ccudart.make_cudaExtent", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2217
 *     return _make_cudaExtent(w, h, d)
 * 
 * cdef cudaError_t cudaProfilerInitialize(const char* configFile, const char* outputFile, cudaOutputMode_t outputMode) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaProfilerInitialize(configFile, outputFile, outputMode)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaProfilerInitialize(char const *__pyx_v_configFile, char const *__pyx_v_outputFile, __pyx_t_4cuda_7ccudart_cudaOutputMode_t __pyx_v_outputMode) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaProfilerInitialize", __pyx_f[0], 2217, 1, __PYX_ERR(0, 2217, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2218
 * 
 * cdef cudaError_t cudaProfilerInitialize(const char* configFile, const char* outputFile, cudaOutputMode_t outputMode) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaProfilerInitialize(configFile, outputFile, outputMode)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaProfilerStart() nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaProfilerInitialize(__pyx_v_configFile, __pyx_v_outputFile, __pyx_v_outputMode); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2218, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2217
 *     return _make_cudaExtent(w, h, d)
 * 
 * cdef cudaError_t cudaProfilerInitialize(const char* configFile, const char* outputFile, cudaOutputMode_t outputMode) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaProfilerInitialize(configFile, outputFile, outputMode)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaProfilerInitialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2220
 *     return _cudaProfilerInitialize(configFile, outputFile, outputMode)
 * 
 * cdef cudaError_t cudaProfilerStart() nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaProfilerStart(void) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaProfilerStart", __pyx_f[0], 2220, 1, __PYX_ERR(0, 2220, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2222
 * cdef cudaError_t cudaProfilerStart() nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2223
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuProfilerStart()
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2224
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuProfilerStart()
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2223
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuProfilerStart()
 */
  }

  /* "cuda/ccudart.pyx":2225
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuProfilerStart()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuProfilerStart(); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2225, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2226
 *         return err
 *     err = <cudaError_t>ccuda._cuProfilerStart()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2227
 *     err = <cudaError_t>ccuda._cuProfilerStart()
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2226
 *         return err
 *     err = <cudaError_t>ccuda._cuProfilerStart()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2228
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaProfilerStop() nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2220
 *     return _cudaProfilerInitialize(configFile, outputFile, outputMode)
 * 
 * cdef cudaError_t cudaProfilerStart() nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaProfilerStart", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2230
 *     return err
 * 
 * cdef cudaError_t cudaProfilerStop() nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaProfilerStop(void) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaProfilerStop", __pyx_f[0], 2230, 1, __PYX_ERR(0, 2230, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2232
 * cdef cudaError_t cudaProfilerStop() nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2233
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuProfilerStop()
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2234
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuProfilerStop()
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2233
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuProfilerStop()
 */
  }

  /* "cuda/ccudart.pyx":2235
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuProfilerStop()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuProfilerStop(); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2235, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2236
 *         return err
 *     err = <cudaError_t>ccuda._cuProfilerStop()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2237
 *     err = <cudaError_t>ccuda._cuProfilerStop()
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2236
 *         return err
 *     err = <cudaError_t>ccuda._cuProfilerStop()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2238
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaVDPAUGetDevice(int* device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2230
 *     return err
 * 
 * cdef cudaError_t cudaProfilerStop() nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaProfilerStop", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2240
 *     return err
 * 
 * cdef cudaError_t cudaVDPAUGetDevice(int* device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaVDPAUGetDevice(int *__pyx_v_device, __pyx_t_4cuda_7ccudart_VdpDevice __pyx_v_vdpDevice, __pyx_t_4cuda_7ccudart_VdpGetProcAddress *__pyx_v_vdpGetProcAddress) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaVDPAUGetDevice", __pyx_f[0], 2240, 1, __PYX_ERR(0, 2240, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2242
 * cdef cudaError_t cudaVDPAUGetDevice(int* device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2243
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuVDPAUGetDevice(<ccuda.CUdevice*>device, vdpDevice, vdpGetProcAddress)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2244
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuVDPAUGetDevice(<ccuda.CUdevice*>device, vdpDevice, vdpGetProcAddress)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2243
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuVDPAUGetDevice(<ccuda.CUdevice*>device, vdpDevice, vdpGetProcAddress)
 */
  }

  /* "cuda/ccudart.pyx":2245
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuVDPAUGetDevice(<ccuda.CUdevice*>device, vdpDevice, vdpGetProcAddress)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuVDPAUGetDevice(((__pyx_t_4cuda_5ccuda_CUdevice *)__pyx_v_device), __pyx_v_vdpDevice, __pyx_v_vdpGetProcAddress); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2245, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2246
 *         return err
 *     err = <cudaError_t>ccuda._cuVDPAUGetDevice(<ccuda.CUdevice*>device, vdpDevice, vdpGetProcAddress)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2247
 *     err = <cudaError_t>ccuda._cuVDPAUGetDevice(<ccuda.CUdevice*>device, vdpDevice, vdpGetProcAddress)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2246
 *         return err
 *     err = <cudaError_t>ccuda._cuVDPAUGetDevice(<ccuda.CUdevice*>device, vdpDevice, vdpGetProcAddress)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2248
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaVDPAUSetVDPAUDevice(int device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2240
 *     return err
 * 
 * cdef cudaError_t cudaVDPAUGetDevice(int* device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaVDPAUGetDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2250
 *     return err
 * 
 * cdef cudaError_t cudaVDPAUSetVDPAUDevice(int device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaVDPAUSetVDPAUDevice(device, vdpDevice, vdpGetProcAddress)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaVDPAUSetVDPAUDevice(int __pyx_v_device, __pyx_t_4cuda_7ccudart_VdpDevice __pyx_v_vdpDevice, __pyx_t_4cuda_7ccudart_VdpGetProcAddress *__pyx_v_vdpGetProcAddress) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaVDPAUSetVDPAUDevice", __pyx_f[0], 2250, 1, __PYX_ERR(0, 2250, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2251
 * 
 * cdef cudaError_t cudaVDPAUSetVDPAUDevice(int device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaVDPAUSetVDPAUDevice(device, vdpDevice, vdpGetProcAddress)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsVDPAURegisterVideoSurface(cudaGraphicsResource** resource, VdpVideoSurface vdpSurface, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaVDPAUSetVDPAUDevice(__pyx_v_device, __pyx_v_vdpDevice, __pyx_v_vdpGetProcAddress); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2251, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2250
 *     return err
 * 
 * cdef cudaError_t cudaVDPAUSetVDPAUDevice(int device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaVDPAUSetVDPAUDevice(device, vdpDevice, vdpGetProcAddress)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaVDPAUSetVDPAUDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2253
 *     return _cudaVDPAUSetVDPAUDevice(device, vdpDevice, vdpGetProcAddress)
 * 
 * cdef cudaError_t cudaGraphicsVDPAURegisterVideoSurface(cudaGraphicsResource** resource, VdpVideoSurface vdpSurface, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsVDPAURegisterVideoSurface(struct cudaGraphicsResource **__pyx_v_resource, __pyx_t_4cuda_7ccudart_VdpVideoSurface __pyx_v_vdpSurface, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphicsVDPAURegisterVideoSurface", __pyx_f[0], 2253, 1, __PYX_ERR(0, 2253, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2255
 * cdef cudaError_t cudaGraphicsVDPAURegisterVideoSurface(cudaGraphicsResource** resource, VdpVideoSurface vdpSurface, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2256
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsVDPAURegisterVideoSurface(<ccuda.CUgraphicsResource*>resource, vdpSurface, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2257
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphicsVDPAURegisterVideoSurface(<ccuda.CUgraphicsResource*>resource, vdpSurface, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2256
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsVDPAURegisterVideoSurface(<ccuda.CUgraphicsResource*>resource, vdpSurface, flags)
 */
  }

  /* "cuda/ccudart.pyx":2258
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsVDPAURegisterVideoSurface(<ccuda.CUgraphicsResource*>resource, vdpSurface, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsVDPAURegisterVideoSurface(((__pyx_t_4cuda_5ccuda_CUgraphicsResource *)__pyx_v_resource), __pyx_v_vdpSurface, __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2258, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2259
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsVDPAURegisterVideoSurface(<ccuda.CUgraphicsResource*>resource, vdpSurface, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2260
 *     err = <cudaError_t>ccuda._cuGraphicsVDPAURegisterVideoSurface(<ccuda.CUgraphicsResource*>resource, vdpSurface, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2259
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsVDPAURegisterVideoSurface(<ccuda.CUgraphicsResource*>resource, vdpSurface, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2261
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsVDPAURegisterOutputSurface(cudaGraphicsResource** resource, VdpOutputSurface vdpSurface, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2253
 *     return _cudaVDPAUSetVDPAUDevice(device, vdpDevice, vdpGetProcAddress)
 * 
 * cdef cudaError_t cudaGraphicsVDPAURegisterVideoSurface(cudaGraphicsResource** resource, VdpVideoSurface vdpSurface, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsVDPAURegisterVideoSurface", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2263
 *     return err
 * 
 * cdef cudaError_t cudaGraphicsVDPAURegisterOutputSurface(cudaGraphicsResource** resource, VdpOutputSurface vdpSurface, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsVDPAURegisterOutputSurface(struct cudaGraphicsResource **__pyx_v_resource, __pyx_t_4cuda_7ccudart_VdpOutputSurface __pyx_v_vdpSurface, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphicsVDPAURegisterOutputSurface", __pyx_f[0], 2263, 1, __PYX_ERR(0, 2263, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2265
 * cdef cudaError_t cudaGraphicsVDPAURegisterOutputSurface(cudaGraphicsResource** resource, VdpOutputSurface vdpSurface, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2266
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsVDPAURegisterOutputSurface(<ccuda.CUgraphicsResource*>resource, vdpSurface, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2267
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphicsVDPAURegisterOutputSurface(<ccuda.CUgraphicsResource*>resource, vdpSurface, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2266
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsVDPAURegisterOutputSurface(<ccuda.CUgraphicsResource*>resource, vdpSurface, flags)
 */
  }

  /* "cuda/ccudart.pyx":2268
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsVDPAURegisterOutputSurface(<ccuda.CUgraphicsResource*>resource, vdpSurface, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsVDPAURegisterOutputSurface(((__pyx_t_4cuda_5ccuda_CUgraphicsResource *)__pyx_v_resource), __pyx_v_vdpSurface, __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2268, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2269
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsVDPAURegisterOutputSurface(<ccuda.CUgraphicsResource*>resource, vdpSurface, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2270
 *     err = <cudaError_t>ccuda._cuGraphicsVDPAURegisterOutputSurface(<ccuda.CUgraphicsResource*>resource, vdpSurface, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2269
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsVDPAURegisterOutputSurface(<ccuda.CUgraphicsResource*>resource, vdpSurface, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2271
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGLGetDevices(unsigned int* pCudaDeviceCount, int* pCudaDevices, unsigned int cudaDeviceCount, cudaGLDeviceList deviceList) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2263
 *     return err
 * 
 * cdef cudaError_t cudaGraphicsVDPAURegisterOutputSurface(cudaGraphicsResource** resource, VdpOutputSurface vdpSurface, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsVDPAURegisterOutputSurface", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2273
 *     return err
 * 
 * cdef cudaError_t cudaGLGetDevices(unsigned int* pCudaDeviceCount, int* pCudaDevices, unsigned int cudaDeviceCount, cudaGLDeviceList deviceList) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGLGetDevices(unsigned int *__pyx_v_pCudaDeviceCount, int *__pyx_v_pCudaDevices, unsigned int __pyx_v_cudaDeviceCount, enum __pyx_t_4cuda_7ccudart_cudaGLDeviceList __pyx_v_deviceList) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGLGetDevices", __pyx_f[0], 2273, 1, __PYX_ERR(0, 2273, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2275
 * cdef cudaError_t cudaGLGetDevices(unsigned int* pCudaDeviceCount, int* pCudaDevices, unsigned int cudaDeviceCount, cudaGLDeviceList deviceList) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2276
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGLGetDevices_v2(pCudaDeviceCount, <ccuda.CUdevice*>pCudaDevices, cudaDeviceCount, <ccuda.CUGLDeviceList>deviceList)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2277
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGLGetDevices_v2(pCudaDeviceCount, <ccuda.CUdevice*>pCudaDevices, cudaDeviceCount, <ccuda.CUGLDeviceList>deviceList)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2276
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGLGetDevices_v2(pCudaDeviceCount, <ccuda.CUdevice*>pCudaDevices, cudaDeviceCount, <ccuda.CUGLDeviceList>deviceList)
 */
  }

  /* "cuda/ccudart.pyx":2278
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGLGetDevices_v2(pCudaDeviceCount, <ccuda.CUdevice*>pCudaDevices, cudaDeviceCount, <ccuda.CUGLDeviceList>deviceList)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGLGetDevices_v2(__pyx_v_pCudaDeviceCount, ((__pyx_t_4cuda_5ccuda_CUdevice *)__pyx_v_pCudaDevices), __pyx_v_cudaDeviceCount, ((__pyx_t_4cuda_5ccuda_CUGLDeviceList)__pyx_v_deviceList)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2278, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2279
 *         return err
 *     err = <cudaError_t>ccuda._cuGLGetDevices_v2(pCudaDeviceCount, <ccuda.CUdevice*>pCudaDevices, cudaDeviceCount, <ccuda.CUGLDeviceList>deviceList)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2280
 *     err = <cudaError_t>ccuda._cuGLGetDevices_v2(pCudaDeviceCount, <ccuda.CUdevice*>pCudaDevices, cudaDeviceCount, <ccuda.CUGLDeviceList>deviceList)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2279
 *         return err
 *     err = <cudaError_t>ccuda._cuGLGetDevices_v2(pCudaDeviceCount, <ccuda.CUdevice*>pCudaDevices, cudaDeviceCount, <ccuda.CUGLDeviceList>deviceList)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2281
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsGLRegisterImage(cudaGraphicsResource** resource, GLuint image, GLenum target, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2273
 *     return err
 * 
 * cdef cudaError_t cudaGLGetDevices(unsigned int* pCudaDeviceCount, int* pCudaDevices, unsigned int cudaDeviceCount, cudaGLDeviceList deviceList) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGLGetDevices", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2283
 *     return err
 * 
 * cdef cudaError_t cudaGraphicsGLRegisterImage(cudaGraphicsResource** resource, GLuint image, GLenum target, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsGLRegisterImage(struct cudaGraphicsResource **__pyx_v_resource, __pyx_t_4cuda_7ccudart_GLuint __pyx_v_image, __pyx_t_4cuda_7ccudart_GLenum __pyx_v_target, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphicsGLRegisterImage", __pyx_f[0], 2283, 1, __PYX_ERR(0, 2283, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2285
 * cdef cudaError_t cudaGraphicsGLRegisterImage(cudaGraphicsResource** resource, GLuint image, GLenum target, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2286
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsGLRegisterImage(<ccuda.CUgraphicsResource*>resource, image, target, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2287
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphicsGLRegisterImage(<ccuda.CUgraphicsResource*>resource, image, target, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2286
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsGLRegisterImage(<ccuda.CUgraphicsResource*>resource, image, target, flags)
 */
  }

  /* "cuda/ccudart.pyx":2288
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsGLRegisterImage(<ccuda.CUgraphicsResource*>resource, image, target, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsGLRegisterImage(((__pyx_t_4cuda_5ccuda_CUgraphicsResource *)__pyx_v_resource), __pyx_v_image, __pyx_v_target, __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2288, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2289
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsGLRegisterImage(<ccuda.CUgraphicsResource*>resource, image, target, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2290
 *     err = <cudaError_t>ccuda._cuGraphicsGLRegisterImage(<ccuda.CUgraphicsResource*>resource, image, target, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2289
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsGLRegisterImage(<ccuda.CUgraphicsResource*>resource, image, target, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2291
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsGLRegisterBuffer(cudaGraphicsResource** resource, GLuint buffer, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2283
 *     return err
 * 
 * cdef cudaError_t cudaGraphicsGLRegisterImage(cudaGraphicsResource** resource, GLuint image, GLenum target, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsGLRegisterImage", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2293
 *     return err
 * 
 * cdef cudaError_t cudaGraphicsGLRegisterBuffer(cudaGraphicsResource** resource, GLuint buffer, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsGLRegisterBuffer(struct cudaGraphicsResource **__pyx_v_resource, __pyx_t_4cuda_7ccudart_GLuint __pyx_v_buffer, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphicsGLRegisterBuffer", __pyx_f[0], 2293, 1, __PYX_ERR(0, 2293, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2295
 * cdef cudaError_t cudaGraphicsGLRegisterBuffer(cudaGraphicsResource** resource, GLuint buffer, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2296
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsGLRegisterBuffer(<ccuda.CUgraphicsResource*>resource, buffer, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2297
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphicsGLRegisterBuffer(<ccuda.CUgraphicsResource*>resource, buffer, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2296
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsGLRegisterBuffer(<ccuda.CUgraphicsResource*>resource, buffer, flags)
 */
  }

  /* "cuda/ccudart.pyx":2298
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsGLRegisterBuffer(<ccuda.CUgraphicsResource*>resource, buffer, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsGLRegisterBuffer(((__pyx_t_4cuda_5ccuda_CUgraphicsResource *)__pyx_v_resource), __pyx_v_buffer, __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2298, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2299
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsGLRegisterBuffer(<ccuda.CUgraphicsResource*>resource, buffer, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2300
 *     err = <cudaError_t>ccuda._cuGraphicsGLRegisterBuffer(<ccuda.CUgraphicsResource*>resource, buffer, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2299
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsGLRegisterBuffer(<ccuda.CUgraphicsResource*>resource, buffer, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2301
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsEGLRegisterImage(cudaGraphicsResource_t* pCudaResource, EGLImageKHR image, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2293
 *     return err
 * 
 * cdef cudaError_t cudaGraphicsGLRegisterBuffer(cudaGraphicsResource** resource, GLuint buffer, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsGLRegisterBuffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2303
 *     return err
 * 
 * cdef cudaError_t cudaGraphicsEGLRegisterImage(cudaGraphicsResource_t* pCudaResource, EGLImageKHR image, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsEGLRegisterImage(__pyx_t_4cuda_7ccudart_cudaGraphicsResource_t *__pyx_v_pCudaResource, __pyx_t_4cuda_7ccudart_EGLImageKHR __pyx_v_image, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphicsEGLRegisterImage", __pyx_f[0], 2303, 1, __PYX_ERR(0, 2303, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2305
 * cdef cudaError_t cudaGraphicsEGLRegisterImage(cudaGraphicsResource_t* pCudaResource, EGLImageKHR image, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2306
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsEGLRegisterImage(<ccuda.CUgraphicsResource*>pCudaResource, image, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2307
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuGraphicsEGLRegisterImage(<ccuda.CUgraphicsResource*>pCudaResource, image, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2306
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsEGLRegisterImage(<ccuda.CUgraphicsResource*>pCudaResource, image, flags)
 */
  }

  /* "cuda/ccudart.pyx":2308
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsEGLRegisterImage(<ccuda.CUgraphicsResource*>pCudaResource, image, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsEGLRegisterImage(((__pyx_t_4cuda_5ccuda_CUgraphicsResource *)__pyx_v_pCudaResource), __pyx_v_image, __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2308, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2309
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsEGLRegisterImage(<ccuda.CUgraphicsResource*>pCudaResource, image, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2310
 *     err = <cudaError_t>ccuda._cuGraphicsEGLRegisterImage(<ccuda.CUgraphicsResource*>pCudaResource, image, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2309
 *         return err
 *     err = <cudaError_t>ccuda._cuGraphicsEGLRegisterImage(<ccuda.CUgraphicsResource*>pCudaResource, image, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2311
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEGLStreamConsumerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2303
 *     return err
 * 
 * cdef cudaError_t cudaGraphicsEGLRegisterImage(cudaGraphicsResource_t* pCudaResource, EGLImageKHR image, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsEGLRegisterImage", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2313
 *     return err
 * 
 * cdef cudaError_t cudaEGLStreamConsumerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaEGLStreamConsumerConnect(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *__pyx_v_conn, __pyx_t_4cuda_7ccudart_EGLStreamKHR __pyx_v_eglStream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaEGLStreamConsumerConnect", __pyx_f[0], 2313, 1, __PYX_ERR(0, 2313, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2315
 * cdef cudaError_t cudaEGLStreamConsumerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2316
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerConnect(<ccuda.CUeglStreamConnection*>conn, eglStream)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2317
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerConnect(<ccuda.CUeglStreamConnection*>conn, eglStream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2316
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerConnect(<ccuda.CUeglStreamConnection*>conn, eglStream)
 */
  }

  /* "cuda/ccudart.pyx":2318
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerConnect(<ccuda.CUeglStreamConnection*>conn, eglStream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamConsumerConnect(((__pyx_t_4cuda_5ccuda_CUeglStreamConnection *)__pyx_v_conn), __pyx_v_eglStream); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2318, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2319
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerConnect(<ccuda.CUeglStreamConnection*>conn, eglStream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2320
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerConnect(<ccuda.CUeglStreamConnection*>conn, eglStream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2319
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerConnect(<ccuda.CUeglStreamConnection*>conn, eglStream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2321
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEGLStreamConsumerConnectWithFlags(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2313
 *     return err
 * 
 * cdef cudaError_t cudaEGLStreamConsumerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaEGLStreamConsumerConnect", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2323
 *     return err
 * 
 * cdef cudaError_t cudaEGLStreamConsumerConnectWithFlags(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaEGLStreamConsumerConnectWithFlags(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *__pyx_v_conn, __pyx_t_4cuda_7ccudart_EGLStreamKHR __pyx_v_eglStream, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaEGLStreamConsumerConnectWithFlags", __pyx_f[0], 2323, 1, __PYX_ERR(0, 2323, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2325
 * cdef cudaError_t cudaEGLStreamConsumerConnectWithFlags(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2326
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerConnectWithFlags(<ccuda.CUeglStreamConnection*>conn, eglStream, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2327
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerConnectWithFlags(<ccuda.CUeglStreamConnection*>conn, eglStream, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2326
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerConnectWithFlags(<ccuda.CUeglStreamConnection*>conn, eglStream, flags)
 */
  }

  /* "cuda/ccudart.pyx":2328
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerConnectWithFlags(<ccuda.CUeglStreamConnection*>conn, eglStream, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamConsumerConnectWithFlags(((__pyx_t_4cuda_5ccuda_CUeglStreamConnection *)__pyx_v_conn), __pyx_v_eglStream, __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2328, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2329
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerConnectWithFlags(<ccuda.CUeglStreamConnection*>conn, eglStream, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2330
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerConnectWithFlags(<ccuda.CUeglStreamConnection*>conn, eglStream, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2329
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerConnectWithFlags(<ccuda.CUeglStreamConnection*>conn, eglStream, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2331
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEGLStreamConsumerDisconnect(cudaEglStreamConnection* conn) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2323
 *     return err
 * 
 * cdef cudaError_t cudaEGLStreamConsumerConnectWithFlags(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaEGLStreamConsumerConnectWithFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2333
 *     return err
 * 
 * cdef cudaError_t cudaEGLStreamConsumerDisconnect(cudaEglStreamConnection* conn) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaEGLStreamConsumerDisconnect(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *__pyx_v_conn) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaEGLStreamConsumerDisconnect", __pyx_f[0], 2333, 1, __PYX_ERR(0, 2333, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2335
 * cdef cudaError_t cudaEGLStreamConsumerDisconnect(cudaEglStreamConnection* conn) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2336
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerDisconnect(<ccuda.CUeglStreamConnection*>conn)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2337
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerDisconnect(<ccuda.CUeglStreamConnection*>conn)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2336
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerDisconnect(<ccuda.CUeglStreamConnection*>conn)
 */
  }

  /* "cuda/ccudart.pyx":2338
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerDisconnect(<ccuda.CUeglStreamConnection*>conn)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamConsumerDisconnect(((__pyx_t_4cuda_5ccuda_CUeglStreamConnection *)__pyx_v_conn)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2338, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2339
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerDisconnect(<ccuda.CUeglStreamConnection*>conn)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2340
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerDisconnect(<ccuda.CUeglStreamConnection*>conn)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2339
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerDisconnect(<ccuda.CUeglStreamConnection*>conn)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2341
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEGLStreamConsumerAcquireFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t* pCudaResource, cudaStream_t* pStream, unsigned int timeout) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2333
 *     return err
 * 
 * cdef cudaError_t cudaEGLStreamConsumerDisconnect(cudaEglStreamConnection* conn) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaEGLStreamConsumerDisconnect", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2343
 *     return err
 * 
 * cdef cudaError_t cudaEGLStreamConsumerAcquireFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t* pCudaResource, cudaStream_t* pStream, unsigned int timeout) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaEGLStreamConsumerAcquireFrame(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *__pyx_v_conn, __pyx_t_4cuda_7ccudart_cudaGraphicsResource_t *__pyx_v_pCudaResource, __pyx_t_4cuda_7ccudart_cudaStream_t *__pyx_v_pStream, unsigned int __pyx_v_timeout) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaEGLStreamConsumerAcquireFrame", __pyx_f[0], 2343, 1, __PYX_ERR(0, 2343, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2345
 * cdef cudaError_t cudaEGLStreamConsumerAcquireFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t* pCudaResource, cudaStream_t* pStream, unsigned int timeout) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2346
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerAcquireFrame(<ccuda.CUeglStreamConnection*>conn, <ccuda.CUgraphicsResource*>pCudaResource, <ccuda.CUstream*>pStream, timeout)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2347
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerAcquireFrame(<ccuda.CUeglStreamConnection*>conn, <ccuda.CUgraphicsResource*>pCudaResource, <ccuda.CUstream*>pStream, timeout)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2346
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerAcquireFrame(<ccuda.CUeglStreamConnection*>conn, <ccuda.CUgraphicsResource*>pCudaResource, <ccuda.CUstream*>pStream, timeout)
 */
  }

  /* "cuda/ccudart.pyx":2348
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerAcquireFrame(<ccuda.CUeglStreamConnection*>conn, <ccuda.CUgraphicsResource*>pCudaResource, <ccuda.CUstream*>pStream, timeout)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamConsumerAcquireFrame(((__pyx_t_4cuda_5ccuda_CUeglStreamConnection *)__pyx_v_conn), ((__pyx_t_4cuda_5ccuda_CUgraphicsResource *)__pyx_v_pCudaResource), ((__pyx_t_4cuda_5ccuda_CUstream *)__pyx_v_pStream), __pyx_v_timeout); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2348, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2349
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerAcquireFrame(<ccuda.CUeglStreamConnection*>conn, <ccuda.CUgraphicsResource*>pCudaResource, <ccuda.CUstream*>pStream, timeout)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2350
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerAcquireFrame(<ccuda.CUeglStreamConnection*>conn, <ccuda.CUgraphicsResource*>pCudaResource, <ccuda.CUstream*>pStream, timeout)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2349
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerAcquireFrame(<ccuda.CUeglStreamConnection*>conn, <ccuda.CUgraphicsResource*>pCudaResource, <ccuda.CUstream*>pStream, timeout)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2351
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEGLStreamConsumerReleaseFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t pCudaResource, cudaStream_t* pStream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2343
 *     return err
 * 
 * cdef cudaError_t cudaEGLStreamConsumerAcquireFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t* pCudaResource, cudaStream_t* pStream, unsigned int timeout) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaEGLStreamConsumerAcquireFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2353
 *     return err
 * 
 * cdef cudaError_t cudaEGLStreamConsumerReleaseFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t pCudaResource, cudaStream_t* pStream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaEGLStreamConsumerReleaseFrame(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *__pyx_v_conn, __pyx_t_4cuda_7ccudart_cudaGraphicsResource_t __pyx_v_pCudaResource, __pyx_t_4cuda_7ccudart_cudaStream_t *__pyx_v_pStream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaEGLStreamConsumerReleaseFrame", __pyx_f[0], 2353, 1, __PYX_ERR(0, 2353, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2355
 * cdef cudaError_t cudaEGLStreamConsumerReleaseFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t pCudaResource, cudaStream_t* pStream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2356
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerReleaseFrame(<ccuda.CUeglStreamConnection*>conn, <ccuda.CUgraphicsResource>pCudaResource, <ccuda.CUstream*>pStream)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2357
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerReleaseFrame(<ccuda.CUeglStreamConnection*>conn, <ccuda.CUgraphicsResource>pCudaResource, <ccuda.CUstream*>pStream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2356
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerReleaseFrame(<ccuda.CUeglStreamConnection*>conn, <ccuda.CUgraphicsResource>pCudaResource, <ccuda.CUstream*>pStream)
 */
  }

  /* "cuda/ccudart.pyx":2358
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerReleaseFrame(<ccuda.CUeglStreamConnection*>conn, <ccuda.CUgraphicsResource>pCudaResource, <ccuda.CUstream*>pStream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamConsumerReleaseFrame(((__pyx_t_4cuda_5ccuda_CUeglStreamConnection *)__pyx_v_conn), ((__pyx_t_4cuda_5ccuda_CUgraphicsResource)__pyx_v_pCudaResource), ((__pyx_t_4cuda_5ccuda_CUstream *)__pyx_v_pStream)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2358, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2359
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerReleaseFrame(<ccuda.CUeglStreamConnection*>conn, <ccuda.CUgraphicsResource>pCudaResource, <ccuda.CUstream*>pStream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2360
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerReleaseFrame(<ccuda.CUeglStreamConnection*>conn, <ccuda.CUgraphicsResource>pCudaResource, <ccuda.CUstream*>pStream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2359
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamConsumerReleaseFrame(<ccuda.CUeglStreamConnection*>conn, <ccuda.CUgraphicsResource>pCudaResource, <ccuda.CUstream*>pStream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2361
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEGLStreamProducerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, EGLint width, EGLint height) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2353
 *     return err
 * 
 * cdef cudaError_t cudaEGLStreamConsumerReleaseFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t pCudaResource, cudaStream_t* pStream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaEGLStreamConsumerReleaseFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2363
 *     return err
 * 
 * cdef cudaError_t cudaEGLStreamProducerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, EGLint width, EGLint height) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaEGLStreamProducerConnect(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *__pyx_v_conn, __pyx_t_4cuda_7ccudart_EGLStreamKHR __pyx_v_eglStream, __pyx_t_4cuda_7ccudart_EGLint __pyx_v_width, __pyx_t_4cuda_7ccudart_EGLint __pyx_v_height) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaEGLStreamProducerConnect", __pyx_f[0], 2363, 1, __PYX_ERR(0, 2363, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2365
 * cdef cudaError_t cudaEGLStreamProducerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, EGLint width, EGLint height) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2366
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamProducerConnect(<ccuda.CUeglStreamConnection*>conn, eglStream, width, height)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2367
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuEGLStreamProducerConnect(<ccuda.CUeglStreamConnection*>conn, eglStream, width, height)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2366
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamProducerConnect(<ccuda.CUeglStreamConnection*>conn, eglStream, width, height)
 */
  }

  /* "cuda/ccudart.pyx":2368
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamProducerConnect(<ccuda.CUeglStreamConnection*>conn, eglStream, width, height)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamProducerConnect(((__pyx_t_4cuda_5ccuda_CUeglStreamConnection *)__pyx_v_conn), __pyx_v_eglStream, __pyx_v_width, __pyx_v_height); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2368, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2369
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamProducerConnect(<ccuda.CUeglStreamConnection*>conn, eglStream, width, height)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2370
 *     err = <cudaError_t>ccuda._cuEGLStreamProducerConnect(<ccuda.CUeglStreamConnection*>conn, eglStream, width, height)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2369
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamProducerConnect(<ccuda.CUeglStreamConnection*>conn, eglStream, width, height)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2371
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEGLStreamProducerDisconnect(cudaEglStreamConnection* conn) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2363
 *     return err
 * 
 * cdef cudaError_t cudaEGLStreamProducerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, EGLint width, EGLint height) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaEGLStreamProducerConnect", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2373
 *     return err
 * 
 * cdef cudaError_t cudaEGLStreamProducerDisconnect(cudaEglStreamConnection* conn) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaEGLStreamProducerDisconnect(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *__pyx_v_conn) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaEGLStreamProducerDisconnect", __pyx_f[0], 2373, 1, __PYX_ERR(0, 2373, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2375
 * cdef cudaError_t cudaEGLStreamProducerDisconnect(cudaEglStreamConnection* conn) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2376
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamProducerDisconnect(<ccuda.CUeglStreamConnection*>conn)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2377
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuEGLStreamProducerDisconnect(<ccuda.CUeglStreamConnection*>conn)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2376
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamProducerDisconnect(<ccuda.CUeglStreamConnection*>conn)
 */
  }

  /* "cuda/ccudart.pyx":2378
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamProducerDisconnect(<ccuda.CUeglStreamConnection*>conn)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamProducerDisconnect(((__pyx_t_4cuda_5ccuda_CUeglStreamConnection *)__pyx_v_conn)); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2378, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2379
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamProducerDisconnect(<ccuda.CUeglStreamConnection*>conn)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2380
 *     err = <cudaError_t>ccuda._cuEGLStreamProducerDisconnect(<ccuda.CUeglStreamConnection*>conn)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2379
 *         return err
 *     err = <cudaError_t>ccuda._cuEGLStreamProducerDisconnect(<ccuda.CUeglStreamConnection*>conn)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2381
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEGLStreamProducerPresentFrame(cudaEglStreamConnection* conn, cudaEglFrame eglframe, cudaStream_t* pStream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2373
 *     return err
 * 
 * cdef cudaError_t cudaEGLStreamProducerDisconnect(cudaEglStreamConnection* conn) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaEGLStreamProducerDisconnect", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2383
 *     return err
 * 
 * cdef cudaError_t cudaEGLStreamProducerPresentFrame(cudaEglStreamConnection* conn, cudaEglFrame eglframe, cudaStream_t* pStream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamProducerPresentFrame(conn, eglframe, pStream)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaEGLStreamProducerPresentFrame(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *__pyx_v_conn, __pyx_t_4cuda_7ccudart_cudaEglFrame __pyx_v_eglframe, __pyx_t_4cuda_7ccudart_cudaStream_t *__pyx_v_pStream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaEGLStreamProducerPresentFrame", __pyx_f[0], 2383, 1, __PYX_ERR(0, 2383, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2384
 * 
 * cdef cudaError_t cudaEGLStreamProducerPresentFrame(cudaEglStreamConnection* conn, cudaEglFrame eglframe, cudaStream_t* pStream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaEGLStreamProducerPresentFrame(conn, eglframe, pStream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEGLStreamProducerReturnFrame(cudaEglStreamConnection* conn, cudaEglFrame* eglframe, cudaStream_t* pStream) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamProducerPresentFrame(__pyx_v_conn, __pyx_v_eglframe, __pyx_v_pStream); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2384, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2383
 *     return err
 * 
 * cdef cudaError_t cudaEGLStreamProducerPresentFrame(cudaEglStreamConnection* conn, cudaEglFrame eglframe, cudaStream_t* pStream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamProducerPresentFrame(conn, eglframe, pStream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaEGLStreamProducerPresentFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2386
 *     return _cudaEGLStreamProducerPresentFrame(conn, eglframe, pStream)
 * 
 * cdef cudaError_t cudaEGLStreamProducerReturnFrame(cudaEglStreamConnection* conn, cudaEglFrame* eglframe, cudaStream_t* pStream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamProducerReturnFrame(conn, eglframe, pStream)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaEGLStreamProducerReturnFrame(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *__pyx_v_conn, __pyx_t_4cuda_7ccudart_cudaEglFrame *__pyx_v_eglframe, __pyx_t_4cuda_7ccudart_cudaStream_t *__pyx_v_pStream) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaEGLStreamProducerReturnFrame", __pyx_f[0], 2386, 1, __PYX_ERR(0, 2386, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2387
 * 
 * cdef cudaError_t cudaEGLStreamProducerReturnFrame(cudaEglStreamConnection* conn, cudaEglFrame* eglframe, cudaStream_t* pStream) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaEGLStreamProducerReturnFrame(conn, eglframe, pStream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedEglFrame(cudaEglFrame* eglFrame, cudaGraphicsResource_t resource, unsigned int index, unsigned int mipLevel) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamProducerReturnFrame(__pyx_v_conn, __pyx_v_eglframe, __pyx_v_pStream); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2387, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2386
 *     return _cudaEGLStreamProducerPresentFrame(conn, eglframe, pStream)
 * 
 * cdef cudaError_t cudaEGLStreamProducerReturnFrame(cudaEglStreamConnection* conn, cudaEglFrame* eglframe, cudaStream_t* pStream) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamProducerReturnFrame(conn, eglframe, pStream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaEGLStreamProducerReturnFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2389
 *     return _cudaEGLStreamProducerReturnFrame(conn, eglframe, pStream)
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedEglFrame(cudaEglFrame* eglFrame, cudaGraphicsResource_t resource, unsigned int index, unsigned int mipLevel) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsResourceGetMappedEglFrame(eglFrame, resource, index, mipLevel)
 * 
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsResourceGetMappedEglFrame(__pyx_t_4cuda_7ccudart_cudaEglFrame *__pyx_v_eglFrame, __pyx_t_4cuda_7ccudart_cudaGraphicsResource_t __pyx_v_resource, unsigned int __pyx_v_index, unsigned int __pyx_v_mipLevel) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaGraphicsResourceGetMappedEglFrame", __pyx_f[0], 2389, 1, __PYX_ERR(0, 2389, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2390
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedEglFrame(cudaEglFrame* eglFrame, cudaGraphicsResource_t resource, unsigned int index, unsigned int mipLevel) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     return _cudaGraphicsResourceGetMappedEglFrame(eglFrame, resource, index, mipLevel)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEventCreateFromEGLSync(cudaEvent_t* phEvent, EGLSyncKHR eglSync, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsResourceGetMappedEglFrame(__pyx_v_eglFrame, __pyx_v_resource, __pyx_v_index, __pyx_v_mipLevel); if (unlikely(__pyx_t_1 == ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2390, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2389
 *     return _cudaEGLStreamProducerReturnFrame(conn, eglframe, pStream)
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedEglFrame(cudaEglFrame* eglFrame, cudaGraphicsResource_t resource, unsigned int index, unsigned int mipLevel) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsResourceGetMappedEglFrame(eglFrame, resource, index, mipLevel)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsResourceGetMappedEglFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":2392
 *     return _cudaGraphicsResourceGetMappedEglFrame(eglFrame, resource, index, mipLevel)
 * 
 * cdef cudaError_t cudaEventCreateFromEGLSync(cudaEvent_t* phEvent, EGLSyncKHR eglSync, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

static __pyx_t_4cuda_7ccudart_cudaError_t __pyx_f_4cuda_7ccudart_cudaEventCreateFromEGLSync(__pyx_t_4cuda_7ccudart_cudaEvent_t *__pyx_v_phEvent, __pyx_t_4cuda_7ccudart_EGLSyncKHR __pyx_v_eglSync, unsigned int __pyx_v_flags) {
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_v_err;
  __pyx_t_4cuda_7ccudart_cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_5ccuda_CUresult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cudaEventCreateFromEGLSync", __pyx_f[0], 2392, 1, __PYX_ERR(0, 2392, __pyx_L1_error));

  /* "cuda/ccudart.pyx":2394
 * cdef cudaError_t cudaEventCreateFromEGLSync(cudaEvent_t* phEvent, EGLSyncKHR eglSync, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_v_err = ((struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_v_4cuda_7ccudart_m_global->__pyx_vtab)->lazyInit(__pyx_v_4cuda_7ccudart_m_global);

  /* "cuda/ccudart.pyx":2395
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEventCreateFromEGLSync(<ccuda.CUevent*>phEvent, eglSync, flags)
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2396
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>ccuda._cuEventCreateFromEGLSync(<ccuda.CUevent*>phEvent, eglSync, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":2395
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>ccuda._cuEventCreateFromEGLSync(<ccuda.CUevent*>phEvent, eglSync, flags)
 */
  }

  /* "cuda/ccudart.pyx":2397
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>ccuda._cuEventCreateFromEGLSync(<ccuda.CUevent*>phEvent, eglSync, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_5_cuda_5ccuda__cuEventCreateFromEGLSync(((__pyx_t_4cuda_5ccuda_CUevent *)__pyx_v_phEvent), __pyx_v_eglSync, __pyx_v_flags); if (unlikely(__pyx_t_2 == ((__pyx_t_4cuda_5ccuda_CUresult)__pyx_e_4cuda_5ccuda_CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2397, __pyx_L1_error)
  __pyx_v_err = ((__pyx_t_4cuda_7ccudart_cudaError_t)__pyx_t_2);

  /* "cuda/ccudart.pyx":2398
 *         return err
 *     err = <cudaError_t>ccuda._cuEventCreateFromEGLSync(<ccuda.CUevent*>phEvent, eglSync, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = ((__pyx_v_err != __pyx_e_4cuda_7ccudart_cudaSuccess) != 0);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":2399
 *     err = <cudaError_t>ccuda._cuEventCreateFromEGLSync(<ccuda.CUevent*>phEvent, eglSync, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 */
    (void)(__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError(__pyx_v_err));

    /* "cuda/ccudart.pyx":2398
 *         return err
 *     err = <cudaError_t>ccuda._cuEventCreateFromEGLSync(<ccuda.CUevent*>phEvent, eglSync, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/ccudart.pyx":2400
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":2392
 *     return _cudaGraphicsResourceGetMappedEglFrame(eglFrame, resource, index, mipLevel)
 * 
 * cdef cudaError_t cudaEventCreateFromEGLSync(cudaEvent_t* phEvent, EGLSyncKHR eglSync, unsigned int flags) nogil except ?cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err
 *     err = m_global.lazyInit()
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cuda.ccudart.cudaEventCreateFromEGLSync", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = __pyx_e_4cuda_7ccudart_cudaErrorCallRequiresNewerDriver;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_ccudart(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_ccudart},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "ccudart",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  return 0;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_4cuda_7ccudart_m_global = ((struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)Py_None); Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("cudaDeviceReset", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceReset, "__pyx_t_4cuda_7ccudart_cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceSynchronize", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceSynchronize, "__pyx_t_4cuda_7ccudart_cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceSetLimit", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceSetLimit, "__pyx_t_4cuda_7ccudart_cudaError_t (enum __pyx_t_4cuda_7ccudart_cudaLimit, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetLimit", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetLimit, "__pyx_t_4cuda_7ccudart_cudaError_t (size_t *, enum __pyx_t_4cuda_7ccudart_cudaLimit)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetTexture1DLinearMaxWidth", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetTexture1DLinearMaxWidth, "__pyx_t_4cuda_7ccudart_cudaError_t (size_t *, struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc const *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetCacheConfig", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetCacheConfig, "__pyx_t_4cuda_7ccudart_cudaError_t (enum __pyx_t_4cuda_7ccudart_cudaFuncCache *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetStreamPriorityRange", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetStreamPriorityRange, "__pyx_t_4cuda_7ccudart_cudaError_t (int *, int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceSetCacheConfig", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceSetCacheConfig, "__pyx_t_4cuda_7ccudart_cudaError_t (enum __pyx_t_4cuda_7ccudart_cudaFuncCache)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetSharedMemConfig", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetSharedMemConfig, "__pyx_t_4cuda_7ccudart_cudaError_t (enum __pyx_t_4cuda_7ccudart_cudaSharedMemConfig *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceSetSharedMemConfig", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceSetSharedMemConfig, "__pyx_t_4cuda_7ccudart_cudaError_t (enum __pyx_t_4cuda_7ccudart_cudaSharedMemConfig)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetByPCIBusId", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetByPCIBusId, "__pyx_t_4cuda_7ccudart_cudaError_t (int *, char const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetPCIBusId", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetPCIBusId, "__pyx_t_4cuda_7ccudart_cudaError_t (char *, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaIpcGetEventHandle", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaIpcGetEventHandle, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaIpcEventHandle_t *, __pyx_t_4cuda_7ccudart_cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaIpcOpenEventHandle", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaIpcOpenEventHandle, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEvent_t *, __pyx_t_4cuda_7ccudart_cudaIpcEventHandle_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaIpcGetMemHandle", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaIpcGetMemHandle, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaIpcMemHandle_t *, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaIpcOpenMemHandle", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaIpcOpenMemHandle, "__pyx_t_4cuda_7ccudart_cudaError_t (void **, __pyx_t_4cuda_7ccudart_cudaIpcMemHandle_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaIpcCloseMemHandle", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaIpcCloseMemHandle, "__pyx_t_4cuda_7ccudart_cudaError_t (void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceFlushGPUDirectRDMAWrites", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceFlushGPUDirectRDMAWrites, "__pyx_t_4cuda_7ccudart_cudaError_t (enum __pyx_t_4cuda_7ccudart_cudaFlushGPUDirectRDMAWritesTarget, enum __pyx_t_4cuda_7ccudart_cudaFlushGPUDirectRDMAWritesScope)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaThreadExit", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaThreadExit, "__pyx_t_4cuda_7ccudart_cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaThreadSynchronize", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaThreadSynchronize, "__pyx_t_4cuda_7ccudart_cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaThreadSetLimit", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaThreadSetLimit, "__pyx_t_4cuda_7ccudart_cudaError_t (enum __pyx_t_4cuda_7ccudart_cudaLimit, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaThreadGetLimit", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaThreadGetLimit, "__pyx_t_4cuda_7ccudart_cudaError_t (size_t *, enum __pyx_t_4cuda_7ccudart_cudaLimit)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaThreadGetCacheConfig", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaThreadGetCacheConfig, "__pyx_t_4cuda_7ccudart_cudaError_t (enum __pyx_t_4cuda_7ccudart_cudaFuncCache *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaThreadSetCacheConfig", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaThreadSetCacheConfig, "__pyx_t_4cuda_7ccudart_cudaError_t (enum __pyx_t_4cuda_7ccudart_cudaFuncCache)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetLastError", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetLastError, "__pyx_t_4cuda_7ccudart_cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaPeekAtLastError", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaPeekAtLastError, "__pyx_t_4cuda_7ccudart_cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetErrorName", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetErrorName, "char const *(__pyx_t_4cuda_7ccudart_cudaError_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetErrorString", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetErrorString, "char const *(__pyx_t_4cuda_7ccudart_cudaError_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetDeviceCount", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetDeviceCount, "__pyx_t_4cuda_7ccudart_cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetDeviceProperties", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetDeviceProperties, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaDeviceProp *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetAttribute, "__pyx_t_4cuda_7ccudart_cudaError_t (int *, enum __pyx_t_4cuda_7ccudart_cudaDeviceAttr, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetDefaultMemPool", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetDefaultMemPool, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaMemPool_t *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceSetMemPool", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceSetMemPool, "__pyx_t_4cuda_7ccudart_cudaError_t (int, __pyx_t_4cuda_7ccudart_cudaMemPool_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetMemPool", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetMemPool, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaMemPool_t *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetNvSciSyncAttributes", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetNvSciSyncAttributes, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetP2PAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetP2PAttribute, "__pyx_t_4cuda_7ccudart_cudaError_t (int *, enum __pyx_t_4cuda_7ccudart_cudaDeviceP2PAttr, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaChooseDevice", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaChooseDevice, "__pyx_t_4cuda_7ccudart_cudaError_t (int *, struct __pyx_t_4cuda_7ccudart_cudaDeviceProp const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaSetDevice", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaSetDevice, "__pyx_t_4cuda_7ccudart_cudaError_t (int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetDevice", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetDevice, "__pyx_t_4cuda_7ccudart_cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaSetDeviceFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaSetDeviceFlags, "__pyx_t_4cuda_7ccudart_cudaError_t (unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetDeviceFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetDeviceFlags, "__pyx_t_4cuda_7ccudart_cudaError_t (unsigned int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamCreate", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamCreate, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamCreateWithFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamCreateWithFlags, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamCreateWithPriority", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamCreateWithPriority, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t *, unsigned int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamGetPriority", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamGetPriority, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t, int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamGetFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamGetFlags, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t, unsigned int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaCtxResetPersistingL2Cache", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaCtxResetPersistingL2Cache, "__pyx_t_4cuda_7ccudart_cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamCopyAttributes", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamCopyAttributes, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamGetAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamGetAttribute, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t, enum __pyx_t_4cuda_7ccudart_cudaStreamAttrID, union __pyx_t_4cuda_7ccudart_cudaStreamAttrValue *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamSetAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamSetAttribute, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t, enum __pyx_t_4cuda_7ccudart_cudaStreamAttrID, union __pyx_t_4cuda_7ccudart_cudaStreamAttrValue const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamDestroy", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamDestroy, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamWaitEvent", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamWaitEvent, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t, __pyx_t_4cuda_7ccudart_cudaEvent_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamAddCallback", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamAddCallback, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t, __pyx_t_4cuda_7ccudart_cudaStreamCallback_t, void *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamSynchronize", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamSynchronize, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamQuery", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamQuery, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamAttachMemAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamAttachMemAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t, void *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamBeginCapture", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamBeginCapture, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t, enum __pyx_t_4cuda_7ccudart_cudaStreamCaptureMode)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaThreadExchangeStreamCaptureMode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaThreadExchangeStreamCaptureMode, "__pyx_t_4cuda_7ccudart_cudaError_t (enum __pyx_t_4cuda_7ccudart_cudaStreamCaptureMode *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamEndCapture", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamEndCapture, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t, __pyx_t_4cuda_7ccudart_cudaGraph_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamIsCapturing", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamIsCapturing, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t, enum __pyx_t_4cuda_7ccudart_cudaStreamCaptureStatus *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamGetCaptureInfo", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamGetCaptureInfo, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t, enum __pyx_t_4cuda_7ccudart_cudaStreamCaptureStatus *, unsigned PY_LONG_LONG *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamGetCaptureInfo_v2", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamGetCaptureInfo_v2, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t, enum __pyx_t_4cuda_7ccudart_cudaStreamCaptureStatus *, unsigned PY_LONG_LONG *, __pyx_t_4cuda_7ccudart_cudaGraph_t *, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const **, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamUpdateCaptureDependencies", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamUpdateCaptureDependencies, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEventCreate", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEventCreate, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEvent_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEventCreateWithFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEventCreateWithFlags, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEvent_t *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEventRecord", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEventRecord, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEvent_t, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEventRecordWithFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEventRecordWithFlags, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEvent_t, __pyx_t_4cuda_7ccudart_cudaStream_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEventQuery", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEventQuery, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEventSynchronize", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEventSynchronize, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEventDestroy", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEventDestroy, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEventElapsedTime", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEventElapsedTime, "__pyx_t_4cuda_7ccudart_cudaError_t (float *, __pyx_t_4cuda_7ccudart_cudaEvent_t, __pyx_t_4cuda_7ccudart_cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaImportExternalMemory", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaImportExternalMemory, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaExternalMemory_t *, struct __pyx_t_4cuda_7ccudart_cudaExternalMemoryHandleDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaExternalMemoryGetMappedBuffer", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaExternalMemoryGetMappedBuffer, "__pyx_t_4cuda_7ccudart_cudaError_t (void **, __pyx_t_4cuda_7ccudart_cudaExternalMemory_t, struct __pyx_t_4cuda_7ccudart_cudaExternalMemoryBufferDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaExternalMemoryGetMappedMipmappedArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaExternalMemoryGetMappedMipmappedArray, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaMipmappedArray_t *, __pyx_t_4cuda_7ccudart_cudaExternalMemory_t, struct __pyx_t_4cuda_7ccudart_cudaExternalMemoryMipmappedArrayDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDestroyExternalMemory", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDestroyExternalMemory, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaExternalMemory_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaImportExternalSemaphore", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaImportExternalSemaphore, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaExternalSemaphore_t *, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreHandleDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaSignalExternalSemaphoresAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaSignalExternalSemaphoresAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaExternalSemaphore_t const *, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreSignalParams const *, unsigned int, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaWaitExternalSemaphoresAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaWaitExternalSemaphoresAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaExternalSemaphore_t const *, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreWaitParams const *, unsigned int, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDestroyExternalSemaphore", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDestroyExternalSemaphore, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaExternalSemaphore_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaFuncSetCacheConfig", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaFuncSetCacheConfig, "__pyx_t_4cuda_7ccudart_cudaError_t (void const *, enum __pyx_t_4cuda_7ccudart_cudaFuncCache)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaFuncSetSharedMemConfig", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaFuncSetSharedMemConfig, "__pyx_t_4cuda_7ccudart_cudaError_t (void const *, enum __pyx_t_4cuda_7ccudart_cudaSharedMemConfig)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaFuncGetAttributes", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaFuncGetAttributes, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaFuncAttributes *, void const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaFuncSetAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaFuncSetAttribute, "__pyx_t_4cuda_7ccudart_cudaError_t (void const *, enum __pyx_t_4cuda_7ccudart_cudaFuncAttribute, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaSetDoubleForDevice", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaSetDoubleForDevice, "__pyx_t_4cuda_7ccudart_cudaError_t (double *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaSetDoubleForHost", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaSetDoubleForHost, "__pyx_t_4cuda_7ccudart_cudaError_t (double *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaLaunchHostFunc", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaLaunchHostFunc, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t, __pyx_t_4cuda_7ccudart_cudaHostFn_t, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaOccupancyMaxActiveBlocksPerMultiprocessor", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaOccupancyMaxActiveBlocksPerMultiprocessor, "__pyx_t_4cuda_7ccudart_cudaError_t (int *, void const *, int, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaOccupancyAvailableDynamicSMemPerBlock", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaOccupancyAvailableDynamicSMemPerBlock, "__pyx_t_4cuda_7ccudart_cudaError_t (size_t *, void const *, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags, "__pyx_t_4cuda_7ccudart_cudaError_t (int *, void const *, int, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMallocManaged", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMallocManaged, "__pyx_t_4cuda_7ccudart_cudaError_t (void **, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMalloc", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMalloc, "__pyx_t_4cuda_7ccudart_cudaError_t (void **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMallocHost", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMallocHost, "__pyx_t_4cuda_7ccudart_cudaError_t (void **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMallocPitch", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMallocPitch, "__pyx_t_4cuda_7ccudart_cudaError_t (void **, size_t *, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMallocArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMallocArray, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaArray_t *, struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc const *, size_t, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaFree", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaFree, "__pyx_t_4cuda_7ccudart_cudaError_t (void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaFreeHost", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaFreeHost, "__pyx_t_4cuda_7ccudart_cudaError_t (void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaFreeArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaFreeArray, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaFreeMipmappedArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaFreeMipmappedArray, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaMipmappedArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaHostAlloc", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaHostAlloc, "__pyx_t_4cuda_7ccudart_cudaError_t (void **, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaHostRegister", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaHostRegister, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaHostUnregister", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaHostUnregister, "__pyx_t_4cuda_7ccudart_cudaError_t (void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaHostGetDevicePointer", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaHostGetDevicePointer, "__pyx_t_4cuda_7ccudart_cudaError_t (void **, void *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaHostGetFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaHostGetFlags, "__pyx_t_4cuda_7ccudart_cudaError_t (unsigned int *, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMalloc3D", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMalloc3D, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr *, struct __pyx_t_4cuda_7ccudart_cudaExtent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMalloc3DArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMalloc3DArray, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaArray_t *, struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc const *, struct __pyx_t_4cuda_7ccudart_cudaExtent, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMallocMipmappedArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMallocMipmappedArray, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaMipmappedArray_t *, struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc const *, struct __pyx_t_4cuda_7ccudart_cudaExtent, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetMipmappedArrayLevel", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetMipmappedArrayLevel, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaArray_t *, __pyx_t_4cuda_7ccudart_cudaMipmappedArray_const_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy3D", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy3D, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy3DPeer", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy3DPeer, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DPeerParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy3DAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy3DAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms const *, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy3DPeerAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy3DPeerAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DPeerParms const *, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemGetInfo", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemGetInfo, "__pyx_t_4cuda_7ccudart_cudaError_t (size_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaArrayGetInfo", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaArrayGetInfo, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc *, struct __pyx_t_4cuda_7ccudart_cudaExtent *, unsigned int *, __pyx_t_4cuda_7ccudart_cudaArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaArrayGetPlane", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaArrayGetPlane, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaArray_t *, __pyx_t_4cuda_7ccudart_cudaArray_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaArrayGetMemoryRequirements", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaArrayGetMemoryRequirements, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaArrayMemoryRequirements *, __pyx_t_4cuda_7ccudart_cudaArray_t, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMipmappedArrayGetMemoryRequirements", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMipmappedArrayGetMemoryRequirements, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaArrayMemoryRequirements *, __pyx_t_4cuda_7ccudart_cudaMipmappedArray_t, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaArrayGetSparseProperties", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaArrayGetSparseProperties, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaArraySparseProperties *, __pyx_t_4cuda_7ccudart_cudaArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMipmappedArrayGetSparseProperties", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMipmappedArrayGetSparseProperties, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaArraySparseProperties *, __pyx_t_4cuda_7ccudart_cudaMipmappedArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpyPeer", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpyPeer, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, int, void const *, int, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy2D", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy2D, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, size_t, void const *, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy2DToArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy2DToArray, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaArray_t, size_t, size_t, void const *, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy2DFromArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy2DFromArray, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, size_t, __pyx_t_4cuda_7ccudart_cudaArray_const_t, size_t, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy2DArrayToArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy2DArrayToArray, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaArray_t, size_t, size_t, __pyx_t_4cuda_7ccudart_cudaArray_const_t, size_t, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpyAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpyAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpyPeerAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpyPeerAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, int, void const *, int, size_t, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy2DAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy2DAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, size_t, void const *, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy2DToArrayAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy2DToArrayAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaArray_t, size_t, size_t, void const *, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy2DFromArrayAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy2DFromArrayAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, size_t, __pyx_t_4cuda_7ccudart_cudaArray_const_t, size_t, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemset", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemset, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, int, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemset2D", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemset2D, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, size_t, int, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemset3D", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemset3D, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr, int, struct __pyx_t_4cuda_7ccudart_cudaExtent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemsetAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemsetAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, int, size_t, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemset2DAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemset2DAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, size_t, int, size_t, size_t, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemset3DAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemset3DAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr, int, struct __pyx_t_4cuda_7ccudart_cudaExtent, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPrefetchAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPrefetchAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (void const *, size_t, int, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemAdvise", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemAdvise, "__pyx_t_4cuda_7ccudart_cudaError_t (void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemoryAdvise, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemRangeGetAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemRangeGetAttribute, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemRangeAttribute, void const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemRangeGetAttributes", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemRangeGetAttributes, "__pyx_t_4cuda_7ccudart_cudaError_t (void **, size_t *, enum __pyx_t_4cuda_7ccudart_cudaMemRangeAttribute *, size_t, void const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpyToArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpyToArray, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaArray_t, size_t, size_t, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpyFromArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpyFromArray, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, __pyx_t_4cuda_7ccudart_cudaArray_const_t, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpyArrayToArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpyArrayToArray, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaArray_t, size_t, size_t, __pyx_t_4cuda_7ccudart_cudaArray_const_t, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpyToArrayAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpyToArrayAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaArray_t, size_t, size_t, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpyFromArrayAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpyFromArrayAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, __pyx_t_4cuda_7ccudart_cudaArray_const_t, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMallocAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMallocAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (void **, size_t, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaFreeAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaFreeAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolTrimTo", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolTrimTo, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaMemPool_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolSetAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolSetAttribute, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaMemPool_t, enum __pyx_t_4cuda_7ccudart_cudaMemPoolAttr, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolGetAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolGetAttribute, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaMemPool_t, enum __pyx_t_4cuda_7ccudart_cudaMemPoolAttr, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolSetAccess", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolSetAccess, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaMemPool_t, struct __pyx_t_4cuda_7ccudart_cudaMemAccessDesc const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolGetAccess", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolGetAccess, "__pyx_t_4cuda_7ccudart_cudaError_t (enum __pyx_t_4cuda_7ccudart_cudaMemAccessFlags *, __pyx_t_4cuda_7ccudart_cudaMemPool_t, struct __pyx_t_4cuda_7ccudart_cudaMemLocation *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolCreate", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolCreate, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaMemPool_t *, struct __pyx_t_4cuda_7ccudart_cudaMemPoolProps const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolDestroy", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolDestroy, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaMemPool_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMallocFromPoolAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMallocFromPoolAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (void **, size_t, __pyx_t_4cuda_7ccudart_cudaMemPool_t, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolExportToShareableHandle", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolExportToShareableHandle, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, __pyx_t_4cuda_7ccudart_cudaMemPool_t, enum __pyx_t_4cuda_7ccudart_cudaMemAllocationHandleType, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolImportFromShareableHandle", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolImportFromShareableHandle, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaMemPool_t *, void *, enum __pyx_t_4cuda_7ccudart_cudaMemAllocationHandleType, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolExportPointer", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolExportPointer, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaMemPoolPtrExportData *, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolImportPointer", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolImportPointer, "__pyx_t_4cuda_7ccudart_cudaError_t (void **, __pyx_t_4cuda_7ccudart_cudaMemPool_t, struct __pyx_t_4cuda_7ccudart_cudaMemPoolPtrExportData *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaPointerGetAttributes", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaPointerGetAttributes, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaPointerAttributes *, void const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceCanAccessPeer", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceCanAccessPeer, "__pyx_t_4cuda_7ccudart_cudaError_t (int *, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceEnablePeerAccess", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceEnablePeerAccess, "__pyx_t_4cuda_7ccudart_cudaError_t (int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceDisablePeerAccess", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceDisablePeerAccess, "__pyx_t_4cuda_7ccudart_cudaError_t (int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsUnregisterResource", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsUnregisterResource, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphicsResource_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsResourceSetMapFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsResourceSetMapFlags, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphicsResource_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsMapResources", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsMapResources, "__pyx_t_4cuda_7ccudart_cudaError_t (int, __pyx_t_4cuda_7ccudart_cudaGraphicsResource_t *, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsUnmapResources", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsUnmapResources, "__pyx_t_4cuda_7ccudart_cudaError_t (int, __pyx_t_4cuda_7ccudart_cudaGraphicsResource_t *, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsResourceGetMappedPointer", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsResourceGetMappedPointer, "__pyx_t_4cuda_7ccudart_cudaError_t (void **, size_t *, __pyx_t_4cuda_7ccudart_cudaGraphicsResource_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsSubResourceGetMappedArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsSubResourceGetMappedArray, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaArray_t *, __pyx_t_4cuda_7ccudart_cudaGraphicsResource_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsResourceGetMappedMipmappedArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsResourceGetMappedMipmappedArray, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaMipmappedArray_t *, __pyx_t_4cuda_7ccudart_cudaGraphicsResource_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetChannelDesc", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetChannelDesc, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc *, __pyx_t_4cuda_7ccudart_cudaArray_const_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaCreateChannelDesc", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaCreateChannelDesc, "struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc (int, int, int, int, enum __pyx_t_4cuda_7ccudart_cudaChannelFormatKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaCreateTextureObject", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaCreateTextureObject, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaTextureObject_t *, struct __pyx_t_4cuda_7ccudart_cudaResourceDesc const *, struct __pyx_t_4cuda_7ccudart_cudaTextureDesc const *, struct __pyx_t_4cuda_7ccudart_cudaResourceViewDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDestroyTextureObject", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDestroyTextureObject, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaTextureObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetTextureObjectResourceDesc", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetTextureObjectResourceDesc, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaResourceDesc *, __pyx_t_4cuda_7ccudart_cudaTextureObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetTextureObjectTextureDesc", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetTextureObjectTextureDesc, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaTextureDesc *, __pyx_t_4cuda_7ccudart_cudaTextureObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetTextureObjectResourceViewDesc", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetTextureObjectResourceViewDesc, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaResourceViewDesc *, __pyx_t_4cuda_7ccudart_cudaTextureObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaCreateSurfaceObject", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaCreateSurfaceObject, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaSurfaceObject_t *, struct __pyx_t_4cuda_7ccudart_cudaResourceDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDestroySurfaceObject", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDestroySurfaceObject, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaSurfaceObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetSurfaceObjectResourceDesc", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetSurfaceObjectResourceDesc, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaResourceDesc *, __pyx_t_4cuda_7ccudart_cudaSurfaceObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDriverGetVersion", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDriverGetVersion, "__pyx_t_4cuda_7ccudart_cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaRuntimeGetVersion", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaRuntimeGetVersion, "__pyx_t_4cuda_7ccudart_cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphCreate", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphCreate, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraph_t *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddKernelNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddKernelNode, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t, struct __pyx_t_4cuda_7ccudart_cudaKernelNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphKernelNodeGetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphKernelNodeGetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaKernelNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphKernelNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphKernelNodeSetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaKernelNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphKernelNodeCopyAttributes", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphKernelNodeCopyAttributes, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphKernelNodeGetAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphKernelNodeGetAttribute, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, enum __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrID, union __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrValue *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphKernelNodeSetAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphKernelNodeSetAttribute, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, enum __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrID, union __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrValue const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddMemcpyNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddMemcpyNode, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t, struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddMemcpyNode1D", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddMemcpyNode1D, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t, void *, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphMemcpyNodeGetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphMemcpyNodeGetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphMemcpyNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphMemcpyNodeSetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphMemcpyNodeSetParams1D", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphMemcpyNodeSetParams1D, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, void *, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddMemsetNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddMemsetNode, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t, struct __pyx_t_4cuda_7ccudart_cudaMemsetParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphMemsetNodeGetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphMemsetNodeGetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaMemsetParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphMemsetNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphMemsetNodeSetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaMemsetParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddHostNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddHostNode, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t, struct __pyx_t_4cuda_7ccudart_cudaHostNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphHostNodeGetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphHostNodeGetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaHostNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphHostNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphHostNodeSetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaHostNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddChildGraphNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddChildGraphNode, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t, __pyx_t_4cuda_7ccudart_cudaGraph_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphChildGraphNodeGetGraph", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphChildGraphNodeGetGraph, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, __pyx_t_4cuda_7ccudart_cudaGraph_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddEmptyNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddEmptyNode, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddEventRecordNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddEventRecordNode, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t, __pyx_t_4cuda_7ccudart_cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphEventRecordNodeGetEvent", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphEventRecordNodeGetEvent, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, __pyx_t_4cuda_7ccudart_cudaEvent_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphEventRecordNodeSetEvent", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphEventRecordNodeSetEvent, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, __pyx_t_4cuda_7ccudart_cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddEventWaitNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddEventWaitNode, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t, __pyx_t_4cuda_7ccudart_cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphEventWaitNodeGetEvent", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphEventWaitNodeGetEvent, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, __pyx_t_4cuda_7ccudart_cudaEvent_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphEventWaitNodeSetEvent", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphEventWaitNodeSetEvent, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, __pyx_t_4cuda_7ccudart_cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddExternalSemaphoresSignalNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddExternalSemaphoresSignalNode, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreSignalNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExternalSemaphoresSignalNodeGetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExternalSemaphoresSignalNodeGetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreSignalNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExternalSemaphoresSignalNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExternalSemaphoresSignalNodeSetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreSignalNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddExternalSemaphoresWaitNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddExternalSemaphoresWaitNode, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreWaitNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExternalSemaphoresWaitNodeGetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExternalSemaphoresWaitNodeGetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreWaitNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExternalSemaphoresWaitNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExternalSemaphoresWaitNodeSetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreWaitNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddMemAllocNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddMemAllocNode, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t, struct __pyx_t_4cuda_7ccudart_cudaMemAllocNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphMemAllocNodeGetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphMemAllocNodeGetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaMemAllocNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddMemFreeNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddMemFreeNode, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphMemFreeNodeGetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphMemFreeNodeGetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGraphMemTrim", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGraphMemTrim, "__pyx_t_4cuda_7ccudart_cudaError_t (int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetGraphMemAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetGraphMemAttribute, "__pyx_t_4cuda_7ccudart_cudaError_t (int, enum __pyx_t_4cuda_7ccudart_cudaGraphMemAttributeType, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceSetGraphMemAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceSetGraphMemAttribute, "__pyx_t_4cuda_7ccudart_cudaError_t (int, enum __pyx_t_4cuda_7ccudart_cudaGraphMemAttributeType, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphClone", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphClone, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraph_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphNodeFindInClone", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphNodeFindInClone, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraphNode_t, __pyx_t_4cuda_7ccudart_cudaGraph_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphNodeGetType", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphNodeGetType, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, enum __pyx_t_4cuda_7ccudart_cudaGraphNodeType *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphGetNodes", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphGetNodes, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphGetRootNodes", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphGetRootNodes, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphGetEdges", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphGetEdges, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraphNode_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphNodeGetDependencies", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphNodeGetDependencies, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphNodeGetDependentNodes", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphNodeGetDependentNodes, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddDependencies", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddDependencies, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphRemoveDependencies", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphRemoveDependencies, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphDestroyNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphDestroyNode, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphInstantiate", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphInstantiate, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t *, char *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphInstantiateWithFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphInstantiateWithFlags, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, unsigned PY_LONG_LONG)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecKernelNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecKernelNodeSetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaKernelNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecMemcpyNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecMemcpyNodeSetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecMemcpyNodeSetParams1D", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecMemcpyNodeSetParams1D, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t, void *, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecMemsetNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecMemsetNodeSetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaMemsetParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecHostNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecHostNodeSetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaHostNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecChildGraphNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecChildGraphNodeSetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t, __pyx_t_4cuda_7ccudart_cudaGraph_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecEventRecordNodeSetEvent", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecEventRecordNodeSetEvent, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t, __pyx_t_4cuda_7ccudart_cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecEventWaitNodeSetEvent", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecEventWaitNodeSetEvent, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t, __pyx_t_4cuda_7ccudart_cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecExternalSemaphoresSignalNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecExternalSemaphoresSignalNodeSetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreSignalNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecExternalSemaphoresWaitNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecExternalSemaphoresWaitNodeSetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreWaitNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphNodeSetEnabled", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphNodeSetEnabled, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphNodeGetEnabled", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphNodeGetEnabled, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t, unsigned int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecUpdate", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecUpdate, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t *, enum __pyx_t_4cuda_7ccudart_cudaGraphExecUpdateResult *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphUpload", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphUpload, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphLaunch", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphLaunch, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecDestroy", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecDestroy, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphDestroy", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphDestroy, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraph_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphDebugDotPrint", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphDebugDotPrint, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraph_t, char const *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaUserObjectCreate", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaUserObjectCreate, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaUserObject_t *, void *, __pyx_t_4cuda_7ccudart_cudaHostFn_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaUserObjectRetain", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaUserObjectRetain, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaUserObject_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaUserObjectRelease", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaUserObjectRelease, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaUserObject_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphRetainUserObject", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphRetainUserObject, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaUserObject_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphReleaseUserObject", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphReleaseUserObject, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaUserObject_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetDriverEntryPoint", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetDriverEntryPoint, "__pyx_t_4cuda_7ccudart_cudaError_t (char const *, void **, unsigned PY_LONG_LONG)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetExportTable", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetExportTable, "__pyx_t_4cuda_7ccudart_cudaError_t (void const **, __pyx_t_4cuda_7ccudart_cudaUUID_t const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("make_cudaPitchedPtr", (void (*)(void))__pyx_f_4cuda_7ccudart_make_cudaPitchedPtr, "struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr (void *, size_t, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("make_cudaPos", (void (*)(void))__pyx_f_4cuda_7ccudart_make_cudaPos, "struct __pyx_t_4cuda_7ccudart_cudaPos (size_t, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("make_cudaExtent", (void (*)(void))__pyx_f_4cuda_7ccudart_make_cudaExtent, "struct __pyx_t_4cuda_7ccudart_cudaExtent (size_t, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaProfilerInitialize", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaProfilerInitialize, "__pyx_t_4cuda_7ccudart_cudaError_t (char const *, char const *, __pyx_t_4cuda_7ccudart_cudaOutputMode_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaProfilerStart", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaProfilerStart, "__pyx_t_4cuda_7ccudart_cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaProfilerStop", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaProfilerStop, "__pyx_t_4cuda_7ccudart_cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaVDPAUGetDevice", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaVDPAUGetDevice, "__pyx_t_4cuda_7ccudart_cudaError_t (int *, __pyx_t_4cuda_7ccudart_VdpDevice, __pyx_t_4cuda_7ccudart_VdpGetProcAddress *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaVDPAUSetVDPAUDevice", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaVDPAUSetVDPAUDevice, "__pyx_t_4cuda_7ccudart_cudaError_t (int, __pyx_t_4cuda_7ccudart_VdpDevice, __pyx_t_4cuda_7ccudart_VdpGetProcAddress *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsVDPAURegisterVideoSurface", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsVDPAURegisterVideoSurface, "__pyx_t_4cuda_7ccudart_cudaError_t (struct cudaGraphicsResource **, __pyx_t_4cuda_7ccudart_VdpVideoSurface, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsVDPAURegisterOutputSurface", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsVDPAURegisterOutputSurface, "__pyx_t_4cuda_7ccudart_cudaError_t (struct cudaGraphicsResource **, __pyx_t_4cuda_7ccudart_VdpOutputSurface, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGLGetDevices", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGLGetDevices, "__pyx_t_4cuda_7ccudart_cudaError_t (unsigned int *, int *, unsigned int, enum __pyx_t_4cuda_7ccudart_cudaGLDeviceList)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsGLRegisterImage", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsGLRegisterImage, "__pyx_t_4cuda_7ccudart_cudaError_t (struct cudaGraphicsResource **, __pyx_t_4cuda_7ccudart_GLuint, __pyx_t_4cuda_7ccudart_GLenum, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsGLRegisterBuffer", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsGLRegisterBuffer, "__pyx_t_4cuda_7ccudart_cudaError_t (struct cudaGraphicsResource **, __pyx_t_4cuda_7ccudart_GLuint, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsEGLRegisterImage", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsEGLRegisterImage, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphicsResource_t *, __pyx_t_4cuda_7ccudart_EGLImageKHR, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEGLStreamConsumerConnect", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEGLStreamConsumerConnect, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_EGLStreamKHR)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEGLStreamConsumerConnectWithFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEGLStreamConsumerConnectWithFlags, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_EGLStreamKHR, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEGLStreamConsumerDisconnect", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEGLStreamConsumerDisconnect, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEGLStreamConsumerAcquireFrame", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEGLStreamConsumerAcquireFrame, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_cudaGraphicsResource_t *, __pyx_t_4cuda_7ccudart_cudaStream_t *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEGLStreamConsumerReleaseFrame", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEGLStreamConsumerReleaseFrame, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_cudaGraphicsResource_t, __pyx_t_4cuda_7ccudart_cudaStream_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEGLStreamProducerConnect", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEGLStreamProducerConnect, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_EGLStreamKHR, __pyx_t_4cuda_7ccudart_EGLint, __pyx_t_4cuda_7ccudart_EGLint)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEGLStreamProducerDisconnect", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEGLStreamProducerDisconnect, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEGLStreamProducerPresentFrame", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEGLStreamProducerPresentFrame, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_cudaEglFrame, __pyx_t_4cuda_7ccudart_cudaStream_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEGLStreamProducerReturnFrame", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEGLStreamProducerReturnFrame, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_cudaEglFrame *, __pyx_t_4cuda_7ccudart_cudaStream_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsResourceGetMappedEglFrame", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsResourceGetMappedEglFrame, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglFrame *, __pyx_t_4cuda_7ccudart_cudaGraphicsResource_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEventCreateFromEGLSync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEventCreateFromEGLSync, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEvent_t *, __pyx_t_4cuda_7ccudart_EGLSyncKHR, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cuda._lib.ccudart.utils"); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal = __Pyx_ImportType(__pyx_t_1, "cuda._lib.ccudart.utils", "cudaPythonGlobal", sizeof(struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal) __PYX_ERR(1, 14, __pyx_L1_error)
  __pyx_vtabptr_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal = (struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal*)__Pyx_GetVtable(__pyx_ptype_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal->tp_dict); if (unlikely(!__pyx_vtabptr_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal)) __PYX_ERR(1, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cuda._cuda.ccuda"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuDeviceGetNvSciSyncAttributes", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuDeviceGetNvSciSyncAttributes, "__pyx_t_4cuda_5ccuda_CUresult (void *, __pyx_t_4cuda_5ccuda_CUdevice, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuDeviceSetMemPool", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuDeviceSetMemPool, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdevice, __pyx_t_4cuda_5ccuda_CUmemoryPool)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuDeviceGetMemPool", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuDeviceGetMemPool, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUmemoryPool *, __pyx_t_4cuda_5ccuda_CUdevice)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuDeviceGetDefaultMemPool", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuDeviceGetDefaultMemPool, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUmemoryPool *, __pyx_t_4cuda_5ccuda_CUdevice)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuFlushGPUDirectRDMAWrites", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuFlushGPUDirectRDMAWrites, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUflushGPUDirectRDMAWritesTarget, __pyx_t_4cuda_5ccuda_CUflushGPUDirectRDMAWritesScope)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuCtxSynchronize", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuCtxSynchronize, "__pyx_t_4cuda_5ccuda_CUresult (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuCtxSetLimit", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuCtxSetLimit, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUlimit, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuCtxGetLimit", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuCtxGetLimit, "__pyx_t_4cuda_5ccuda_CUresult (size_t *, __pyx_t_4cuda_5ccuda_CUlimit)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuCtxGetCacheConfig", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuCtxGetCacheConfig, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUfunc_cache *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuCtxSetCacheConfig", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuCtxSetCacheConfig, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUfunc_cache)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuCtxGetSharedMemConfig", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuCtxGetSharedMemConfig, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUsharedconfig *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuCtxSetSharedMemConfig", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuCtxSetSharedMemConfig, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUsharedconfig)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuCtxGetStreamPriorityRange", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuCtxGetStreamPriorityRange, "__pyx_t_4cuda_5ccuda_CUresult (int *, int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuCtxResetPersistingL2Cache", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuCtxResetPersistingL2Cache, "__pyx_t_4cuda_5ccuda_CUresult (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemGetInfo_v2", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemGetInfo_v2, "__pyx_t_4cuda_5ccuda_CUresult (size_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemAlloc_v2", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemAlloc_v2, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdeviceptr *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemFree_v2", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemFree_v2, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdeviceptr)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemFreeHost", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemFreeHost, "__pyx_t_4cuda_5ccuda_CUresult (void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemHostAlloc", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemHostAlloc, "__pyx_t_4cuda_5ccuda_CUresult (void **, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemHostGetDevicePointer_v2", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemHostGetDevicePointer_v2, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdeviceptr *, void *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemHostGetFlags", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemHostGetFlags, "__pyx_t_4cuda_5ccuda_CUresult (unsigned int *, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemAllocManaged", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemAllocManaged, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdeviceptr *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuIpcGetEventHandle", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuIpcGetEventHandle, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUipcEventHandle *, __pyx_t_4cuda_5ccuda_CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuIpcOpenEventHandle", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuIpcOpenEventHandle, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUevent *, __pyx_t_4cuda_5ccuda_CUipcEventHandle)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuIpcGetMemHandle", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuIpcGetMemHandle, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUipcMemHandle *, __pyx_t_4cuda_5ccuda_CUdeviceptr)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuIpcOpenMemHandle_v2", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuIpcOpenMemHandle_v2, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdeviceptr *, __pyx_t_4cuda_5ccuda_CUipcMemHandle, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuIpcCloseMemHandle", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuIpcCloseMemHandle, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdeviceptr)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemHostRegister_v2", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemHostRegister_v2, "__pyx_t_4cuda_5ccuda_CUresult (void *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemHostUnregister", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemHostUnregister, "__pyx_t_4cuda_5ccuda_CUresult (void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemsetD8_v2", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemsetD8_v2, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdeviceptr, unsigned char, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemsetD2D8_v2", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemsetD2D8_v2, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdeviceptr, size_t, unsigned char, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemsetD8Async", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemsetD8Async, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdeviceptr, unsigned char, size_t, __pyx_t_4cuda_5ccuda_CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemsetD2D8Async", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemsetD2D8Async, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdeviceptr, size_t, unsigned char, size_t, size_t, __pyx_t_4cuda_5ccuda_CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuArrayGetPlane", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuArrayGetPlane, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUarray *, __pyx_t_4cuda_5ccuda_CUarray, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuArrayDestroy", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuArrayDestroy, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUarray)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMipmappedArrayGetLevel", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMipmappedArrayGetLevel, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUarray *, __pyx_t_4cuda_5ccuda_CUmipmappedArray, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMipmappedArrayDestroy", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMipmappedArrayDestroy, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUmipmappedArray)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemFreeAsync", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemFreeAsync, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdeviceptr, __pyx_t_4cuda_5ccuda_CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemAllocAsync", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemAllocAsync, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdeviceptr *, size_t, __pyx_t_4cuda_5ccuda_CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemPoolTrimTo", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolTrimTo, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUmemoryPool, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemPoolSetAttribute", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolSetAttribute, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUmemoryPool, __pyx_t_4cuda_5ccuda_CUmemPool_attribute, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemPoolGetAttribute", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolGetAttribute, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUmemoryPool, __pyx_t_4cuda_5ccuda_CUmemPool_attribute, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemPoolGetAccess", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolGetAccess, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUmemAccess_flags *, __pyx_t_4cuda_5ccuda_CUmemoryPool, __pyx_t_4cuda_5ccuda_CUmemLocation *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemPoolCreate", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolCreate, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUmemoryPool *, __pyx_t_4cuda_5ccuda_CUmemPoolProps const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemPoolDestroy", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolDestroy, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUmemoryPool)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemAllocFromPoolAsync", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemAllocFromPoolAsync, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdeviceptr *, size_t, __pyx_t_4cuda_5ccuda_CUmemoryPool, __pyx_t_4cuda_5ccuda_CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemPoolExportToShareableHandle", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolExportToShareableHandle, "__pyx_t_4cuda_5ccuda_CUresult (void *, __pyx_t_4cuda_5ccuda_CUmemoryPool, __pyx_t_4cuda_5ccuda_CUmemAllocationHandleType, unsigned PY_LONG_LONG)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemPoolImportFromShareableHandle", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolImportFromShareableHandle, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUmemoryPool *, void *, __pyx_t_4cuda_5ccuda_CUmemAllocationHandleType, unsigned PY_LONG_LONG)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemPoolExportPointer", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolExportPointer, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUmemPoolPtrExportData *, __pyx_t_4cuda_5ccuda_CUdeviceptr)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemPoolImportPointer", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemPoolImportPointer, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdeviceptr *, __pyx_t_4cuda_5ccuda_CUmemoryPool, __pyx_t_4cuda_5ccuda_CUmemPoolPtrExportData *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuMemPrefetchAsync", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuMemPrefetchAsync, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdeviceptr, size_t, __pyx_t_4cuda_5ccuda_CUdevice, __pyx_t_4cuda_5ccuda_CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuStreamCreate", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuStreamCreate, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUstream *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuStreamCreateWithPriority", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuStreamCreateWithPriority, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUstream *, unsigned int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuStreamGetPriority", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuStreamGetPriority, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUstream, int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuStreamGetFlags", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuStreamGetFlags, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUstream, unsigned int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuStreamWaitEvent", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuStreamWaitEvent, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUevent, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuStreamBeginCapture_v2", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuStreamBeginCapture_v2, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUstreamCaptureMode)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuThreadExchangeStreamCaptureMode", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuThreadExchangeStreamCaptureMode, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUstreamCaptureMode *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuStreamEndCapture", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuStreamEndCapture, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUgraph *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuStreamIsCapturing", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuStreamIsCapturing, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUstreamCaptureStatus *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuStreamUpdateCaptureDependencies", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuStreamUpdateCaptureDependencies, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUgraphNode *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuStreamAttachMemAsync", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuStreamAttachMemAsync, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUdeviceptr, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuStreamQuery", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuStreamQuery, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuStreamSynchronize", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuStreamSynchronize, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuStreamDestroy_v2", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuStreamDestroy_v2, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuStreamCopyAttributes", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuStreamCopyAttributes, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuStreamGetAttribute", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuStreamGetAttribute, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUstreamAttrID, __pyx_t_4cuda_5ccuda_CUstreamAttrValue *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuStreamSetAttribute", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuStreamSetAttribute, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUstreamAttrID, __pyx_t_4cuda_5ccuda_CUstreamAttrValue const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuEventCreate", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuEventCreate, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUevent *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuEventRecord", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuEventRecord, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUevent, __pyx_t_4cuda_5ccuda_CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuEventRecordWithFlags", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuEventRecordWithFlags, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUevent, __pyx_t_4cuda_5ccuda_CUstream, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuEventSynchronize", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuEventSynchronize, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuEventDestroy_v2", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuEventDestroy_v2, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuEventElapsedTime", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuEventElapsedTime, "__pyx_t_4cuda_5ccuda_CUresult (float *, __pyx_t_4cuda_5ccuda_CUevent, __pyx_t_4cuda_5ccuda_CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuDestroyExternalMemory", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuDestroyExternalMemory, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUexternalMemory)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuDestroyExternalSemaphore", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuDestroyExternalSemaphore, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUexternalSemaphore)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuFuncSetAttribute", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuFuncSetAttribute, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUfunction, __pyx_t_4cuda_5ccuda_CUfunction_attribute, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuFuncSetCacheConfig", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuFuncSetCacheConfig, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUfunction, __pyx_t_4cuda_5ccuda_CUfunc_cache)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuFuncSetSharedMemConfig", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuFuncSetSharedMemConfig, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUfunction, __pyx_t_4cuda_5ccuda_CUsharedconfig)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuLaunchHostFunc", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuLaunchHostFunc, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUstream, __pyx_t_4cuda_5ccuda_CUhostFn, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphCreate", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphCreate, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraph *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphAddKernelNode", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddKernelNode, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t, __pyx_t_4cuda_5ccuda_CUDA_KERNEL_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphKernelNodeSetParams", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphKernelNodeSetParams, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_KERNEL_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphMemsetNodeGetParams", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphMemsetNodeGetParams, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_MEMSET_NODE_PARAMS *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphMemsetNodeSetParams", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphMemsetNodeSetParams, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_MEMSET_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphAddHostNode", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddHostNode, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t, __pyx_t_4cuda_5ccuda_CUDA_HOST_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphHostNodeGetParams", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphHostNodeGetParams, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_HOST_NODE_PARAMS *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphHostNodeSetParams", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphHostNodeSetParams, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_HOST_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphAddChildGraphNode", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddChildGraphNode, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t, __pyx_t_4cuda_5ccuda_CUgraph)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphChildGraphNodeGetGraph", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphChildGraphNodeGetGraph, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUgraph *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphAddEmptyNode", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddEmptyNode, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphAddEventRecordNode", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddEventRecordNode, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t, __pyx_t_4cuda_5ccuda_CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphEventRecordNodeGetEvent", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphEventRecordNodeGetEvent, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUevent *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphEventRecordNodeSetEvent", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphEventRecordNodeSetEvent, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphAddEventWaitNode", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddEventWaitNode, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t, __pyx_t_4cuda_5ccuda_CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphEventWaitNodeGetEvent", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphEventWaitNodeGetEvent, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUevent *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphEventWaitNodeSetEvent", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphEventWaitNodeSetEvent, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphAddExternalSemaphoresSignalNode", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddExternalSemaphoresSignalNode, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t, __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphExternalSemaphoresSignalNodeGetParams", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExternalSemaphoresSignalNodeGetParams, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphExternalSemaphoresSignalNodeSetParams", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExternalSemaphoresSignalNodeSetParams, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphAddExternalSemaphoresWaitNode", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddExternalSemaphoresWaitNode, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t, __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphExternalSemaphoresWaitNodeGetParams", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExternalSemaphoresWaitNodeGetParams, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphExternalSemaphoresWaitNodeSetParams", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExternalSemaphoresWaitNodeSetParams, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphAddMemFreeNode", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddMemFreeNode, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t, __pyx_t_4cuda_5ccuda_CUdeviceptr)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuDeviceGraphMemTrim", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuDeviceGraphMemTrim, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdevice)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuDeviceGetGraphMemAttribute", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuDeviceGetGraphMemAttribute, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdevice, __pyx_t_4cuda_5ccuda_CUgraphMem_attribute, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuDeviceSetGraphMemAttribute", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuDeviceSetGraphMemAttribute, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdevice, __pyx_t_4cuda_5ccuda_CUgraphMem_attribute, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphClone", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphClone, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraph *, __pyx_t_4cuda_5ccuda_CUgraph)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphNodeFindInClone", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphNodeFindInClone, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUgraph)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphNodeGetType", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphNodeGetType, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUgraphNodeType *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphGetNodes", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphGetNodes, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphGetRootNodes", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphGetRootNodes, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphGetEdges", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphGetEdges, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraphNode *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphNodeGetDependencies", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphNodeGetDependencies, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUgraphNode *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphNodeGetDependentNodes", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphNodeGetDependentNodes, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUgraphNode *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphAddDependencies", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphAddDependencies, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphRemoveDependencies", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphRemoveDependencies, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode const *, __pyx_t_4cuda_5ccuda_CUgraphNode const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphDestroyNode", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphDestroyNode, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphInstantiate_v2", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphInstantiate_v2, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphExec *, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode *, char *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphInstantiateWithFlags", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphInstantiateWithFlags, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphExec *, __pyx_t_4cuda_5ccuda_CUgraph, unsigned PY_LONG_LONG)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphExecKernelNodeSetParams", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecKernelNodeSetParams, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_KERNEL_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphExecHostNodeSetParams", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecHostNodeSetParams, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_HOST_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphExecChildGraphNodeSetParams", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecChildGraphNodeSetParams, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUgraph)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphExecEventRecordNodeSetEvent", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecEventRecordNodeSetEvent, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphExecEventWaitNodeSetEvent", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecEventWaitNodeSetEvent, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphExecExternalSemaphoresSignalNodeSetParams", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecExternalSemaphoresSignalNodeSetParams, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphExecExternalSemaphoresWaitNodeSetParams", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecExternalSemaphoresWaitNodeSetParams, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphNodeSetEnabled", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphNodeSetEnabled, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUgraphNode, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphNodeGetEnabled", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphNodeGetEnabled, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUgraphNode, unsigned int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphUpload", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphUpload, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphLaunch", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphLaunch, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphExecDestroy", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecDestroy, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphExec)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphDestroy", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphDestroy, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraph)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphExecUpdate", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphExecUpdate, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphExec, __pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUgraphNode *, __pyx_t_4cuda_5ccuda_CUgraphExecUpdateResult *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphKernelNodeCopyAttributes", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphKernelNodeCopyAttributes, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUgraphNode)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphKernelNodeGetAttribute", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphKernelNodeGetAttribute, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUkernelNodeAttrID, __pyx_t_4cuda_5ccuda_CUkernelNodeAttrValue *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphKernelNodeSetAttribute", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphKernelNodeSetAttribute, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphNode, __pyx_t_4cuda_5ccuda_CUkernelNodeAttrID, __pyx_t_4cuda_5ccuda_CUkernelNodeAttrValue const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphDebugDotPrint", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphDebugDotPrint, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraph, char const *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuUserObjectCreate", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuUserObjectCreate, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUuserObject *, void *, __pyx_t_4cuda_5ccuda_CUhostFn, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuUserObjectRetain", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuUserObjectRetain, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUuserObject, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuUserObjectRelease", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuUserObjectRelease, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUuserObject, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphRetainUserObject", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphRetainUserObject, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUuserObject, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphReleaseUserObject", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphReleaseUserObject, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraph, __pyx_t_4cuda_5ccuda_CUuserObject, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuOccupancyMaxActiveBlocksPerMultiprocessor", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuOccupancyMaxActiveBlocksPerMultiprocessor, "__pyx_t_4cuda_5ccuda_CUresult (int *, __pyx_t_4cuda_5ccuda_CUfunction, int, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags, "__pyx_t_4cuda_5ccuda_CUresult (int *, __pyx_t_4cuda_5ccuda_CUfunction, int, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuOccupancyAvailableDynamicSMemPerBlock", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuOccupancyAvailableDynamicSMemPerBlock, "__pyx_t_4cuda_5ccuda_CUresult (size_t *, __pyx_t_4cuda_5ccuda_CUfunction, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuTexObjectDestroy", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuTexObjectDestroy, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUtexObject)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuSurfObjectDestroy", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuSurfObjectDestroy, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUsurfObject)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphicsUnregisterResource", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsUnregisterResource, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphicsResource)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphicsSubResourceGetMappedArray", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsSubResourceGetMappedArray, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUarray *, __pyx_t_4cuda_5ccuda_CUgraphicsResource, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphicsResourceGetMappedMipmappedArray", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsResourceGetMappedMipmappedArray, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUmipmappedArray *, __pyx_t_4cuda_5ccuda_CUgraphicsResource)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphicsResourceGetMappedPointer_v2", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsResourceGetMappedPointer_v2, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdeviceptr *, size_t *, __pyx_t_4cuda_5ccuda_CUgraphicsResource)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphicsResourceSetMapFlags_v2", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsResourceSetMapFlags_v2, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphicsResource, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphicsMapResources", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsMapResources, "__pyx_t_4cuda_5ccuda_CUresult (unsigned int, __pyx_t_4cuda_5ccuda_CUgraphicsResource *, __pyx_t_4cuda_5ccuda_CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphicsUnmapResources", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsUnmapResources, "__pyx_t_4cuda_5ccuda_CUresult (unsigned int, __pyx_t_4cuda_5ccuda_CUgraphicsResource *, __pyx_t_4cuda_5ccuda_CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGetExportTable", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGetExportTable, "__pyx_t_4cuda_5ccuda_CUresult (void const **, __pyx_t_4cuda_5ccuda_CUuuid const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuProfilerStart", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuProfilerStart, "__pyx_t_4cuda_5ccuda_CUresult (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuProfilerStop", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuProfilerStop, "__pyx_t_4cuda_5ccuda_CUresult (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuVDPAUGetDevice", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuVDPAUGetDevice, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUdevice *, __pyx_t_4cuda_5ccuda_VdpDevice, __pyx_t_4cuda_5ccuda_VdpGetProcAddress *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphicsVDPAURegisterVideoSurface", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsVDPAURegisterVideoSurface, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphicsResource *, __pyx_t_4cuda_5ccuda_VdpVideoSurface, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphicsVDPAURegisterOutputSurface", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsVDPAURegisterOutputSurface, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphicsResource *, __pyx_t_4cuda_5ccuda_VdpOutputSurface, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphicsEGLRegisterImage", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsEGLRegisterImage, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphicsResource *, __pyx_t_4cuda_5ccuda_EGLImageKHR, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuEGLStreamConsumerConnect", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamConsumerConnect, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUeglStreamConnection *, __pyx_t_4cuda_5ccuda_EGLStreamKHR)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuEGLStreamConsumerConnectWithFlags", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamConsumerConnectWithFlags, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUeglStreamConnection *, __pyx_t_4cuda_5ccuda_EGLStreamKHR, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuEGLStreamConsumerDisconnect", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamConsumerDisconnect, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUeglStreamConnection *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuEGLStreamConsumerAcquireFrame", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamConsumerAcquireFrame, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUeglStreamConnection *, __pyx_t_4cuda_5ccuda_CUgraphicsResource *, __pyx_t_4cuda_5ccuda_CUstream *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuEGLStreamConsumerReleaseFrame", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamConsumerReleaseFrame, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUeglStreamConnection *, __pyx_t_4cuda_5ccuda_CUgraphicsResource, __pyx_t_4cuda_5ccuda_CUstream *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuEGLStreamProducerConnect", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamProducerConnect, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUeglStreamConnection *, __pyx_t_4cuda_5ccuda_EGLStreamKHR, __pyx_t_4cuda_5ccuda_EGLint, __pyx_t_4cuda_5ccuda_EGLint)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuEGLStreamProducerDisconnect", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuEGLStreamProducerDisconnect, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUeglStreamConnection *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuEventCreateFromEGLSync", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuEventCreateFromEGLSync, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUevent *, __pyx_t_4cuda_5ccuda_EGLSyncKHR, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphicsGLRegisterBuffer", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsGLRegisterBuffer, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphicsResource *, __pyx_t_4cuda_5ccuda_GLuint, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGraphicsGLRegisterImage", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGraphicsGLRegisterImage, "__pyx_t_4cuda_5ccuda_CUresult (__pyx_t_4cuda_5ccuda_CUgraphicsResource *, __pyx_t_4cuda_5ccuda_GLuint, __pyx_t_4cuda_5ccuda_GLenum, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cuGLGetDevices_v2", (void (**)(void))&__pyx_f_4cuda_5_cuda_5ccuda__cuGLGetDevices_v2, "__pyx_t_4cuda_5ccuda_CUresult (unsigned int *, __pyx_t_4cuda_5ccuda_CUdevice *, unsigned int, __pyx_t_4cuda_5ccuda_CUGLDeviceList)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cuda._lib.ccudart.ccudart"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemcpy", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaStreamCreate", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamCreate, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaEventCreate", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventCreate, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEvent_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaEventQuery", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventQuery, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaCreateChannelDesc", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCreateChannelDesc, "struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc (int, int, int, int, enum __pyx_t_4cuda_7ccudart_cudaChannelFormatKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaDriverGetVersion", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDriverGetVersion, "__pyx_t_4cuda_7ccudart_cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaRuntimeGetVersion", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaRuntimeGetVersion, "__pyx_t_4cuda_7ccudart_cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaDeviceGetTexture1DLinearMaxWidth", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetTexture1DLinearMaxWidth, "__pyx_t_4cuda_7ccudart_cudaError_t (size_t *, struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc const *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMallocHost", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocHost, "__pyx_t_4cuda_7ccudart_cudaError_t (void **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMallocPitch", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocPitch, "__pyx_t_4cuda_7ccudart_cudaError_t (void **, size_t *, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMallocMipmappedArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocMipmappedArray, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaMipmappedArray_t *, struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc const *, struct __pyx_t_4cuda_7ccudart_cudaExtent, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemcpy2D", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2D, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, size_t, void const *, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemcpy2DAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, size_t, void const *, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemcpyAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGraphAddMemcpyNode", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemcpyNode, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t, struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGraphAddMemcpyNode1D", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemcpyNode1D, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t, void *, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGraphMemcpyNodeSetParams1D", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemcpyNodeSetParams1D, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, void *, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGraphExecMemcpyNodeSetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecMemcpyNodeSetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGraphExecMemcpyNodeSetParams1D", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecMemcpyNodeSetParams1D, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t, void *, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGetDriverEntryPoint", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDriverEntryPoint, "__pyx_t_4cuda_7ccudart_cudaError_t (char const *, void **, unsigned PY_LONG_LONG)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGraphAddMemsetNode", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemsetNode, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t, struct __pyx_t_4cuda_7ccudart_cudaMemsetParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGraphExecMemsetNodeSetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecMemsetNodeSetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphExec_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaMemsetParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGraphMemcpyNodeSetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemcpyNodeSetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGraphMemcpyNodeGetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemcpyNodeGetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaFuncGetAttributes", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFuncGetAttributes, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaFuncAttributes *, void const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMallocArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocArray, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaArray_t *, struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc const *, size_t, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMalloc3D", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMalloc3D, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr *, struct __pyx_t_4cuda_7ccudart_cudaExtent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMalloc3DArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMalloc3DArray, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaArray_t *, struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc const *, struct __pyx_t_4cuda_7ccudart_cudaExtent, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGetErrorString", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetErrorString, "char const *(__pyx_t_4cuda_7ccudart_cudaError_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaStreamAddCallback", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamAddCallback, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t, __pyx_t_4cuda_7ccudart_cudaStreamCallback_t, void *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaStreamGetCaptureInfo", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetCaptureInfo, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t, enum __pyx_t_4cuda_7ccudart_cudaStreamCaptureStatus *, unsigned PY_LONG_LONG *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaStreamGetCaptureInfo_v2", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetCaptureInfo_v2, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaStream_t, enum __pyx_t_4cuda_7ccudart_cudaStreamCaptureStatus *, unsigned PY_LONG_LONG *, __pyx_t_4cuda_7ccudart_cudaGraph_t *, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const **, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaImportExternalSemaphore", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaImportExternalSemaphore, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaExternalSemaphore_t *, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreHandleDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaSignalExternalSemaphoresAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSignalExternalSemaphoresAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaExternalSemaphore_t const *, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreSignalParams const *, unsigned int, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaWaitExternalSemaphoresAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaWaitExternalSemaphoresAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaExternalSemaphore_t const *, struct __pyx_t_4cuda_7ccudart_cudaExternalSemaphoreWaitParams const *, unsigned int, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaArrayGetInfo", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetInfo, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc *, struct __pyx_t_4cuda_7ccudart_cudaExtent *, unsigned int *, __pyx_t_4cuda_7ccudart_cudaArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemcpy2DToArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DToArray, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaArray_t, size_t, size_t, void const *, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemcpy2DFromArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DFromArray, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, size_t, __pyx_t_4cuda_7ccudart_cudaArray_const_t, size_t, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemcpy2DArrayToArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DArrayToArray, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaArray_t, size_t, size_t, __pyx_t_4cuda_7ccudart_cudaArray_const_t, size_t, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemcpy2DToArrayAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DToArrayAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaArray_t, size_t, size_t, void const *, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemcpy2DFromArrayAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DFromArrayAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, size_t, __pyx_t_4cuda_7ccudart_cudaArray_const_t, size_t, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemset3D", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset3D, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr, int, struct __pyx_t_4cuda_7ccudart_cudaExtent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemset3DAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset3DAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr, int, struct __pyx_t_4cuda_7ccudart_cudaExtent, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemcpyToArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyToArray, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaArray_t, size_t, size_t, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemcpyFromArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyFromArray, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, __pyx_t_4cuda_7ccudart_cudaArray_const_t, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemcpyToArrayAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyToArrayAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaArray_t, size_t, size_t, void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemcpyFromArrayAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyFromArrayAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, __pyx_t_4cuda_7ccudart_cudaArray_const_t, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaPointerGetAttributes", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaPointerGetAttributes, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaPointerAttributes *, void const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGetDeviceFlags", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDeviceFlags, "__pyx_t_4cuda_7ccudart_cudaError_t (unsigned int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemcpy3D", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3D, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemcpy3DAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3DAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DParms const *, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemPoolSetAccess", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolSetAccess, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaMemPool_t, struct __pyx_t_4cuda_7ccudart_cudaMemAccessDesc const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaDeviceReset", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceReset, "__pyx_t_4cuda_7ccudart_cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaThreadExit", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaThreadExit, "__pyx_t_4cuda_7ccudart_cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGetLastError", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetLastError, "__pyx_t_4cuda_7ccudart_cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaPeekAtLastError", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaPeekAtLastError, "__pyx_t_4cuda_7ccudart_cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGetDevice", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDevice, "__pyx_t_4cuda_7ccudart_cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaSetDevice", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSetDevice, "__pyx_t_4cuda_7ccudart_cudaError_t (int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGetDeviceProperties", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDeviceProperties, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaDeviceProp *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaChooseDevice", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaChooseDevice, "__pyx_t_4cuda_7ccudart_cudaError_t (int *, struct __pyx_t_4cuda_7ccudart_cudaDeviceProp const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemcpyArrayToArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyArrayToArray, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaArray_t, size_t, size_t, __pyx_t_4cuda_7ccudart_cudaArray_const_t, size_t, size_t, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGetChannelDesc", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetChannelDesc, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaChannelFormatDesc *, __pyx_t_4cuda_7ccudart_cudaArray_const_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaCreateTextureObject", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCreateTextureObject, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaTextureObject_t *, struct __pyx_t_4cuda_7ccudart_cudaResourceDesc const *, struct __pyx_t_4cuda_7ccudart_cudaTextureDesc const *, struct __pyx_t_4cuda_7ccudart_cudaResourceViewDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGetTextureObjectTextureDesc", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetTextureObjectTextureDesc, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaTextureDesc *, __pyx_t_4cuda_7ccudart_cudaTextureObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGetTextureObjectResourceViewDesc", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetTextureObjectResourceViewDesc, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaResourceViewDesc *, __pyx_t_4cuda_7ccudart_cudaTextureObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemcpy3DPeer", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3DPeer, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DPeerParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemcpy3DPeerAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3DPeerAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaMemcpy3DPeerParms const *, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_make_cudaPitchedPtr", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__make_cudaPitchedPtr, "struct __pyx_t_4cuda_7ccudart_cudaPitchedPtr (void *, size_t, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_make_cudaPos", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__make_cudaPos, "struct __pyx_t_4cuda_7ccudart_cudaPos (size_t, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_make_cudaExtent", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__make_cudaExtent, "struct __pyx_t_4cuda_7ccudart_cudaExtent (size_t, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaSetDoubleForDevice", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSetDoubleForDevice, "__pyx_t_4cuda_7ccudart_cudaError_t (double *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaSetDoubleForHost", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSetDoubleForHost, "__pyx_t_4cuda_7ccudart_cudaError_t (double *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaSetDeviceFlags", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSetDeviceFlags, "__pyx_t_4cuda_7ccudart_cudaError_t (unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGraphAddMemAllocNode", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemAllocNode, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t *, __pyx_t_4cuda_7ccudart_cudaGraph_t, __pyx_t_4cuda_7ccudart_cudaGraphNode_t const *, size_t, struct __pyx_t_4cuda_7ccudart_cudaMemAllocNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGraphMemAllocNodeGetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemAllocNodeGetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaMemAllocNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGraphMemFreeNodeGetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemFreeNodeGetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemAdvise", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemAdvise, "__pyx_t_4cuda_7ccudart_cudaError_t (void const *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemoryAdvise, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemRangeGetAttribute", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemRangeGetAttribute, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, size_t, enum __pyx_t_4cuda_7ccudart_cudaMemRangeAttribute, void const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemRangeGetAttributes", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemRangeGetAttributes, "__pyx_t_4cuda_7ccudart_cudaError_t (void **, size_t *, enum __pyx_t_4cuda_7ccudart_cudaMemRangeAttribute *, size_t, void const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGetDeviceCount", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDeviceCount, "__pyx_t_4cuda_7ccudart_cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaDeviceGetAttribute", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetAttribute, "__pyx_t_4cuda_7ccudart_cudaError_t (int *, enum __pyx_t_4cuda_7ccudart_cudaDeviceAttr, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaDeviceGetByPCIBusId", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetByPCIBusId, "__pyx_t_4cuda_7ccudart_cudaError_t (int *, char const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaDeviceGetPCIBusId", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetPCIBusId, "__pyx_t_4cuda_7ccudart_cudaError_t (char *, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaDeviceGetP2PAttribute", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetP2PAttribute, "__pyx_t_4cuda_7ccudart_cudaError_t (int *, enum __pyx_t_4cuda_7ccudart_cudaDeviceP2PAttr, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaArrayGetSparseProperties", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetSparseProperties, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaArraySparseProperties *, __pyx_t_4cuda_7ccudart_cudaArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMipmappedArrayGetSparseProperties", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMipmappedArrayGetSparseProperties, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaArraySparseProperties *, __pyx_t_4cuda_7ccudart_cudaMipmappedArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaDeviceCanAccessPeer", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceCanAccessPeer, "__pyx_t_4cuda_7ccudart_cudaError_t (int *, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemcpyPeer", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyPeer, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, int, void const *, int, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMemcpyPeerAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyPeerAsync, "__pyx_t_4cuda_7ccudart_cudaError_t (void *, int, void const *, int, size_t, __pyx_t_4cuda_7ccudart_cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaDeviceEnablePeerAccess", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceEnablePeerAccess, "__pyx_t_4cuda_7ccudart_cudaError_t (int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaDeviceDisablePeerAccess", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceDisablePeerAccess, "__pyx_t_4cuda_7ccudart_cudaError_t (int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaExternalMemoryGetMappedMipmappedArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaExternalMemoryGetMappedMipmappedArray, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaMipmappedArray_t *, __pyx_t_4cuda_7ccudart_cudaExternalMemory_t, struct __pyx_t_4cuda_7ccudart_cudaExternalMemoryMipmappedArrayDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGetSurfaceObjectResourceDesc", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetSurfaceObjectResourceDesc, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaResourceDesc *, __pyx_t_4cuda_7ccudart_cudaSurfaceObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGraphKernelNodeGetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphKernelNodeGetParams, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaGraphNode_t, struct __pyx_t_4cuda_7ccudart_cudaKernelNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaExternalMemoryGetMappedBuffer", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaExternalMemoryGetMappedBuffer, "__pyx_t_4cuda_7ccudart_cudaError_t (void **, __pyx_t_4cuda_7ccudart_cudaExternalMemory_t, struct __pyx_t_4cuda_7ccudart_cudaExternalMemoryBufferDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaImportExternalMemory", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaImportExternalMemory, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaExternalMemory_t *, struct __pyx_t_4cuda_7ccudart_cudaExternalMemoryHandleDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaCreateSurfaceObject", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCreateSurfaceObject, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaSurfaceObject_t *, struct __pyx_t_4cuda_7ccudart_cudaResourceDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGetTextureObjectResourceDesc", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetTextureObjectResourceDesc, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaResourceDesc *, __pyx_t_4cuda_7ccudart_cudaTextureObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaProfilerInitialize", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaProfilerInitialize, "__pyx_t_4cuda_7ccudart_cudaError_t (char const *, char const *, __pyx_t_4cuda_7ccudart_cudaOutputMode_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaEGLStreamProducerPresentFrame", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamProducerPresentFrame, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_cudaEglFrame, __pyx_t_4cuda_7ccudart_cudaStream_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaEGLStreamProducerReturnFrame", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamProducerReturnFrame, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_cudaEglFrame *, __pyx_t_4cuda_7ccudart_cudaStream_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaGraphicsResourceGetMappedEglFrame", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsResourceGetMappedEglFrame, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglFrame *, __pyx_t_4cuda_7ccudart_cudaGraphicsResource_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaVDPAUSetVDPAUDevice", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaVDPAUSetVDPAUDevice, "__pyx_t_4cuda_7ccudart_cudaError_t (int, __pyx_t_4cuda_7ccudart_VdpDevice, __pyx_t_4cuda_7ccudart_VdpGetProcAddress *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaArrayGetMemoryRequirements", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetMemoryRequirements, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaArrayMemoryRequirements *, __pyx_t_4cuda_7ccudart_cudaArray_t, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_cudaMipmappedArrayGetMemoryRequirements", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMipmappedArrayGetMemoryRequirements, "__pyx_t_4cuda_7ccudart_cudaError_t (struct __pyx_t_4cuda_7ccudart_cudaArrayMemoryRequirements *, __pyx_t_4cuda_7ccudart_cudaMipmappedArray_t, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cuda._lib.ccudart.utils"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "globalGetInstance", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_5utils_globalGetInstance, "struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_setLastError", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_5utils__setLastError, "__pyx_t_4cuda_7ccudart_cudaError_t (__pyx_t_4cuda_7ccudart_cudaError_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initccudart(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initccudart(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_ccudart(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_ccudart(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_ccudart(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'ccudart' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_ccudart(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("ccudart", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cuda__ccudart) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cuda.ccudart")) {
      if (unlikely(PyDict_SetItemString(modules, "cuda.ccudart", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_init_code();
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit_ccudart(void)", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "cuda/ccudart.pyx":15
 * from libcpp cimport bool
 * 
 * cdef cudaPythonGlobal m_global = globalGetInstance()             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceReset() nogil except ?cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_4cuda_4_lib_7ccudart_5utils_globalGetInstance()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(((PyObject *)__pyx_v_4cuda_7ccudart_m_global));
  __Pyx_DECREF_SET(__pyx_v_4cuda_7ccudart_m_global, ((struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cuda/ccudart.pyx":1
 * # Copyright 2021-2022 NVIDIA Corporation.  All rights reserved.             # <<<<<<<<<<<<<<
 * #
 * # Please refer to the NVIDIA end user license agreement (EULA) associated
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init cuda.ccudart", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cuda.ccudart");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
    __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    __Pyx_EnterTracing(tstate);
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    __Pyx_LeaveTracing(tstate);
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return __Pyx_IsTracing(tstate, 0, 0) && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyCodeObject *py_code = 0;
#if PY_MAJOR_VERSION >= 3
    py_code = PyCode_NewEmpty(srcfile, funcname, firstlineno);
    if (likely(py_code)) {
        py_code->co_flags |= CO_OPTIMIZED | CO_NEWLOCALS;
    }
#else
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    py_funcname = PyString_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    py_srcfile = PyString_FromString(srcfile);
    if (unlikely(!py_srcfile)) goto bad;
    py_code = PyCode_New(
        0,
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
#endif
    return py_code;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* None */
static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void) {
  int err;
  #ifdef WITH_THREAD
  PyGILState_STATE _save = PyGILState_Ensure();
  #endif
  err = !!PyErr_Occurred();
  #ifdef WITH_THREAD
  PyGILState_Release(_save);
  #endif
  return err;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
